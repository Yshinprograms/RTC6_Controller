// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: open_vector_format.proto
// Protobuf C++ Version: 5.29.3

#include "open_vector_format.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace open_vector_format {

inline constexpr WorkPlane_WorkPlaneMetaData_closedContour::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : contour_section_vector_block_indices_{},
        _contour_section_vector_block_indices_cached_byte_size_{0},
        area_in_mm_2_{0},
        length_in_mm_{0},
        parent_index_{0},
        winding_number_{0},
        type_{static_cast< ::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour_ContourType >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR WorkPlane_WorkPlaneMetaData_closedContour::WorkPlane_WorkPlaneMetaData_closedContour(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct WorkPlane_WorkPlaneMetaData_closedContourDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkPlane_WorkPlaneMetaData_closedContourDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkPlane_WorkPlaneMetaData_closedContourDefaultTypeInternal() {}
  union {
    WorkPlane_WorkPlaneMetaData_closedContour _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkPlane_WorkPlaneMetaData_closedContourDefaultTypeInternal _WorkPlane_WorkPlaneMetaData_closedContour_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR VectorBlock_PolishingMetadata::VectorBlock_PolishingMetadata(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct VectorBlock_PolishingMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VectorBlock_PolishingMetadataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VectorBlock_PolishingMetadataDefaultTypeInternal() {}
  union {
    VectorBlock_PolishingMetadata _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VectorBlock_PolishingMetadataDefaultTypeInternal _VectorBlock_PolishingMetadata_default_instance_;

inline constexpr VectorBlock_PointSequence3D::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : points_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR VectorBlock_PointSequence3D::VectorBlock_PointSequence3D(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct VectorBlock_PointSequence3DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VectorBlock_PointSequence3DDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VectorBlock_PointSequence3DDefaultTypeInternal() {}
  union {
    VectorBlock_PointSequence3D _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VectorBlock_PointSequence3DDefaultTypeInternal _VectorBlock_PointSequence3D_default_instance_;

inline constexpr VectorBlock_PointSequence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : points_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR VectorBlock_PointSequence::VectorBlock_PointSequence(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct VectorBlock_PointSequenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VectorBlock_PointSequenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VectorBlock_PointSequenceDefaultTypeInternal() {}
  union {
    VectorBlock_PointSequence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VectorBlock_PointSequenceDefaultTypeInternal _VectorBlock_PointSequence_default_instance_;

inline constexpr VectorBlock_MicroStructuringMetadata::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : part_area_{static_cast< ::open_vector_format::VectorBlock_PartArea >(0)},
        structure_type_{static_cast< ::open_vector_format::VectorBlock_StructureType >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR VectorBlock_MicroStructuringMetadata::VectorBlock_MicroStructuringMetadata(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct VectorBlock_MicroStructuringMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VectorBlock_MicroStructuringMetadataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VectorBlock_MicroStructuringMetadataDefaultTypeInternal() {}
  union {
    VectorBlock_MicroStructuringMetadata _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VectorBlock_MicroStructuringMetadataDefaultTypeInternal _VectorBlock_MicroStructuringMetadata_default_instance_;

inline constexpr VectorBlock_LineSequenceParaAdapt::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : points_with_paras_{},
        parameter_{static_cast< ::open_vector_format::VectorBlock_LineSequenceParaAdapt_AdaptedParameter >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR VectorBlock_LineSequenceParaAdapt::VectorBlock_LineSequenceParaAdapt(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct VectorBlock_LineSequenceParaAdaptDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VectorBlock_LineSequenceParaAdaptDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VectorBlock_LineSequenceParaAdaptDefaultTypeInternal() {}
  union {
    VectorBlock_LineSequenceParaAdapt _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VectorBlock_LineSequenceParaAdaptDefaultTypeInternal _VectorBlock_LineSequenceParaAdapt_default_instance_;

inline constexpr VectorBlock_LineSequence3D::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : points_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR VectorBlock_LineSequence3D::VectorBlock_LineSequence3D(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct VectorBlock_LineSequence3DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VectorBlock_LineSequence3DDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VectorBlock_LineSequence3DDefaultTypeInternal() {}
  union {
    VectorBlock_LineSequence3D _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VectorBlock_LineSequence3DDefaultTypeInternal _VectorBlock_LineSequence3D_default_instance_;

inline constexpr VectorBlock_LineSequence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : points_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR VectorBlock_LineSequence::VectorBlock_LineSequence(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct VectorBlock_LineSequenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VectorBlock_LineSequenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VectorBlock_LineSequenceDefaultTypeInternal() {}
  union {
    VectorBlock_LineSequence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VectorBlock_LineSequenceDefaultTypeInternal _VectorBlock_LineSequence_default_instance_;

inline constexpr VectorBlock_LPBFMetadata::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : part_area_{static_cast< ::open_vector_format::VectorBlock_PartArea >(0)},
        skin_type_{static_cast< ::open_vector_format::VectorBlock_LPBFMetadata_SkinType >(0)},
        skin_core_strategy_area_{static_cast< ::open_vector_format::VectorBlock_LPBFMetadata_SkinCoreStrategyArea >(0)},
        structure_type_{static_cast< ::open_vector_format::VectorBlock_StructureType >(0)},
        reexposure_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR VectorBlock_LPBFMetadata::VectorBlock_LPBFMetadata(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct VectorBlock_LPBFMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VectorBlock_LPBFMetadataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VectorBlock_LPBFMetadataDefaultTypeInternal() {}
  union {
    VectorBlock_LPBFMetadata _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VectorBlock_LPBFMetadataDefaultTypeInternal _VectorBlock_LPBFMetadata_default_instance_;

inline constexpr VectorBlock_Hatches3D::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : points_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR VectorBlock_Hatches3D::VectorBlock_Hatches3D(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct VectorBlock_Hatches3DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VectorBlock_Hatches3DDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VectorBlock_Hatches3DDefaultTypeInternal() {}
  union {
    VectorBlock_Hatches3D _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VectorBlock_Hatches3DDefaultTypeInternal _VectorBlock_Hatches3D_default_instance_;

inline constexpr VectorBlock_Hatches::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : points_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR VectorBlock_Hatches::VectorBlock_Hatches(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct VectorBlock_HatchesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VectorBlock_HatchesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VectorBlock_HatchesDefaultTypeInternal() {}
  union {
    VectorBlock_Hatches _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VectorBlock_HatchesDefaultTypeInternal _VectorBlock_Hatches_default_instance_;

inline constexpr VectorBlock_ExposurePause::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : pause_in_us_{::uint64_t{0u}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR VectorBlock_ExposurePause::VectorBlock_ExposurePause(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct VectorBlock_ExposurePauseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VectorBlock_ExposurePauseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VectorBlock_ExposurePauseDefaultTypeInternal() {}
  union {
    VectorBlock_ExposurePause _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VectorBlock_ExposurePauseDefaultTypeInternal _VectorBlock_ExposurePause_default_instance_;

inline constexpr VectorBlock_Arcs3D::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : centers_{},
        angle_{0},
        start_dx_{0},
        start_dy_{0},
        start_dz_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR VectorBlock_Arcs3D::VectorBlock_Arcs3D(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct VectorBlock_Arcs3DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VectorBlock_Arcs3DDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VectorBlock_Arcs3DDefaultTypeInternal() {}
  union {
    VectorBlock_Arcs3D _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VectorBlock_Arcs3DDefaultTypeInternal _VectorBlock_Arcs3D_default_instance_;

inline constexpr VectorBlock_Arcs::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : centers_{},
        angle_{0},
        start_dx_{0},
        start_dy_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR VectorBlock_Arcs::VectorBlock_Arcs(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct VectorBlock_ArcsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VectorBlock_ArcsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VectorBlock_ArcsDefaultTypeInternal() {}
  union {
    VectorBlock_Arcs _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VectorBlock_ArcsDefaultTypeInternal _VectorBlock_Arcs_default_instance_;

inline constexpr PowerGradientParams::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : minpowerinw_{0},
        gradientinwpers_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PowerGradientParams::PowerGradientParams(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PowerGradientParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PowerGradientParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PowerGradientParamsDefaultTypeInternal() {}
  union {
    PowerGradientParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PowerGradientParamsDefaultTypeInternal _PowerGradientParams_default_instance_;

inline constexpr Part_ProcessStrategy_ProprietaryParam::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : param_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        param_description_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        param_value_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Part_ProcessStrategy_ProprietaryParam::Part_ProcessStrategy_ProprietaryParam(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Part_ProcessStrategy_ProprietaryParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Part_ProcessStrategy_ProprietaryParamDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Part_ProcessStrategy_ProprietaryParamDefaultTypeInternal() {}
  union {
    Part_ProcessStrategy_ProprietaryParam _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Part_ProcessStrategy_ProprietaryParamDefaultTypeInternal _Part_ProcessStrategy_ProprietaryParam_default_instance_;

inline constexpr Part_Material::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        id_{::uint64_t{0u}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Part_Material::Part_Material(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Part_MaterialDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Part_MaterialDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Part_MaterialDefaultTypeInternal() {}
  union {
    Part_Material _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Part_MaterialDefaultTypeInternal _Part_Material_default_instance_;

inline constexpr Part_GeometryInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : volume_in_mm3_{0},
        support_volume_in_mm3_{0},
        build_height_in_mm_{0},
        surface_area_in_mm2_{0},
        projected_surface_in_mm2_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Part_GeometryInfo::Part_GeometryInfo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Part_GeometryInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Part_GeometryInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Part_GeometryInfoDefaultTypeInternal() {}
  union {
    Part_GeometryInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Part_GeometryInfoDefaultTypeInternal _Part_GeometryInfo_default_instance_;

inline constexpr JobParameters::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : shielding_gas_directions_{},
        material_feed_directions_{},
        preheating_temperatur_in_dg_c_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR JobParameters::JobParameters(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct JobParametersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JobParametersDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~JobParametersDefaultTypeInternal() {}
  union {
    JobParameters _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JobParametersDefaultTypeInternal _JobParameters_default_instance_;

inline constexpr AxisAlignedBox2D::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : x_min_{0},
        y_min_{0},
        x_max_{0},
        y_max_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AxisAlignedBox2D::AxisAlignedBox2D(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AxisAlignedBox2DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AxisAlignedBox2DDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AxisAlignedBox2DDefaultTypeInternal() {}
  union {
    AxisAlignedBox2D _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AxisAlignedBox2DDefaultTypeInternal _AxisAlignedBox2D_default_instance_;

inline constexpr WorkPlane_Patch::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        outer_contour_{nullptr},
        u_{0},
        v_{0},
        layer_id_{0} {}

template <typename>
PROTOBUF_CONSTEXPR WorkPlane_Patch::WorkPlane_Patch(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct WorkPlane_PatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkPlane_PatchDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkPlane_PatchDefaultTypeInternal() {}
  union {
    WorkPlane_Patch _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkPlane_PatchDefaultTypeInternal _WorkPlane_Patch_default_instance_;

inline constexpr VectorBlock_VectorBlockMetaData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        bounds_{nullptr},
        total_scan_distance_in_mm_{0},
        total_jump_distance_in_mm_{0},
        part_key_{0},
        patch_key_{0},
        contour_index_{0},
        display_color_{0} {}

template <typename>
PROTOBUF_CONSTEXPR VectorBlock_VectorBlockMetaData::VectorBlock_VectorBlockMetaData(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct VectorBlock_VectorBlockMetaDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VectorBlock_VectorBlockMetaDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VectorBlock_VectorBlockMetaDataDefaultTypeInternal() {}
  union {
    VectorBlock_VectorBlockMetaData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VectorBlock_VectorBlockMetaDataDefaultTypeInternal _VectorBlock_VectorBlockMetaData_default_instance_;

inline constexpr VectorBlock_HatchesParaAdapt::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : hatchaslinesequence_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR VectorBlock_HatchesParaAdapt::VectorBlock_HatchesParaAdapt(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct VectorBlock_HatchesParaAdaptDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VectorBlock_HatchesParaAdaptDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VectorBlock_HatchesParaAdaptDefaultTypeInternal() {}
  union {
    VectorBlock_HatchesParaAdapt _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VectorBlock_HatchesParaAdaptDefaultTypeInternal _VectorBlock_HatchesParaAdapt_default_instance_;

inline constexpr VectorBlock_Ellipses::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        ellipses_arcs_{nullptr},
        a_{0},
        b_{0},
        phi0_{0} {}

template <typename>
PROTOBUF_CONSTEXPR VectorBlock_Ellipses::VectorBlock_Ellipses(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct VectorBlock_EllipsesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VectorBlock_EllipsesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VectorBlock_EllipsesDefaultTypeInternal() {}
  union {
    VectorBlock_Ellipses _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VectorBlock_EllipsesDefaultTypeInternal _VectorBlock_Ellipses_default_instance_;

inline constexpr Part_ProcessStrategy::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : additional_parameters_{},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        rot_angle_in_deg_{0},
        increment_angle_in_deg_{0},
        shift_in_mm_{0},
        extend_into_in_mm_{0},
        layer_thickness_in_mm_{0},
        hatch_distance_in_mm_{0},
        hatch_contour_distance_in_mm_{0},
        overhang_angle_in_deg_{0},
        contour_offset_in_mm_{0},
        number_of_contours_{0},
        contour_distance_in_mm_{0},
        hatching_pattern_{static_cast< ::open_vector_format::Part_ProcessStrategy_HatchingPattern >(0)},
        pattern_hatch_length_in_mm_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Part_ProcessStrategy::Part_ProcessStrategy(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Part_ProcessStrategyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Part_ProcessStrategyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Part_ProcessStrategyDefaultTypeInternal() {}
  union {
    Part_ProcessStrategy _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Part_ProcessStrategyDefaultTypeInternal _Part_ProcessStrategy_default_instance_;

inline constexpr MarkingParams::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        powergradient_{nullptr},
        laser_power_in_w_{0},
        laser_speed_in_mm_per_s_{0},
        laser_focus_shift_in_mm_{0},
        point_exposure_time_in_us_{0},
        jump_speed_in_mm_s_{0},
        point_exposure_repetitions_{0},
        repetition_rate_in_hz_{::uint64_t{0u}},
        laser_pulses_per_burst_{::uint64_t{0u}},
        pulsedurationinfemtoseconds_{::uint64_t{0u}},
        marking_mode_{static_cast< ::open_vector_format::MarkingParams_MarkingMode >(0)},
        jump_delay_in_us_{0},
        laser_off_delay_in_us_{0},
        laser_on_delay_in_us_{0},
        mark_delay_in_us_{0},
        polygon_delay_in_us_{0},
        time_lag_in_us_{0},
        laser_on_shift_in_us_{0},
        limit_{0},
        n_prev_in_us_{0},
        n_post_in_us_{0},
        wob_frequency_in_hz_{0},
        wob_amp_long_in_mm_{0},
        wob_amp_trans_in_mm_{0},
        wobble_mode_{static_cast< ::open_vector_format::MarkingParams_WobbleMode >(0)},
        beam_shape_profile_nr_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MarkingParams::MarkingParams(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MarkingParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarkingParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarkingParamsDefaultTypeInternal() {}
  union {
    MarkingParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarkingParamsDefaultTypeInternal _MarkingParams_default_instance_;

inline constexpr Job_JobMetaData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        job_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        author_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        description_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        bounds_{nullptr},
        job_creation_time_{::int64_t{0}},
        version_{::uint64_t{0u}} {}

template <typename>
PROTOBUF_CONSTEXPR Job_JobMetaData::Job_JobMetaData(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Job_JobMetaDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Job_JobMetaDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Job_JobMetaDataDefaultTypeInternal() {}
  union {
    Job_JobMetaData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Job_JobMetaDataDefaultTypeInternal _Job_JobMetaData_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse::WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUseDefaultTypeInternal _WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse_default_instance_;

inline constexpr VectorBlock::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        meta_data_{nullptr},
        marking_params_key_{0},
        laser_index_{0},
        repeats_{::uint64_t{0u}},
        vector_data_{},
        process_meta_data_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR VectorBlock::VectorBlock(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct VectorBlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VectorBlockDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VectorBlockDefaultTypeInternal() {}
  union {
    VectorBlock _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VectorBlockDefaultTypeInternal _VectorBlock_default_instance_;

inline constexpr Part::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        exposure_order_{},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        parent_part_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        geometry_info_{nullptr},
        material_{nullptr},
        process_strategy_{nullptr},
        up_skin_process_strategy_{nullptr},
        down_skin_process_strategy_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Part::Part(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PartDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PartDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PartDefaultTypeInternal() {}
  union {
    Part _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PartDefaultTypeInternal _Part_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR Job_MarkingParamsMapEntry_DoNotUse::Job_MarkingParamsMapEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : Job_MarkingParamsMapEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : Job_MarkingParamsMapEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct Job_MarkingParamsMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Job_MarkingParamsMapEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Job_MarkingParamsMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Job_MarkingParamsMapEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Job_MarkingParamsMapEntry_DoNotUseDefaultTypeInternal _Job_MarkingParamsMapEntry_DoNotUse_default_instance_;

inline constexpr WorkPlane_WorkPlaneMetaData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        patches_map_{},
        contours_{},
        bounds_{nullptr},
        total_scan_distance_in_mm_{0},
        total_jump_distance_in_mm_{0},
        maxpower_{0},
        minpower_{0} {}

template <typename>
PROTOBUF_CONSTEXPR WorkPlane_WorkPlaneMetaData::WorkPlane_WorkPlaneMetaData(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct WorkPlane_WorkPlaneMetaDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkPlane_WorkPlaneMetaDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkPlane_WorkPlaneMetaDataDefaultTypeInternal() {}
  union {
    WorkPlane_WorkPlaneMetaData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkPlane_WorkPlaneMetaDataDefaultTypeInternal _WorkPlane_WorkPlaneMetaData_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR Job_PartsMapEntry_DoNotUse::Job_PartsMapEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : Job_PartsMapEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : Job_PartsMapEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct Job_PartsMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Job_PartsMapEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Job_PartsMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Job_PartsMapEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Job_PartsMapEntry_DoNotUseDefaultTypeInternal _Job_PartsMapEntry_DoNotUse_default_instance_;

inline constexpr WorkPlane::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        vector_blocks_{},
        additional_axis_positions_{},
        machine_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        meta_data_{nullptr},
        x_pos_in_mm_{0},
        y_pos_in_mm_{0},
        z_pos_in_mm_{0},
        x_rot_in_deg_{0},
        y_rot_in_deg_{0},
        z_rot_in_deg_{0},
        num_blocks_{0},
        repeats_{0u},
        work_plane_number_{0} {}

template <typename>
PROTOBUF_CONSTEXPR WorkPlane::WorkPlane(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct WorkPlaneDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkPlaneDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkPlaneDefaultTypeInternal() {}
  union {
    WorkPlane _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkPlaneDefaultTypeInternal _WorkPlane_default_instance_;

inline constexpr Job::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        work_planes_{},
        marking_params_map_{},
        parts_map_{},
        job_meta_data_{nullptr},
        job_parameters_{nullptr},
        num_work_planes_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Job::Job(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct JobDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JobDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~JobDefaultTypeInternal() {}
  union {
    Job _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JobDefaultTypeInternal _Job_default_instance_;
}  // namespace open_vector_format
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_open_5fvector_5fformat_2eproto[9];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_open_5fvector_5fformat_2eproto = nullptr;
const ::uint32_t
    TableStruct_open_5fvector_5fformat_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Job_MarkingParamsMapEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Job_MarkingParamsMapEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Job_MarkingParamsMapEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Job_MarkingParamsMapEntry_DoNotUse, _impl_.value_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Job_PartsMapEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Job_PartsMapEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Job_PartsMapEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Job_PartsMapEntry_DoNotUse, _impl_.value_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Job_JobMetaData, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Job_JobMetaData, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Job_JobMetaData, _impl_.job_creation_time_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Job_JobMetaData, _impl_.version_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Job_JobMetaData, _impl_.job_name_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Job_JobMetaData, _impl_.author_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Job_JobMetaData, _impl_.description_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Job_JobMetaData, _impl_.bounds_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Job, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Job, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Job, _impl_.work_planes_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Job, _impl_.job_meta_data_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Job, _impl_.marking_params_map_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Job, _impl_.parts_map_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Job, _impl_.job_parameters_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Job, _impl_.num_work_planes_),
        ~0u,
        0,
        ~0u,
        ~0u,
        1,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::open_vector_format::JobParameters, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::open_vector_format::JobParameters, _impl_.preheating_temperatur_in_dg_c_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::JobParameters, _impl_.shielding_gas_directions_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::JobParameters, _impl_.material_feed_directions_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, _impl_.laser_power_in_w_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, _impl_.laser_speed_in_mm_per_s_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, _impl_.laser_focus_shift_in_mm_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, _impl_.point_exposure_time_in_us_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, _impl_.jump_speed_in_mm_s_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, _impl_.point_exposure_repetitions_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, _impl_.repetition_rate_in_hz_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, _impl_.laser_pulses_per_burst_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, _impl_.pulsedurationinfemtoseconds_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, _impl_.marking_mode_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, _impl_.jump_delay_in_us_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, _impl_.laser_off_delay_in_us_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, _impl_.laser_on_delay_in_us_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, _impl_.mark_delay_in_us_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, _impl_.polygon_delay_in_us_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, _impl_.time_lag_in_us_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, _impl_.laser_on_shift_in_us_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, _impl_.limit_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, _impl_.n_prev_in_us_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, _impl_.n_post_in_us_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, _impl_.wob_frequency_in_hz_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, _impl_.wob_amp_long_in_mm_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, _impl_.wob_amp_trans_in_mm_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, _impl_.wobble_mode_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, _impl_.powergradient_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, _impl_.beam_shape_profile_nr_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::open_vector_format::PowerGradientParams, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::open_vector_format::PowerGradientParams, _impl_.minpowerinw_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::PowerGradientParams, _impl_.gradientinwpers_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_GeometryInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_GeometryInfo, _impl_.volume_in_mm3_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_GeometryInfo, _impl_.support_volume_in_mm3_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_GeometryInfo, _impl_.build_height_in_mm_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_GeometryInfo, _impl_.surface_area_in_mm2_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_GeometryInfo, _impl_.projected_surface_in_mm2_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_Material, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_Material, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_Material, _impl_.name_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_ProcessStrategy_ProprietaryParam, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_ProcessStrategy_ProprietaryParam, _impl_.param_name_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_ProcessStrategy_ProprietaryParam, _impl_.param_value_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_ProcessStrategy_ProprietaryParam, _impl_.param_description_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_ProcessStrategy, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_ProcessStrategy, _impl_.rot_angle_in_deg_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_ProcessStrategy, _impl_.increment_angle_in_deg_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_ProcessStrategy, _impl_.shift_in_mm_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_ProcessStrategy, _impl_.extend_into_in_mm_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_ProcessStrategy, _impl_.pattern_hatch_length_in_mm_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_ProcessStrategy, _impl_.hatching_pattern_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_ProcessStrategy, _impl_.layer_thickness_in_mm_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_ProcessStrategy, _impl_.hatch_distance_in_mm_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_ProcessStrategy, _impl_.hatch_contour_distance_in_mm_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_ProcessStrategy, _impl_.overhang_angle_in_deg_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_ProcessStrategy, _impl_.contour_offset_in_mm_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_ProcessStrategy, _impl_.number_of_contours_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_ProcessStrategy, _impl_.contour_distance_in_mm_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_ProcessStrategy, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_ProcessStrategy, _impl_.additional_parameters_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Part, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Part, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Part, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Part, _impl_.geometry_info_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Part, _impl_.material_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Part, _impl_.process_strategy_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Part, _impl_.up_skin_process_strategy_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Part, _impl_.down_skin_process_strategy_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Part, _impl_.exposure_order_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::Part, _impl_.parent_part_name_),
        ~0u,
        0,
        1,
        2,
        3,
        4,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse, _impl_.value_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour, _impl_.contour_section_vector_block_indices_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour, _impl_.area_in_mm_2_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour, _impl_.length_in_mm_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour, _impl_.parent_index_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour, _impl_.winding_number_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane_WorkPlaneMetaData, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane_WorkPlaneMetaData, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane_WorkPlaneMetaData, _impl_.total_scan_distance_in_mm_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane_WorkPlaneMetaData, _impl_.total_jump_distance_in_mm_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane_WorkPlaneMetaData, _impl_.patches_map_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane_WorkPlaneMetaData, _impl_.maxpower_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane_WorkPlaneMetaData, _impl_.minpower_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane_WorkPlaneMetaData, _impl_.contours_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane_WorkPlaneMetaData, _impl_.bounds_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane_Patch, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane_Patch, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane_Patch, _impl_.outer_contour_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane_Patch, _impl_.u_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane_Patch, _impl_.v_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane_Patch, _impl_.layer_id_),
        0,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane, _impl_.vector_blocks_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane, _impl_.x_pos_in_mm_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane, _impl_.y_pos_in_mm_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane, _impl_.z_pos_in_mm_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane, _impl_.x_rot_in_deg_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane, _impl_.y_rot_in_deg_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane, _impl_.z_rot_in_deg_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane, _impl_.num_blocks_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane, _impl_.repeats_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane, _impl_.work_plane_number_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane, _impl_.machine_type_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane, _impl_.additional_axis_positions_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane, _impl_.meta_data_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_VectorBlockMetaData, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_VectorBlockMetaData, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_VectorBlockMetaData, _impl_.total_scan_distance_in_mm_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_VectorBlockMetaData, _impl_.total_jump_distance_in_mm_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_VectorBlockMetaData, _impl_.part_key_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_VectorBlockMetaData, _impl_.patch_key_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_VectorBlockMetaData, _impl_.contour_index_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_VectorBlockMetaData, _impl_.bounds_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_VectorBlockMetaData, _impl_.display_color_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_LPBFMetadata, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_LPBFMetadata, _impl_.part_area_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_LPBFMetadata, _impl_.skin_type_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_LPBFMetadata, _impl_.skin_core_strategy_area_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_LPBFMetadata, _impl_.structure_type_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_LPBFMetadata, _impl_.reexposure_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_MicroStructuringMetadata, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_MicroStructuringMetadata, _impl_.part_area_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_MicroStructuringMetadata, _impl_.structure_type_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_PolishingMetadata, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_LineSequence, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_LineSequence, _impl_.points_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_LineSequence3D, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_LineSequence3D, _impl_.points_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_Hatches, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_Hatches, _impl_.points_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_Hatches3D, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_Hatches3D, _impl_.points_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_PointSequence, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_PointSequence, _impl_.points_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_PointSequence3D, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_PointSequence3D, _impl_.points_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_Arcs, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_Arcs, _impl_.angle_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_Arcs, _impl_.start_dx_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_Arcs, _impl_.start_dy_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_Arcs, _impl_.centers_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_Arcs3D, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_Arcs3D, _impl_.angle_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_Arcs3D, _impl_.start_dx_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_Arcs3D, _impl_.start_dy_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_Arcs3D, _impl_.start_dz_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_Arcs3D, _impl_.centers_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_Ellipses, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_Ellipses, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_Ellipses, _impl_.a_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_Ellipses, _impl_.b_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_Ellipses, _impl_.phi0_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_Ellipses, _impl_.ellipses_arcs_),
        ~0u,
        ~0u,
        ~0u,
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_ExposurePause, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_ExposurePause, _impl_.pause_in_us_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_LineSequenceParaAdapt, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_LineSequenceParaAdapt, _impl_.points_with_paras_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_LineSequenceParaAdapt, _impl_.parameter_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_HatchesParaAdapt, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_HatchesParaAdapt, _impl_.hatchaslinesequence_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock, _impl_.marking_params_key_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock, _impl_.laser_index_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock, _impl_.repeats_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock, _impl_.meta_data_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock, _impl_.vector_data_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock, _impl_.process_meta_data_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::open_vector_format::AxisAlignedBox2D, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::open_vector_format::AxisAlignedBox2D, _impl_.x_min_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::AxisAlignedBox2D, _impl_.y_min_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::AxisAlignedBox2D, _impl_.x_max_),
        PROTOBUF_FIELD_OFFSET(::open_vector_format::AxisAlignedBox2D, _impl_.y_max_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 10, -1, sizeof(::open_vector_format::Job_MarkingParamsMapEntry_DoNotUse)},
        {12, 22, -1, sizeof(::open_vector_format::Job_PartsMapEntry_DoNotUse)},
        {24, 38, -1, sizeof(::open_vector_format::Job_JobMetaData)},
        {44, 58, -1, sizeof(::open_vector_format::Job)},
        {64, -1, -1, sizeof(::open_vector_format::JobParameters)},
        {75, 110, -1, sizeof(::open_vector_format::MarkingParams)},
        {137, -1, -1, sizeof(::open_vector_format::PowerGradientParams)},
        {147, -1, -1, sizeof(::open_vector_format::Part_GeometryInfo)},
        {160, -1, -1, sizeof(::open_vector_format::Part_Material)},
        {170, -1, -1, sizeof(::open_vector_format::Part_ProcessStrategy_ProprietaryParam)},
        {181, -1, -1, sizeof(::open_vector_format::Part_ProcessStrategy)},
        {204, 220, -1, sizeof(::open_vector_format::Part)},
        {228, 238, -1, sizeof(::open_vector_format::WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse)},
        {240, -1, -1, sizeof(::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour)},
        {254, 269, -1, sizeof(::open_vector_format::WorkPlane_WorkPlaneMetaData)},
        {276, 288, -1, sizeof(::open_vector_format::WorkPlane_Patch)},
        {292, 313, -1, sizeof(::open_vector_format::WorkPlane)},
        {326, 341, -1, sizeof(::open_vector_format::VectorBlock_VectorBlockMetaData)},
        {348, -1, -1, sizeof(::open_vector_format::VectorBlock_LPBFMetadata)},
        {361, -1, -1, sizeof(::open_vector_format::VectorBlock_MicroStructuringMetadata)},
        {371, -1, -1, sizeof(::open_vector_format::VectorBlock_PolishingMetadata)},
        {379, -1, -1, sizeof(::open_vector_format::VectorBlock_LineSequence)},
        {388, -1, -1, sizeof(::open_vector_format::VectorBlock_LineSequence3D)},
        {397, -1, -1, sizeof(::open_vector_format::VectorBlock_Hatches)},
        {406, -1, -1, sizeof(::open_vector_format::VectorBlock_Hatches3D)},
        {415, -1, -1, sizeof(::open_vector_format::VectorBlock_PointSequence)},
        {424, -1, -1, sizeof(::open_vector_format::VectorBlock_PointSequence3D)},
        {433, -1, -1, sizeof(::open_vector_format::VectorBlock_Arcs)},
        {445, -1, -1, sizeof(::open_vector_format::VectorBlock_Arcs3D)},
        {458, 470, -1, sizeof(::open_vector_format::VectorBlock_Ellipses)},
        {474, -1, -1, sizeof(::open_vector_format::VectorBlock_ExposurePause)},
        {483, -1, -1, sizeof(::open_vector_format::VectorBlock_LineSequenceParaAdapt)},
        {493, -1, -1, sizeof(::open_vector_format::VectorBlock_HatchesParaAdapt)},
        {502, 531, -1, sizeof(::open_vector_format::VectorBlock)},
        {550, -1, -1, sizeof(::open_vector_format::AxisAlignedBox2D)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::open_vector_format::_Job_MarkingParamsMapEntry_DoNotUse_default_instance_._instance,
    &::open_vector_format::_Job_PartsMapEntry_DoNotUse_default_instance_._instance,
    &::open_vector_format::_Job_JobMetaData_default_instance_._instance,
    &::open_vector_format::_Job_default_instance_._instance,
    &::open_vector_format::_JobParameters_default_instance_._instance,
    &::open_vector_format::_MarkingParams_default_instance_._instance,
    &::open_vector_format::_PowerGradientParams_default_instance_._instance,
    &::open_vector_format::_Part_GeometryInfo_default_instance_._instance,
    &::open_vector_format::_Part_Material_default_instance_._instance,
    &::open_vector_format::_Part_ProcessStrategy_ProprietaryParam_default_instance_._instance,
    &::open_vector_format::_Part_ProcessStrategy_default_instance_._instance,
    &::open_vector_format::_Part_default_instance_._instance,
    &::open_vector_format::_WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse_default_instance_._instance,
    &::open_vector_format::_WorkPlane_WorkPlaneMetaData_closedContour_default_instance_._instance,
    &::open_vector_format::_WorkPlane_WorkPlaneMetaData_default_instance_._instance,
    &::open_vector_format::_WorkPlane_Patch_default_instance_._instance,
    &::open_vector_format::_WorkPlane_default_instance_._instance,
    &::open_vector_format::_VectorBlock_VectorBlockMetaData_default_instance_._instance,
    &::open_vector_format::_VectorBlock_LPBFMetadata_default_instance_._instance,
    &::open_vector_format::_VectorBlock_MicroStructuringMetadata_default_instance_._instance,
    &::open_vector_format::_VectorBlock_PolishingMetadata_default_instance_._instance,
    &::open_vector_format::_VectorBlock_LineSequence_default_instance_._instance,
    &::open_vector_format::_VectorBlock_LineSequence3D_default_instance_._instance,
    &::open_vector_format::_VectorBlock_Hatches_default_instance_._instance,
    &::open_vector_format::_VectorBlock_Hatches3D_default_instance_._instance,
    &::open_vector_format::_VectorBlock_PointSequence_default_instance_._instance,
    &::open_vector_format::_VectorBlock_PointSequence3D_default_instance_._instance,
    &::open_vector_format::_VectorBlock_Arcs_default_instance_._instance,
    &::open_vector_format::_VectorBlock_Arcs3D_default_instance_._instance,
    &::open_vector_format::_VectorBlock_Ellipses_default_instance_._instance,
    &::open_vector_format::_VectorBlock_ExposurePause_default_instance_._instance,
    &::open_vector_format::_VectorBlock_LineSequenceParaAdapt_default_instance_._instance,
    &::open_vector_format::_VectorBlock_HatchesParaAdapt_default_instance_._instance,
    &::open_vector_format::_VectorBlock_default_instance_._instance,
    &::open_vector_format::_AxisAlignedBox2D_default_instance_._instance,
};
const char descriptor_table_protodef_open_5fvector_5fformat_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\030open_vector_format.proto\022\022open_vector_"
    "format\"\236\005\n\003Job\0222\n\013work_planes\030\001 \003(\0132\035.op"
    "en_vector_format.WorkPlane\022:\n\rjob_meta_d"
    "ata\030\002 \001(\0132#.open_vector_format.Job.JobMe"
    "taData\022I\n\022marking_params_map\030\003 \003(\0132-.ope"
    "n_vector_format.Job.MarkingParamsMapEntr"
    "y\0228\n\tparts_map\030\004 \003(\0132%.open_vector_forma"
    "t.Job.PartsMapEntry\0229\n\016job_parameters\030\005 "
    "\001(\0132!.open_vector_format.JobParameters\022\027"
    "\n\017num_work_planes\030\006 \001(\005\032Z\n\025MarkingParams"
    "MapEntry\022\013\n\003key\030\001 \001(\005\0220\n\005value\030\002 \001(\0132!.o"
    "pen_vector_format.MarkingParams:\0028\001\032I\n\rP"
    "artsMapEntry\022\013\n\003key\030\001 \001(\005\022\'\n\005value\030\002 \001(\013"
    "2\030.open_vector_format.Part:\0028\001\032\246\001\n\013JobMe"
    "taData\022\031\n\021job_creation_time\030\001 \001(\003\022\017\n\007ver"
    "sion\030\002 \001(\004\022\020\n\010job_name\030\003 \001(\t\022\016\n\006author\030\004"
    " \001(\t\022\023\n\013description\030\005 \001(\t\0224\n\006bounds\030\006 \001("
    "\0132$.open_vector_format.AxisAlignedBox2D\""
    "z\n\rJobParameters\022%\n\035preheating_temperatu"
    "r_in_dg_c\030\001 \001(\001\022 \n\030shielding_gas_directi"
    "ons\030\002 \003(\001\022 \n\030material_feed_directions\030\003 "
    "\003(\001\"\244\010\n\rMarkingParams\022\030\n\020laser_power_in_"
    "w\030\001 \001(\002\022\037\n\027laser_speed_in_mm_per_s\030\002 \001(\002"
    "\022\037\n\027laser_focus_shift_in_mm\030\003 \001(\002\022!\n\031poi"
    "nt_exposure_time_in_us\030\004 \001(\002\022\032\n\022jump_spe"
    "ed_in_mm_s\030\005 \001(\002\022\"\n\032point_exposure_repet"
    "itions\030\006 \001(\002\022\035\n\025repetition_rate_in_hz\030\007 "
    "\001(\004\022\036\n\026laser_pulses_per_burst\030\010 \001(\004\022#\n\033p"
    "ulseDurationInFemtoseconds\030\t \001(\004\022C\n\014mark"
    "ing_mode\030\n \001(\0162-.open_vector_format.Mark"
    "ingParams.MarkingMode\022\030\n\020jump_delay_in_u"
    "s\030\013 \001(\002\022\035\n\025laser_off_delay_in_us\030\014 \001(\002\022\034"
    "\n\024laser_on_delay_in_us\030\r \001(\002\022\030\n\020mark_del"
    "ay_in_us\030\016 \001(\002\022\033\n\023polygon_delay_in_us\030\017 "
    "\001(\002\022\026\n\016time_lag_in_us\030\020 \001(\002\022\034\n\024laser_on_"
    "shift_in_us\030\021 \001(\002\022\r\n\005limit\030\022 \001(\002\022\024\n\014n_pr"
    "ev_in_us\030\023 \001(\002\022\024\n\014n_post_in_us\030\024 \001(\002\022\033\n\023"
    "wob_frequency_in_hz\030\025 \001(\002\022\032\n\022wob_amp_lon"
    "g_in_mm\030\026 \001(\002\022\033\n\023wob_amp_trans_in_mm\030\027 \001"
    "(\002\022A\n\013wobble_mode\030\030 \001(\0162,.open_vector_fo"
    "rmat.MarkingParams.WobbleMode\022>\n\rpowerGr"
    "adient\030\031 \001(\0132\'.open_vector_format.PowerG"
    "radientParams\022\014\n\004name\030\032 \001(\t\022\035\n\025beam_shap"
    "e_profile_nr\030\033 \001(\005\":\n\013MarkingMode\022\n\n\006NO_"
    "SKY\020\000\022\t\n\005SKY_1\020\001\022\t\n\005SKY_2\020\002\022\t\n\005SKY_3\020\003\"b"
    "\n\nWobbleMode\022\r\n\tNO_WOBBLE\020\000\022\022\n\016ELLIPSE_W"
    "OBBLE\020\001\022\031\n\025STANDING_EIGHT_WOBBLE\020\002\022\026\n\022LY"
    "ING_EIGHT_WOBBLE\020\003J\006\010\200\001\020\245\001\"C\n\023PowerGradi"
    "entParams\022\023\n\013minPowerInW\030\001 \001(\002\022\027\n\017gradie"
    "ntInWPerS\030\002 \001(\002\"\205\013\n\004Part\022\014\n\004name\030\001 \001(\t\022<"
    "\n\rgeometry_info\030\002 \001(\0132%.open_vector_form"
    "at.Part.GeometryInfo\0223\n\010material\030\003 \001(\0132!"
    ".open_vector_format.Part.Material\022B\n\020pro"
    "cess_strategy\030\004 \001(\0132(.open_vector_format"
    ".Part.ProcessStrategy\022J\n\030up_skin_process"
    "_strategy\030\005 \001(\0132(.open_vector_format.Par"
    "t.ProcessStrategy\022L\n\032down_skin_process_s"
    "trategy\030\006 \001(\0132(.open_vector_format.Part."
    "ProcessStrategy\022D\n\016exposure_order\030\007 \003(\0132"
    ",.open_vector_format.VectorBlock.LPBFMet"
    "adata\022\030\n\020parent_part_name\030\010 \001(\t\032\237\001\n\014Geom"
    "etryInfo\022\025\n\rvolume_in_mm3\030\001 \001(\001\022\035\n\025suppo"
    "rt_volume_in_mm3\030\002 \001(\001\022\032\n\022build_height_i"
    "n_mm\030\003 \001(\001\022\033\n\023surface_area_in_mm2\030\004 \001(\001\022"
    " \n\030projected_surface_in_mm2\030\005 \001(\001\032$\n\010Mat"
    "erial\022\n\n\002id\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\032\365\005\n\017Proc"
    "essStrategy\022\030\n\020rot_angle_in_deg\030\001 \001(\002\022\036\n"
    "\026increment_angle_in_deg\030\002 \001(\002\022\023\n\013shift_i"
    "n_mm\030\003 \001(\002\022\031\n\021extend_into_in_mm\030\004 \001(\002\022\"\n"
    "\032pattern_hatch_length_in_mm\030\r \001(\002\022R\n\020hat"
    "ching_pattern\030\014 \001(\01628.open_vector_format"
    ".Part.ProcessStrategy.HatchingPattern\022\035\n"
    "\025layer_thickness_in_mm\030\005 \001(\002\022\034\n\024hatch_di"
    "stance_in_mm\030\006 \001(\002\022$\n\034hatch_contour_dist"
    "ance_in_mm\030\007 \001(\002\022\035\n\025overhang_angle_in_de"
    "g\030\010 \001(\002\022\034\n\024contour_offset_in_mm\030\t \001(\002\022\032\n"
    "\022number_of_contours\030\n \001(\005\022\036\n\026contour_dis"
    "tance_in_mm\030\013 \001(\002\022\014\n\004name\030Z \001(\t\022X\n\025addit"
    "ional_parameters\030d \003(\01329.open_vector_for"
    "mat.Part.ProcessStrategy.ProprietaryPara"
    "m\032V\n\020ProprietaryParam\022\022\n\nparam_name\030\001 \001("
    "\t\022\023\n\013param_value\030\002 \001(\001\022\031\n\021param_descript"
    "ion\030\003 \001(\t\"d\n\017HatchingPattern\022\022\n\016UNIDIREC"
    "TIONAL\020\000\022\021\n\rBIDIRECTIONAL\020\001\022\020\n\014CHECKERBO"
    "ARD\020\002\022\013\n\007STRIPES\020\003\022\013\n\007HEXAGON\020\004\"\362\t\n\tWork"
    "Plane\0226\n\rvector_blocks\030\001 \003(\0132\037.open_vect"
    "or_format.VectorBlock\022\023\n\013x_pos_in_mm\030\002 \001"
    "(\002\022\023\n\013y_pos_in_mm\030\003 \001(\002\022\023\n\013z_pos_in_mm\030\004"
    " \001(\002\022\024\n\014x_rot_in_deg\030\005 \001(\002\022\024\n\014y_rot_in_d"
    "eg\030\006 \001(\002\022\024\n\014z_rot_in_deg\030\007 \001(\002\022\022\n\nnum_bl"
    "ocks\030\010 \001(\005\022\017\n\007repeats\030\t \001(\r\022\031\n\021work_plan"
    "e_number\030\n \001(\005\022\024\n\014machine_type\030\013 \001(\t\022!\n\031"
    "additional_axis_positions\030\014 \003(\002\022B\n\tmeta_"
    "data\030\r \001(\0132/.open_vector_format.WorkPlan"
    "e.WorkPlaneMetaData\032\370\005\n\021WorkPlaneMetaDat"
    "a\022!\n\031total_scan_distance_in_mm\030\001 \001(\001\022!\n\031"
    "total_jump_distance_in_mm\030\002 \001(\001\022T\n\013patch"
    "es_map\030\003 \003(\0132\?.open_vector_format.WorkPl"
    "ane.WorkPlaneMetaData.PatchesMapEntry\022\020\n"
    "\010maxPower\030\004 \001(\002\022\020\n\010minPower\030\005 \001(\002\022O\n\010con"
    "tours\030\006 \003(\0132=.open_vector_format.WorkPla"
    "ne.WorkPlaneMetaData.closedContour\0224\n\006Bo"
    "unds\030\007 \001(\0132$.open_vector_format.AxisAlig"
    "nedBox2D\032V\n\017PatchesMapEntry\022\013\n\003key\030\001 \001(\005"
    "\0222\n\005value\030\002 \001(\0132#.open_vector_format.Wor"
    "kPlane.Patch:\0028\001\032\303\002\n\rclosedContour\022,\n$co"
    "ntour_section_vector_block_indices\030\001 \003(\005"
    "\022\024\n\014area_in_mm_2\030\002 \001(\002\022\024\n\014length_in_mm\030\003"
    " \001(\002\022\024\n\014parent_index\030\005 \001(\005\022\026\n\016winding_nu"
    "mber\030\006 \001(\005\022W\n\004type\030\007 \001(\0162I.open_vector_f"
    "ormat.WorkPlane.WorkPlaneMetaData.closed"
    "Contour.ContourType\"Q\n\013ContourType\022\026\n\022PA"
    "RT_OUTER_CONTOUR\020\000\022\026\n\022PART_INNER_CONTOUR"
    "\020\001\022\022\n\016OFFSET_CONTOUR\020\002\032t\n\005Patch\022C\n\router"
    "_contour\030\001 \001(\0132,.open_vector_format.Vect"
    "orBlock.LineSequence\022\t\n\001u\030\002 \001(\002\022\t\n\001v\030\003 \001"
    "(\002\022\020\n\010layer_id\030\004 \001(\005\"\357\030\n\013VectorBlock\022E\n\r"
    "line_sequence\030\001 \001(\0132,.open_vector_format"
    ".VectorBlock.LineSequenceH\000\022;\n\010_hatches\030"
    "\002 \001(\0132\'.open_vector_format.VectorBlock.H"
    "atchesH\000\022G\n\016point_sequence\030\003 \001(\0132-.open_"
    "vector_format.VectorBlock.PointSequenceH"
    "\000\0225\n\005_arcs\030\004 \001(\0132$.open_vector_format.Ve"
    "ctorBlock.ArcsH\000\022<\n\010ellipses\030\005 \001(\0132(.ope"
    "n_vector_format.VectorBlock.EllipsesH\000\022J"
    "\n\020line_sequence_3d\030\006 \001(\0132..open_vector_f"
    "ormat.VectorBlock.LineSequence3DH\000\022\?\n\nha"
    "tches_3d\030\007 \001(\0132).open_vector_format.Vect"
    "orBlock.Hatches3DH\000\022L\n\021point_sequence_3d"
    "\030\010 \001(\0132/.open_vector_format.VectorBlock."
    "PointSequence3DH\000\0229\n\007arcs_3d\030\t \001(\0132&.ope"
    "n_vector_format.VectorBlock.Arcs3DH\000\022G\n\016"
    "exposure_pause\030\n \001(\0132-.open_vector_forma"
    "t.VectorBlock.ExposurePauseH\000\022Y\n\030line_se"
    "quence_para_adapt\030\013 \001(\01325.open_vector_fo"
    "rmat.VectorBlock.LineSequenceParaAdaptH\000"
    "\022K\n\017_hatchParaAdapt\030\014 \001(\01320.open_vector_"
    "format.VectorBlock.HatchesParaAdaptH\000\022\032\n"
    "\022marking_params_key\0302 \001(\005\022\023\n\013laser_index"
    "\0305 \001(\005\022\017\n\007repeats\0306 \001(\004\022F\n\tmeta_data\030d \001"
    "(\01323.open_vector_format.VectorBlock.Vect"
    "orBlockMetaData\022E\n\rlpbf_metadata\030e \001(\0132,"
    ".open_vector_format.VectorBlock.LPBFMeta"
    "dataH\001\022^\n\032micro_structuring_metadata\030f \001"
    "(\01328.open_vector_format.VectorBlock.Micr"
    "oStructuringMetadataH\001\022O\n\022polishing_meta"
    "data\030g \001(\01321.open_vector_format.VectorBl"
    "ock.PolishingMetadataH\001\032\344\001\n\023VectorBlockM"
    "etaData\022!\n\031total_scan_distance_in_mm\030\001 \001"
    "(\001\022!\n\031total_jump_distance_in_mm\030\002 \001(\001\022\020\n"
    "\010part_key\030\003 \001(\005\022\021\n\tpatch_key\030\004 \001(\005\022\025\n\rco"
    "ntour_index\030\005 \001(\005\0224\n\006bounds\030\006 \001(\0132$.open"
    "_vector_format.AxisAlignedBox2D\022\025\n\rdispl"
    "ay_color\030\007 \001(\005\032\317\003\n\014LPBFMetadata\022;\n\tpart_"
    "area\030\001 \001(\0162(.open_vector_format.VectorBl"
    "ock.PartArea\022H\n\tskin_type\030\002 \001(\01625.open_v"
    "ector_format.VectorBlock.LPBFMetadata.Sk"
    "inType\022b\n\027skin_core_strategy_area\030\003 \001(\0162"
    "A.open_vector_format.VectorBlock.LPBFMet"
    "adata.SkinCoreStrategyArea\022E\n\016structure_"
    "type\030\004 \001(\0162-.open_vector_format.VectorBl"
    "ock.StructureType\022\022\n\nreexposure\030\005 \001(\010\"3\n"
    "\010SkinType\022\013\n\007IN_SKIN\020\000\022\r\n\tDOWN_SKIN\020\001\022\013\n"
    "\007UP_SKIN\020\002\"D\n\024SkinCoreStrategyArea\022\016\n\nOU"
    "TER_HULL\020\000\022\010\n\004CORE\020\001\022\022\n\016INBETWEEN_HULL\020\002"
    "\032\236\001\n\030MicroStructuringMetadata\022;\n\tpart_ar"
    "ea\030\001 \001(\0162(.open_vector_format.VectorBloc"
    "k.PartArea\022E\n\016structure_type\030\002 \001(\0162-.ope"
    "n_vector_format.VectorBlock.StructureTyp"
    "e\032\023\n\021PolishingMetadata\032\036\n\014LineSequence\022\016"
    "\n\006points\030\001 \003(\002\032 \n\016LineSequence3D\022\016\n\006poin"
    "ts\030\001 \003(\002\032\031\n\007Hatches\022\016\n\006points\030\001 \003(\002\032\033\n\tH"
    "atches3D\022\016\n\006points\030\001 \003(\002\032\037\n\rPointSequenc"
    "e\022\016\n\006points\030\001 \003(\002\032!\n\017PointSequence3D\022\016\n\006"
    "points\030\001 \003(\002\032J\n\004Arcs\022\r\n\005angle\030\001 \001(\001\022\020\n\010s"
    "tart_dx\030\002 \001(\002\022\020\n\010start_dy\030\003 \001(\002\022\017\n\007cente"
    "rs\030\004 \003(\002\032^\n\006Arcs3D\022\r\n\005angle\030\001 \001(\001\022\020\n\010sta"
    "rt_dx\030\002 \001(\002\022\020\n\010start_dy\030\003 \001(\002\022\020\n\010start_d"
    "z\030\004 \001(\002\022\017\n\007centers\030\005 \003(\002\032k\n\010Ellipses\022\t\n\001"
    "a\030\001 \001(\002\022\t\n\001b\030\002 \001(\002\022\014\n\004phi0\030\003 \001(\001\022;\n\relli"
    "pses_arcs\030\004 \001(\0132$.open_vector_format.Vec"
    "torBlock.Arcs\032$\n\rExposurePause\022\023\n\013pause_"
    "in_us\030\001 \001(\004\032\230\002\n\025LineSequenceParaAdapt\022\031\n"
    "\021points_with_paras\030\001 \003(\002\022Y\n\tparameter\030\002 "
    "\001(\0162F.open_vector_format.VectorBlock.Lin"
    "eSequenceParaAdapt.AdaptedParameter\"\210\001\n\020"
    "AdaptedParameter\022\024\n\020LASER_POWER_IN_W\020\000\022\033"
    "\n\027LASER_FOCUS_SHIFT_IN_MM\020\001\022\034\n\030LASER_PUL"
    "SE_LENGTH_IN_US\020\002\022#\n\037LASER_PULSE_REPITIO"
    "N_RATE_IN_HZ\020\003\032f\n\020HatchesParaAdapt\022R\n\023ha"
    "tchAsLinesequence\030\001 \003(\01325.open_vector_fo"
    "rmat.VectorBlock.LineSequenceParaAdapt\";"
    "\n\010PartArea\022\n\n\006VOLUME\020\000\022\013\n\007CONTOUR\020\001\022\026\n\022T"
    "RANSITION_CONTOUR\020\002\"E\n\rStructureType\022\010\n\004"
    "PART\020\000\022\013\n\007SUPPORT\020\001\022\021\n\rWIRESTRUCTURE\020\002\022\n"
    "\n\006POINTS\020\003B\r\n\013vector_dataB\023\n\021process_met"
    "a_data\"N\n\020AxisAlignedBox2D\022\r\n\005x_min\030\001 \001("
    "\002\022\r\n\005y_min\030\002 \001(\002\022\r\n\005x_max\030\003 \001(\002\022\r\n\005y_max"
    "\030\004 \001(\002B=Z;github.com/digital-production-"
    "aachen/openvectorformat/protob\006proto3"
};
static ::absl::once_flag descriptor_table_open_5fvector_5fformat_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_open_5fvector_5fformat_2eproto = {
    false,
    false,
    7997,
    descriptor_table_protodef_open_5fvector_5fformat_2eproto,
    "open_vector_format.proto",
    &descriptor_table_open_5fvector_5fformat_2eproto_once,
    nullptr,
    0,
    35,
    schemas,
    file_default_instances,
    TableStruct_open_5fvector_5fformat_2eproto::offsets,
    file_level_enum_descriptors_open_5fvector_5fformat_2eproto,
    file_level_service_descriptors_open_5fvector_5fformat_2eproto,
};
namespace open_vector_format {
const ::google::protobuf::EnumDescriptor* MarkingParams_MarkingMode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_open_5fvector_5fformat_2eproto);
  return file_level_enum_descriptors_open_5fvector_5fformat_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t MarkingParams_MarkingMode_internal_data_[] = {
    262144u, 0u, };
bool MarkingParams_MarkingMode_IsValid(int value) {
  return 0 <= value && value <= 3;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr MarkingParams_MarkingMode MarkingParams::NO_SKY;
constexpr MarkingParams_MarkingMode MarkingParams::SKY_1;
constexpr MarkingParams_MarkingMode MarkingParams::SKY_2;
constexpr MarkingParams_MarkingMode MarkingParams::SKY_3;
constexpr MarkingParams_MarkingMode MarkingParams::MarkingMode_MIN;
constexpr MarkingParams_MarkingMode MarkingParams::MarkingMode_MAX;
constexpr int MarkingParams::MarkingMode_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* MarkingParams_WobbleMode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_open_5fvector_5fformat_2eproto);
  return file_level_enum_descriptors_open_5fvector_5fformat_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t MarkingParams_WobbleMode_internal_data_[] = {
    262144u, 0u, };
bool MarkingParams_WobbleMode_IsValid(int value) {
  return 0 <= value && value <= 3;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr MarkingParams_WobbleMode MarkingParams::NO_WOBBLE;
constexpr MarkingParams_WobbleMode MarkingParams::ELLIPSE_WOBBLE;
constexpr MarkingParams_WobbleMode MarkingParams::STANDING_EIGHT_WOBBLE;
constexpr MarkingParams_WobbleMode MarkingParams::LYING_EIGHT_WOBBLE;
constexpr MarkingParams_WobbleMode MarkingParams::WobbleMode_MIN;
constexpr MarkingParams_WobbleMode MarkingParams::WobbleMode_MAX;
constexpr int MarkingParams::WobbleMode_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* Part_ProcessStrategy_HatchingPattern_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_open_5fvector_5fformat_2eproto);
  return file_level_enum_descriptors_open_5fvector_5fformat_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t Part_ProcessStrategy_HatchingPattern_internal_data_[] = {
    327680u, 0u, };
bool Part_ProcessStrategy_HatchingPattern_IsValid(int value) {
  return 0 <= value && value <= 4;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Part_ProcessStrategy_HatchingPattern Part_ProcessStrategy::UNIDIRECTIONAL;
constexpr Part_ProcessStrategy_HatchingPattern Part_ProcessStrategy::BIDIRECTIONAL;
constexpr Part_ProcessStrategy_HatchingPattern Part_ProcessStrategy::CHECKERBOARD;
constexpr Part_ProcessStrategy_HatchingPattern Part_ProcessStrategy::STRIPES;
constexpr Part_ProcessStrategy_HatchingPattern Part_ProcessStrategy::HEXAGON;
constexpr Part_ProcessStrategy_HatchingPattern Part_ProcessStrategy::HatchingPattern_MIN;
constexpr Part_ProcessStrategy_HatchingPattern Part_ProcessStrategy::HatchingPattern_MAX;
constexpr int Part_ProcessStrategy::HatchingPattern_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* WorkPlane_WorkPlaneMetaData_closedContour_ContourType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_open_5fvector_5fformat_2eproto);
  return file_level_enum_descriptors_open_5fvector_5fformat_2eproto[3];
}
PROTOBUF_CONSTINIT const uint32_t WorkPlane_WorkPlaneMetaData_closedContour_ContourType_internal_data_[] = {
    196608u, 0u, };
bool WorkPlane_WorkPlaneMetaData_closedContour_ContourType_IsValid(int value) {
  return 0 <= value && value <= 2;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr WorkPlane_WorkPlaneMetaData_closedContour_ContourType WorkPlane_WorkPlaneMetaData_closedContour::PART_OUTER_CONTOUR;
constexpr WorkPlane_WorkPlaneMetaData_closedContour_ContourType WorkPlane_WorkPlaneMetaData_closedContour::PART_INNER_CONTOUR;
constexpr WorkPlane_WorkPlaneMetaData_closedContour_ContourType WorkPlane_WorkPlaneMetaData_closedContour::OFFSET_CONTOUR;
constexpr WorkPlane_WorkPlaneMetaData_closedContour_ContourType WorkPlane_WorkPlaneMetaData_closedContour::ContourType_MIN;
constexpr WorkPlane_WorkPlaneMetaData_closedContour_ContourType WorkPlane_WorkPlaneMetaData_closedContour::ContourType_MAX;
constexpr int WorkPlane_WorkPlaneMetaData_closedContour::ContourType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* VectorBlock_LPBFMetadata_SkinType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_open_5fvector_5fformat_2eproto);
  return file_level_enum_descriptors_open_5fvector_5fformat_2eproto[4];
}
PROTOBUF_CONSTINIT const uint32_t VectorBlock_LPBFMetadata_SkinType_internal_data_[] = {
    196608u, 0u, };
bool VectorBlock_LPBFMetadata_SkinType_IsValid(int value) {
  return 0 <= value && value <= 2;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr VectorBlock_LPBFMetadata_SkinType VectorBlock_LPBFMetadata::IN_SKIN;
constexpr VectorBlock_LPBFMetadata_SkinType VectorBlock_LPBFMetadata::DOWN_SKIN;
constexpr VectorBlock_LPBFMetadata_SkinType VectorBlock_LPBFMetadata::UP_SKIN;
constexpr VectorBlock_LPBFMetadata_SkinType VectorBlock_LPBFMetadata::SkinType_MIN;
constexpr VectorBlock_LPBFMetadata_SkinType VectorBlock_LPBFMetadata::SkinType_MAX;
constexpr int VectorBlock_LPBFMetadata::SkinType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* VectorBlock_LPBFMetadata_SkinCoreStrategyArea_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_open_5fvector_5fformat_2eproto);
  return file_level_enum_descriptors_open_5fvector_5fformat_2eproto[5];
}
PROTOBUF_CONSTINIT const uint32_t VectorBlock_LPBFMetadata_SkinCoreStrategyArea_internal_data_[] = {
    196608u, 0u, };
bool VectorBlock_LPBFMetadata_SkinCoreStrategyArea_IsValid(int value) {
  return 0 <= value && value <= 2;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr VectorBlock_LPBFMetadata_SkinCoreStrategyArea VectorBlock_LPBFMetadata::OUTER_HULL;
constexpr VectorBlock_LPBFMetadata_SkinCoreStrategyArea VectorBlock_LPBFMetadata::CORE;
constexpr VectorBlock_LPBFMetadata_SkinCoreStrategyArea VectorBlock_LPBFMetadata::INBETWEEN_HULL;
constexpr VectorBlock_LPBFMetadata_SkinCoreStrategyArea VectorBlock_LPBFMetadata::SkinCoreStrategyArea_MIN;
constexpr VectorBlock_LPBFMetadata_SkinCoreStrategyArea VectorBlock_LPBFMetadata::SkinCoreStrategyArea_MAX;
constexpr int VectorBlock_LPBFMetadata::SkinCoreStrategyArea_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* VectorBlock_LineSequenceParaAdapt_AdaptedParameter_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_open_5fvector_5fformat_2eproto);
  return file_level_enum_descriptors_open_5fvector_5fformat_2eproto[6];
}
PROTOBUF_CONSTINIT const uint32_t VectorBlock_LineSequenceParaAdapt_AdaptedParameter_internal_data_[] = {
    262144u, 0u, };
bool VectorBlock_LineSequenceParaAdapt_AdaptedParameter_IsValid(int value) {
  return 0 <= value && value <= 3;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr VectorBlock_LineSequenceParaAdapt_AdaptedParameter VectorBlock_LineSequenceParaAdapt::LASER_POWER_IN_W;
constexpr VectorBlock_LineSequenceParaAdapt_AdaptedParameter VectorBlock_LineSequenceParaAdapt::LASER_FOCUS_SHIFT_IN_MM;
constexpr VectorBlock_LineSequenceParaAdapt_AdaptedParameter VectorBlock_LineSequenceParaAdapt::LASER_PULSE_LENGTH_IN_US;
constexpr VectorBlock_LineSequenceParaAdapt_AdaptedParameter VectorBlock_LineSequenceParaAdapt::LASER_PULSE_REPITION_RATE_IN_HZ;
constexpr VectorBlock_LineSequenceParaAdapt_AdaptedParameter VectorBlock_LineSequenceParaAdapt::AdaptedParameter_MIN;
constexpr VectorBlock_LineSequenceParaAdapt_AdaptedParameter VectorBlock_LineSequenceParaAdapt::AdaptedParameter_MAX;
constexpr int VectorBlock_LineSequenceParaAdapt::AdaptedParameter_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* VectorBlock_PartArea_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_open_5fvector_5fformat_2eproto);
  return file_level_enum_descriptors_open_5fvector_5fformat_2eproto[7];
}
PROTOBUF_CONSTINIT const uint32_t VectorBlock_PartArea_internal_data_[] = {
    196608u, 0u, };
bool VectorBlock_PartArea_IsValid(int value) {
  return 0 <= value && value <= 2;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr VectorBlock_PartArea VectorBlock::VOLUME;
constexpr VectorBlock_PartArea VectorBlock::CONTOUR;
constexpr VectorBlock_PartArea VectorBlock::TRANSITION_CONTOUR;
constexpr VectorBlock_PartArea VectorBlock::PartArea_MIN;
constexpr VectorBlock_PartArea VectorBlock::PartArea_MAX;
constexpr int VectorBlock::PartArea_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* VectorBlock_StructureType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_open_5fvector_5fformat_2eproto);
  return file_level_enum_descriptors_open_5fvector_5fformat_2eproto[8];
}
PROTOBUF_CONSTINIT const uint32_t VectorBlock_StructureType_internal_data_[] = {
    262144u, 0u, };
bool VectorBlock_StructureType_IsValid(int value) {
  return 0 <= value && value <= 3;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr VectorBlock_StructureType VectorBlock::PART;
constexpr VectorBlock_StructureType VectorBlock::SUPPORT;
constexpr VectorBlock_StructureType VectorBlock::WIRESTRUCTURE;
constexpr VectorBlock_StructureType VectorBlock::POINTS;
constexpr VectorBlock_StructureType VectorBlock::StructureType_MIN;
constexpr VectorBlock_StructureType VectorBlock::StructureType_MAX;
constexpr int VectorBlock::StructureType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              Job_MarkingParamsMapEntry_DoNotUse::Job_MarkingParamsMapEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              Job_MarkingParamsMapEntry_DoNotUse::Job_MarkingParamsMapEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              Job_MarkingParamsMapEntry_DoNotUse::Job_MarkingParamsMapEntry_DoNotUse() : SuperType() {}
              Job_MarkingParamsMapEntry_DoNotUse::Job_MarkingParamsMapEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* Job_MarkingParamsMapEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) Job_MarkingParamsMapEntry_DoNotUse(arena);
              }
              constexpr auto Job_MarkingParamsMapEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Job_MarkingParamsMapEntry_DoNotUse),
                                                          alignof(Job_MarkingParamsMapEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull Job_MarkingParamsMapEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_Job_MarkingParamsMapEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &Job_MarkingParamsMapEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<Job_MarkingParamsMapEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &Job_MarkingParamsMapEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &Job_MarkingParamsMapEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(Job_MarkingParamsMapEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &Job_MarkingParamsMapEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_open_5fvector_5fformat_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* Job_MarkingParamsMapEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> Job_MarkingParamsMapEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Job_MarkingParamsMapEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::open_vector_format::Job_MarkingParamsMapEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .open_vector_format.MarkingParams value = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(Job_MarkingParamsMapEntry_DoNotUse, _impl_.value_)}},
    // int32 key = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Job_MarkingParamsMapEntry_DoNotUse, _impl_.key_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Job_MarkingParamsMapEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 key = 1;
    {PROTOBUF_FIELD_OFFSET(Job_MarkingParamsMapEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .open_vector_format.MarkingParams value = 2;
    {PROTOBUF_FIELD_OFFSET(Job_MarkingParamsMapEntry_DoNotUse, _impl_.value_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::open_vector_format::MarkingParams>()},
  }}, {{
  }},
};

// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              Job_PartsMapEntry_DoNotUse::Job_PartsMapEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              Job_PartsMapEntry_DoNotUse::Job_PartsMapEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              Job_PartsMapEntry_DoNotUse::Job_PartsMapEntry_DoNotUse() : SuperType() {}
              Job_PartsMapEntry_DoNotUse::Job_PartsMapEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* Job_PartsMapEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) Job_PartsMapEntry_DoNotUse(arena);
              }
              constexpr auto Job_PartsMapEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Job_PartsMapEntry_DoNotUse),
                                                          alignof(Job_PartsMapEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull Job_PartsMapEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_Job_PartsMapEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &Job_PartsMapEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<Job_PartsMapEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &Job_PartsMapEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &Job_PartsMapEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(Job_PartsMapEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &Job_PartsMapEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_open_5fvector_5fformat_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* Job_PartsMapEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> Job_PartsMapEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Job_PartsMapEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::open_vector_format::Job_PartsMapEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .open_vector_format.Part value = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(Job_PartsMapEntry_DoNotUse, _impl_.value_)}},
    // int32 key = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Job_PartsMapEntry_DoNotUse, _impl_.key_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Job_PartsMapEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 key = 1;
    {PROTOBUF_FIELD_OFFSET(Job_PartsMapEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .open_vector_format.Part value = 2;
    {PROTOBUF_FIELD_OFFSET(Job_PartsMapEntry_DoNotUse, _impl_.value_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::open_vector_format::Part>()},
  }}, {{
  }},
};

// ===================================================================

class Job_JobMetaData::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Job_JobMetaData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Job_JobMetaData, _impl_._has_bits_);
};

Job_JobMetaData::Job_JobMetaData(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.Job.JobMetaData)
}
inline PROTOBUF_NDEBUG_INLINE Job_JobMetaData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::open_vector_format::Job_JobMetaData& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        job_name_(arena, from.job_name_),
        author_(arena, from.author_),
        description_(arena, from.description_) {}

Job_JobMetaData::Job_JobMetaData(
    ::google::protobuf::Arena* arena,
    const Job_JobMetaData& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Job_JobMetaData* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.bounds_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::open_vector_format::AxisAlignedBox2D>(
                              arena, *from._impl_.bounds_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, job_creation_time_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, job_creation_time_),
           offsetof(Impl_, version_) -
               offsetof(Impl_, job_creation_time_) +
               sizeof(Impl_::version_));

  // @@protoc_insertion_point(copy_constructor:open_vector_format.Job.JobMetaData)
}
inline PROTOBUF_NDEBUG_INLINE Job_JobMetaData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        job_name_(arena),
        author_(arena),
        description_(arena) {}

inline void Job_JobMetaData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, bounds_),
           0,
           offsetof(Impl_, version_) -
               offsetof(Impl_, bounds_) +
               sizeof(Impl_::version_));
}
Job_JobMetaData::~Job_JobMetaData() {
  // @@protoc_insertion_point(destructor:open_vector_format.Job.JobMetaData)
  SharedDtor(*this);
}
inline void Job_JobMetaData::SharedDtor(MessageLite& self) {
  Job_JobMetaData& this_ = static_cast<Job_JobMetaData&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.job_name_.Destroy();
  this_._impl_.author_.Destroy();
  this_._impl_.description_.Destroy();
  delete this_._impl_.bounds_;
  this_._impl_.~Impl_();
}

inline void* Job_JobMetaData::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Job_JobMetaData(arena);
}
constexpr auto Job_JobMetaData::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Job_JobMetaData),
                                            alignof(Job_JobMetaData));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Job_JobMetaData::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Job_JobMetaData_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Job_JobMetaData::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Job_JobMetaData>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Job_JobMetaData::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Job_JobMetaData>(), &Job_JobMetaData::ByteSizeLong,
            &Job_JobMetaData::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Job_JobMetaData, _impl_._cached_size_),
        false,
    },
    &Job_JobMetaData::kDescriptorMethods,
    &descriptor_table_open_5fvector_5fformat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Job_JobMetaData::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 1, 68, 2> Job_JobMetaData::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Job_JobMetaData, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::open_vector_format::Job_JobMetaData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int64 job_creation_time = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Job_JobMetaData, _impl_.job_creation_time_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Job_JobMetaData, _impl_.job_creation_time_)}},
    // uint64 version = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Job_JobMetaData, _impl_.version_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Job_JobMetaData, _impl_.version_)}},
    // string job_name = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Job_JobMetaData, _impl_.job_name_)}},
    // string author = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Job_JobMetaData, _impl_.author_)}},
    // string description = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(Job_JobMetaData, _impl_.description_)}},
    // .open_vector_format.AxisAlignedBox2D bounds = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 0, 0, PROTOBUF_FIELD_OFFSET(Job_JobMetaData, _impl_.bounds_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 job_creation_time = 1;
    {PROTOBUF_FIELD_OFFSET(Job_JobMetaData, _impl_.job_creation_time_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // uint64 version = 2;
    {PROTOBUF_FIELD_OFFSET(Job_JobMetaData, _impl_.version_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // string job_name = 3;
    {PROTOBUF_FIELD_OFFSET(Job_JobMetaData, _impl_.job_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string author = 4;
    {PROTOBUF_FIELD_OFFSET(Job_JobMetaData, _impl_.author_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string description = 5;
    {PROTOBUF_FIELD_OFFSET(Job_JobMetaData, _impl_.description_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .open_vector_format.AxisAlignedBox2D bounds = 6;
    {PROTOBUF_FIELD_OFFSET(Job_JobMetaData, _impl_.bounds_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::open_vector_format::AxisAlignedBox2D>()},
  }}, {{
    "\42\0\0\10\6\13\0\0"
    "open_vector_format.Job.JobMetaData"
    "job_name"
    "author"
    "description"
  }},
};

PROTOBUF_NOINLINE void Job_JobMetaData::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.Job.JobMetaData)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.job_name_.ClearToEmpty();
  _impl_.author_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.bounds_ != nullptr);
    _impl_.bounds_->Clear();
  }
  ::memset(&_impl_.job_creation_time_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.version_) -
      reinterpret_cast<char*>(&_impl_.job_creation_time_)) + sizeof(_impl_.version_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Job_JobMetaData::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Job_JobMetaData& this_ = static_cast<const Job_JobMetaData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Job_JobMetaData::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Job_JobMetaData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.Job.JobMetaData)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int64 job_creation_time = 1;
          if (this_._internal_job_creation_time() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<1>(
                    stream, this_._internal_job_creation_time(), target);
          }

          // uint64 version = 2;
          if (this_._internal_version() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                2, this_._internal_version(), target);
          }

          // string job_name = 3;
          if (!this_._internal_job_name().empty()) {
            const std::string& _s = this_._internal_job_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "open_vector_format.Job.JobMetaData.job_name");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string author = 4;
          if (!this_._internal_author().empty()) {
            const std::string& _s = this_._internal_author();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "open_vector_format.Job.JobMetaData.author");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // string description = 5;
          if (!this_._internal_description().empty()) {
            const std::string& _s = this_._internal_description();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "open_vector_format.Job.JobMetaData.description");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .open_vector_format.AxisAlignedBox2D bounds = 6;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                6, *this_._impl_.bounds_, this_._impl_.bounds_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.Job.JobMetaData)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Job_JobMetaData::ByteSizeLong(const MessageLite& base) {
          const Job_JobMetaData& this_ = static_cast<const Job_JobMetaData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Job_JobMetaData::ByteSizeLong() const {
          const Job_JobMetaData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:open_vector_format.Job.JobMetaData)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string job_name = 3;
            if (!this_._internal_job_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_job_name());
            }
            // string author = 4;
            if (!this_._internal_author().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_author());
            }
            // string description = 5;
            if (!this_._internal_description().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_description());
            }
          }
           {
            // .open_vector_format.AxisAlignedBox2D bounds = 6;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.bounds_);
            }
          }
           {
            // int64 job_creation_time = 1;
            if (this_._internal_job_creation_time() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_job_creation_time());
            }
            // uint64 version = 2;
            if (this_._internal_version() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_version());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Job_JobMetaData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Job_JobMetaData*>(&to_msg);
  auto& from = static_cast<const Job_JobMetaData&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.Job.JobMetaData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_job_name().empty()) {
    _this->_internal_set_job_name(from._internal_job_name());
  }
  if (!from._internal_author().empty()) {
    _this->_internal_set_author(from._internal_author());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.bounds_ != nullptr);
    if (_this->_impl_.bounds_ == nullptr) {
      _this->_impl_.bounds_ =
          ::google::protobuf::Message::CopyConstruct<::open_vector_format::AxisAlignedBox2D>(arena, *from._impl_.bounds_);
    } else {
      _this->_impl_.bounds_->MergeFrom(*from._impl_.bounds_);
    }
  }
  if (from._internal_job_creation_time() != 0) {
    _this->_impl_.job_creation_time_ = from._impl_.job_creation_time_;
  }
  if (from._internal_version() != 0) {
    _this->_impl_.version_ = from._impl_.version_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Job_JobMetaData::CopyFrom(const Job_JobMetaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.Job.JobMetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Job_JobMetaData::InternalSwap(Job_JobMetaData* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.job_name_, &other->_impl_.job_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.author_, &other->_impl_.author_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, &other->_impl_.description_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Job_JobMetaData, _impl_.version_)
      + sizeof(Job_JobMetaData::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(Job_JobMetaData, _impl_.bounds_)>(
          reinterpret_cast<char*>(&_impl_.bounds_),
          reinterpret_cast<char*>(&other->_impl_.bounds_));
}

::google::protobuf::Metadata Job_JobMetaData::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Job::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Job>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Job, _impl_._has_bits_);
};

Job::Job(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.Job)
}
inline PROTOBUF_NDEBUG_INLINE Job::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::open_vector_format::Job& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        work_planes_{visibility, arena, from.work_planes_},
        marking_params_map_{visibility, arena, from.marking_params_map_},
        parts_map_{visibility, arena, from.parts_map_} {}

Job::Job(
    ::google::protobuf::Arena* arena,
    const Job& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Job* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.job_meta_data_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::open_vector_format::Job_JobMetaData>(
                              arena, *from._impl_.job_meta_data_)
                        : nullptr;
  _impl_.job_parameters_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::open_vector_format::JobParameters>(
                              arena, *from._impl_.job_parameters_)
                        : nullptr;
  _impl_.num_work_planes_ = from._impl_.num_work_planes_;

  // @@protoc_insertion_point(copy_constructor:open_vector_format.Job)
}
inline PROTOBUF_NDEBUG_INLINE Job::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        work_planes_{visibility, arena},
        marking_params_map_{visibility, arena},
        parts_map_{visibility, arena} {}

inline void Job::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, job_meta_data_),
           0,
           offsetof(Impl_, num_work_planes_) -
               offsetof(Impl_, job_meta_data_) +
               sizeof(Impl_::num_work_planes_));
}
Job::~Job() {
  // @@protoc_insertion_point(destructor:open_vector_format.Job)
  SharedDtor(*this);
}
inline void Job::SharedDtor(MessageLite& self) {
  Job& this_ = static_cast<Job&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.job_meta_data_;
  delete this_._impl_.job_parameters_;
  this_._impl_.~Impl_();
}

inline void* Job::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Job(arena);
}
constexpr auto Job::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Job, _impl_.work_planes_) +
          decltype(Job::_impl_.work_planes_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(Job, _impl_.marking_params_map_) +
          decltype(Job::_impl_.marking_params_map_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(Job, _impl_.marking_params_map_) +
          decltype(Job::_impl_.marking_params_map_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(Job, _impl_.parts_map_) +
          decltype(Job::_impl_.parts_map_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(Job, _impl_.parts_map_) +
          decltype(Job::_impl_.parts_map_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(Job), alignof(Job), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Job::PlacementNew_,
                                 sizeof(Job),
                                 alignof(Job));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Job::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Job_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Job::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Job>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Job::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Job>(), &Job::ByteSizeLong,
            &Job::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Job, _impl_._cached_size_),
        false,
    },
    &Job::kDescriptorMethods,
    &descriptor_table_open_5fvector_5fformat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Job::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 7, 0, 2> Job::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Job, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    7,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::open_vector_format::Job>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .open_vector_format.WorkPlane work_planes = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Job, _impl_.work_planes_)}},
    // .open_vector_format.Job.JobMetaData job_meta_data = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 1, PROTOBUF_FIELD_OFFSET(Job, _impl_.job_meta_data_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // .open_vector_format.JobParameters job_parameters = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 1, 2, PROTOBUF_FIELD_OFFSET(Job, _impl_.job_parameters_)}},
    // int32 num_work_planes = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Job, _impl_.num_work_planes_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(Job, _impl_.num_work_planes_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .open_vector_format.WorkPlane work_planes = 1;
    {PROTOBUF_FIELD_OFFSET(Job, _impl_.work_planes_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .open_vector_format.Job.JobMetaData job_meta_data = 2;
    {PROTOBUF_FIELD_OFFSET(Job, _impl_.job_meta_data_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // map<int32, .open_vector_format.MarkingParams> marking_params_map = 3;
    {PROTOBUF_FIELD_OFFSET(Job, _impl_.marking_params_map_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<int32, .open_vector_format.Part> parts_map = 4;
    {PROTOBUF_FIELD_OFFSET(Job, _impl_.parts_map_), -1, 5,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // .open_vector_format.JobParameters job_parameters = 5;
    {PROTOBUF_FIELD_OFFSET(Job, _impl_.job_parameters_), _Internal::kHasBitsOffset + 1, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 num_work_planes = 6;
    {PROTOBUF_FIELD_OFFSET(Job, _impl_.num_work_planes_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::open_vector_format::WorkPlane>()},
    {::_pbi::TcParser::GetTable<::open_vector_format::Job_JobMetaData>()},
    {::_pbi::TcParser::GetTable<::open_vector_format::JobParameters>()},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(Job()._impl_.marking_params_map_)>(
        0, 0, 0, 5,
        11)},
    {::_pbi::TcParser::GetTable<::open_vector_format::MarkingParams>()},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(Job()._impl_.parts_map_)>(
        0, 0, 0, 5,
        11)},
    {::_pbi::TcParser::GetTable<::open_vector_format::Part>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Job::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.Job)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.work_planes_.Clear();
  _impl_.marking_params_map_.Clear();
  _impl_.parts_map_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.job_meta_data_ != nullptr);
      _impl_.job_meta_data_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.job_parameters_ != nullptr);
      _impl_.job_parameters_->Clear();
    }
  }
  _impl_.num_work_planes_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Job::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Job& this_ = static_cast<const Job&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Job::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Job& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.Job)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .open_vector_format.WorkPlane work_planes = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_work_planes_size());
               i < n; i++) {
            const auto& repfield = this_._internal_work_planes().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .open_vector_format.Job.JobMetaData job_meta_data = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.job_meta_data_, this_._impl_.job_meta_data_->GetCachedSize(), target,
                stream);
          }

          // map<int32, .open_vector_format.MarkingParams> marking_params_map = 3;
          if (!this_._internal_marking_params_map().empty()) {
            using MapType = ::google::protobuf::Map<::int32_t, ::open_vector_format::MarkingParams>;
            using WireHelper = _pbi::MapEntryFuncs<::int32_t, ::open_vector_format::MarkingParams,
                                           _pbi::WireFormatLite::TYPE_INT32,
                                           _pbi::WireFormatLite::TYPE_MESSAGE>;
            const auto& field = this_._internal_marking_params_map();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    3, entry.first, entry.second, target, stream);
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    3, entry.first, entry.second, target, stream);
              }
            }
          }

          // map<int32, .open_vector_format.Part> parts_map = 4;
          if (!this_._internal_parts_map().empty()) {
            using MapType = ::google::protobuf::Map<::int32_t, ::open_vector_format::Part>;
            using WireHelper = _pbi::MapEntryFuncs<::int32_t, ::open_vector_format::Part,
                                           _pbi::WireFormatLite::TYPE_INT32,
                                           _pbi::WireFormatLite::TYPE_MESSAGE>;
            const auto& field = this_._internal_parts_map();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    4, entry.first, entry.second, target, stream);
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    4, entry.first, entry.second, target, stream);
              }
            }
          }

          // .open_vector_format.JobParameters job_parameters = 5;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                5, *this_._impl_.job_parameters_, this_._impl_.job_parameters_->GetCachedSize(), target,
                stream);
          }

          // int32 num_work_planes = 6;
          if (this_._internal_num_work_planes() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<6>(
                    stream, this_._internal_num_work_planes(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.Job)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Job::ByteSizeLong(const MessageLite& base) {
          const Job& this_ = static_cast<const Job&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Job::ByteSizeLong() const {
          const Job& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:open_vector_format.Job)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .open_vector_format.WorkPlane work_planes = 1;
            {
              total_size += 1UL * this_._internal_work_planes_size();
              for (const auto& msg : this_._internal_work_planes()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // map<int32, .open_vector_format.MarkingParams> marking_params_map = 3;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_marking_params_map_size());
              for (const auto& entry : this_._internal_marking_params_map()) {
                total_size += _pbi::MapEntryFuncs<::int32_t, ::open_vector_format::MarkingParams,
                                               _pbi::WireFormatLite::TYPE_INT32,
                                               _pbi::WireFormatLite::TYPE_MESSAGE>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<int32, .open_vector_format.Part> parts_map = 4;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_parts_map_size());
              for (const auto& entry : this_._internal_parts_map()) {
                total_size += _pbi::MapEntryFuncs<::int32_t, ::open_vector_format::Part,
                                               _pbi::WireFormatLite::TYPE_INT32,
                                               _pbi::WireFormatLite::TYPE_MESSAGE>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .open_vector_format.Job.JobMetaData job_meta_data = 2;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.job_meta_data_);
            }
            // .open_vector_format.JobParameters job_parameters = 5;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.job_parameters_);
            }
          }
           {
            // int32 num_work_planes = 6;
            if (this_._internal_num_work_planes() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_num_work_planes());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Job::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Job*>(&to_msg);
  auto& from = static_cast<const Job&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.Job)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_work_planes()->MergeFrom(
      from._internal_work_planes());
  _this->_impl_.marking_params_map_.MergeFrom(from._impl_.marking_params_map_);
  _this->_impl_.parts_map_.MergeFrom(from._impl_.parts_map_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.job_meta_data_ != nullptr);
      if (_this->_impl_.job_meta_data_ == nullptr) {
        _this->_impl_.job_meta_data_ =
            ::google::protobuf::Message::CopyConstruct<::open_vector_format::Job_JobMetaData>(arena, *from._impl_.job_meta_data_);
      } else {
        _this->_impl_.job_meta_data_->MergeFrom(*from._impl_.job_meta_data_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.job_parameters_ != nullptr);
      if (_this->_impl_.job_parameters_ == nullptr) {
        _this->_impl_.job_parameters_ =
            ::google::protobuf::Message::CopyConstruct<::open_vector_format::JobParameters>(arena, *from._impl_.job_parameters_);
      } else {
        _this->_impl_.job_parameters_->MergeFrom(*from._impl_.job_parameters_);
      }
    }
  }
  if (from._internal_num_work_planes() != 0) {
    _this->_impl_.num_work_planes_ = from._impl_.num_work_planes_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Job::CopyFrom(const Job& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.Job)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Job::InternalSwap(Job* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.work_planes_.InternalSwap(&other->_impl_.work_planes_);
  _impl_.marking_params_map_.InternalSwap(&other->_impl_.marking_params_map_);
  _impl_.parts_map_.InternalSwap(&other->_impl_.parts_map_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Job, _impl_.num_work_planes_)
      + sizeof(Job::_impl_.num_work_planes_)
      - PROTOBUF_FIELD_OFFSET(Job, _impl_.job_meta_data_)>(
          reinterpret_cast<char*>(&_impl_.job_meta_data_),
          reinterpret_cast<char*>(&other->_impl_.job_meta_data_));
}

::google::protobuf::Metadata Job::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class JobParameters::_Internal {
 public:
};

JobParameters::JobParameters(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.JobParameters)
}
inline PROTOBUF_NDEBUG_INLINE JobParameters::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::open_vector_format::JobParameters& from_msg)
      : shielding_gas_directions_{visibility, arena, from.shielding_gas_directions_},
        material_feed_directions_{visibility, arena, from.material_feed_directions_},
        _cached_size_{0} {}

JobParameters::JobParameters(
    ::google::protobuf::Arena* arena,
    const JobParameters& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  JobParameters* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.preheating_temperatur_in_dg_c_ = from._impl_.preheating_temperatur_in_dg_c_;

  // @@protoc_insertion_point(copy_constructor:open_vector_format.JobParameters)
}
inline PROTOBUF_NDEBUG_INLINE JobParameters::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : shielding_gas_directions_{visibility, arena},
        material_feed_directions_{visibility, arena},
        _cached_size_{0} {}

inline void JobParameters::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.preheating_temperatur_in_dg_c_ = {};
}
JobParameters::~JobParameters() {
  // @@protoc_insertion_point(destructor:open_vector_format.JobParameters)
  SharedDtor(*this);
}
inline void JobParameters::SharedDtor(MessageLite& self) {
  JobParameters& this_ = static_cast<JobParameters&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* JobParameters::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) JobParameters(arena);
}
constexpr auto JobParameters::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(JobParameters, _impl_.shielding_gas_directions_) +
          decltype(JobParameters::_impl_.shielding_gas_directions_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(JobParameters, _impl_.material_feed_directions_) +
          decltype(JobParameters::_impl_.material_feed_directions_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(JobParameters), alignof(JobParameters), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&JobParameters::PlacementNew_,
                                 sizeof(JobParameters),
                                 alignof(JobParameters));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull JobParameters::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_JobParameters_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &JobParameters::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<JobParameters>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &JobParameters::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<JobParameters>(), &JobParameters::ByteSizeLong,
            &JobParameters::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(JobParameters, _impl_._cached_size_),
        false,
    },
    &JobParameters::kDescriptorMethods,
    &descriptor_table_open_5fvector_5fformat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* JobParameters::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> JobParameters::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::open_vector_format::JobParameters>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // double preheating_temperatur_in_dg_c = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(JobParameters, _impl_.preheating_temperatur_in_dg_c_)}},
    // repeated double shielding_gas_directions = 2;
    {::_pbi::TcParser::FastF64P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(JobParameters, _impl_.shielding_gas_directions_)}},
    // repeated double material_feed_directions = 3;
    {::_pbi::TcParser::FastF64P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(JobParameters, _impl_.material_feed_directions_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double preheating_temperatur_in_dg_c = 1;
    {PROTOBUF_FIELD_OFFSET(JobParameters, _impl_.preheating_temperatur_in_dg_c_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // repeated double shielding_gas_directions = 2;
    {PROTOBUF_FIELD_OFFSET(JobParameters, _impl_.shielding_gas_directions_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedDouble)},
    // repeated double material_feed_directions = 3;
    {PROTOBUF_FIELD_OFFSET(JobParameters, _impl_.material_feed_directions_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedDouble)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void JobParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.JobParameters)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.shielding_gas_directions_.Clear();
  _impl_.material_feed_directions_.Clear();
  _impl_.preheating_temperatur_in_dg_c_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* JobParameters::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const JobParameters& this_ = static_cast<const JobParameters&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* JobParameters::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const JobParameters& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.JobParameters)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // double preheating_temperatur_in_dg_c = 1;
          if (::absl::bit_cast<::uint64_t>(this_._internal_preheating_temperatur_in_dg_c()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                1, this_._internal_preheating_temperatur_in_dg_c(), target);
          }

          // repeated double shielding_gas_directions = 2;
          if (this_._internal_shielding_gas_directions_size() > 0) {
            target = stream->WriteFixedPacked(2, this_._internal_shielding_gas_directions(), target);
          }

          // repeated double material_feed_directions = 3;
          if (this_._internal_material_feed_directions_size() > 0) {
            target = stream->WriteFixedPacked(3, this_._internal_material_feed_directions(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.JobParameters)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t JobParameters::ByteSizeLong(const MessageLite& base) {
          const JobParameters& this_ = static_cast<const JobParameters&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t JobParameters::ByteSizeLong() const {
          const JobParameters& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:open_vector_format.JobParameters)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated double shielding_gas_directions = 2;
            {
              std::size_t data_size = std::size_t{8} *
                  ::_pbi::FromIntSize(this_._internal_shielding_gas_directions_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
            // repeated double material_feed_directions = 3;
            {
              std::size_t data_size = std::size_t{8} *
                  ::_pbi::FromIntSize(this_._internal_material_feed_directions_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
          }
           {
            // double preheating_temperatur_in_dg_c = 1;
            if (::absl::bit_cast<::uint64_t>(this_._internal_preheating_temperatur_in_dg_c()) != 0) {
              total_size += 9;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void JobParameters::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<JobParameters*>(&to_msg);
  auto& from = static_cast<const JobParameters&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.JobParameters)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_shielding_gas_directions()->MergeFrom(from._internal_shielding_gas_directions());
  _this->_internal_mutable_material_feed_directions()->MergeFrom(from._internal_material_feed_directions());
  if (::absl::bit_cast<::uint64_t>(from._internal_preheating_temperatur_in_dg_c()) != 0) {
    _this->_impl_.preheating_temperatur_in_dg_c_ = from._impl_.preheating_temperatur_in_dg_c_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void JobParameters::CopyFrom(const JobParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.JobParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void JobParameters::InternalSwap(JobParameters* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.shielding_gas_directions_.InternalSwap(&other->_impl_.shielding_gas_directions_);
  _impl_.material_feed_directions_.InternalSwap(&other->_impl_.material_feed_directions_);
        swap(_impl_.preheating_temperatur_in_dg_c_, other->_impl_.preheating_temperatur_in_dg_c_);
}

::google::protobuf::Metadata JobParameters::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MarkingParams::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MarkingParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_._has_bits_);
};

MarkingParams::MarkingParams(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.MarkingParams)
}
inline PROTOBUF_NDEBUG_INLINE MarkingParams::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::open_vector_format::MarkingParams& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        name_(arena, from.name_) {}

MarkingParams::MarkingParams(
    ::google::protobuf::Arena* arena,
    const MarkingParams& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MarkingParams* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.powergradient_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::open_vector_format::PowerGradientParams>(
                              arena, *from._impl_.powergradient_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, laser_power_in_w_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, laser_power_in_w_),
           offsetof(Impl_, beam_shape_profile_nr_) -
               offsetof(Impl_, laser_power_in_w_) +
               sizeof(Impl_::beam_shape_profile_nr_));

  // @@protoc_insertion_point(copy_constructor:open_vector_format.MarkingParams)
}
inline PROTOBUF_NDEBUG_INLINE MarkingParams::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        name_(arena) {}

inline void MarkingParams::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, powergradient_),
           0,
           offsetof(Impl_, beam_shape_profile_nr_) -
               offsetof(Impl_, powergradient_) +
               sizeof(Impl_::beam_shape_profile_nr_));
}
MarkingParams::~MarkingParams() {
  // @@protoc_insertion_point(destructor:open_vector_format.MarkingParams)
  SharedDtor(*this);
}
inline void MarkingParams::SharedDtor(MessageLite& self) {
  MarkingParams& this_ = static_cast<MarkingParams&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.name_.Destroy();
  delete this_._impl_.powergradient_;
  this_._impl_.~Impl_();
}

inline void* MarkingParams::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MarkingParams(arena);
}
constexpr auto MarkingParams::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(MarkingParams),
                                            alignof(MarkingParams));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MarkingParams::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MarkingParams_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MarkingParams::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MarkingParams>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MarkingParams::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MarkingParams>(), &MarkingParams::ByteSizeLong,
            &MarkingParams::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_._cached_size_),
        false,
    },
    &MarkingParams::kDescriptorMethods,
    &descriptor_table_open_5fvector_5fformat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MarkingParams::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 27, 1, 69, 2> MarkingParams::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_._has_bits_),
    0, // no _extensions_
    27, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4160749568,  // skipmap
    offsetof(decltype(_table_), field_entries),
    27,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::open_vector_format::MarkingParams>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float laser_power_in_w = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.laser_power_in_w_)}},
    // float laser_speed_in_mm_per_s = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.laser_speed_in_mm_per_s_)}},
    // float laser_focus_shift_in_mm = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.laser_focus_shift_in_mm_)}},
    // float point_exposure_time_in_us = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.point_exposure_time_in_us_)}},
    // float jump_speed_in_mm_s = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.jump_speed_in_mm_s_)}},
    // float point_exposure_repetitions = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.point_exposure_repetitions_)}},
    // uint64 repetition_rate_in_hz = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MarkingParams, _impl_.repetition_rate_in_hz_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.repetition_rate_in_hz_)}},
    // uint64 laser_pulses_per_burst = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MarkingParams, _impl_.laser_pulses_per_burst_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.laser_pulses_per_burst_)}},
    // uint64 pulseDurationInFemtoseconds = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MarkingParams, _impl_.pulsedurationinfemtoseconds_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.pulsedurationinfemtoseconds_)}},
    // .open_vector_format.MarkingParams.MarkingMode marking_mode = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MarkingParams, _impl_.marking_mode_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.marking_mode_)}},
    // float jump_delay_in_us = 11;
    {::_pbi::TcParser::FastF32S1,
     {93, 63, 0, PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.jump_delay_in_us_)}},
    // float laser_off_delay_in_us = 12;
    {::_pbi::TcParser::FastF32S1,
     {101, 63, 0, PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.laser_off_delay_in_us_)}},
    // float laser_on_delay_in_us = 13;
    {::_pbi::TcParser::FastF32S1,
     {109, 63, 0, PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.laser_on_delay_in_us_)}},
    // float mark_delay_in_us = 14;
    {::_pbi::TcParser::FastF32S1,
     {117, 63, 0, PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.mark_delay_in_us_)}},
    // float polygon_delay_in_us = 15;
    {::_pbi::TcParser::FastF32S1,
     {125, 63, 0, PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.polygon_delay_in_us_)}},
    // float time_lag_in_us = 16;
    {::_pbi::TcParser::FastF32S2,
     {389, 63, 0, PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.time_lag_in_us_)}},
    // float laser_on_shift_in_us = 17;
    {::_pbi::TcParser::FastF32S2,
     {397, 63, 0, PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.laser_on_shift_in_us_)}},
    // float limit = 18;
    {::_pbi::TcParser::FastF32S2,
     {405, 63, 0, PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.limit_)}},
    // float n_prev_in_us = 19;
    {::_pbi::TcParser::FastF32S2,
     {413, 63, 0, PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.n_prev_in_us_)}},
    // float n_post_in_us = 20;
    {::_pbi::TcParser::FastF32S2,
     {421, 63, 0, PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.n_post_in_us_)}},
    // float wob_frequency_in_hz = 21;
    {::_pbi::TcParser::FastF32S2,
     {429, 63, 0, PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.wob_frequency_in_hz_)}},
    // float wob_amp_long_in_mm = 22;
    {::_pbi::TcParser::FastF32S2,
     {437, 63, 0, PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.wob_amp_long_in_mm_)}},
    // float wob_amp_trans_in_mm = 23;
    {::_pbi::TcParser::FastF32S2,
     {445, 63, 0, PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.wob_amp_trans_in_mm_)}},
    // .open_vector_format.MarkingParams.WobbleMode wobble_mode = 24;
    {::_pbi::TcParser::FastV32S2,
     {448, 63, 0, PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.wobble_mode_)}},
    // .open_vector_format.PowerGradientParams powerGradient = 25;
    {::_pbi::TcParser::FastMtS2,
     {458, 0, 0, PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.powergradient_)}},
    // string name = 26;
    {::_pbi::TcParser::FastUS2,
     {466, 63, 0, PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.name_)}},
    // int32 beam_shape_profile_nr = 27;
    {::_pbi::TcParser::FastV32S2,
     {472, 63, 0, PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.beam_shape_profile_nr_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // float laser_power_in_w = 1;
    {PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.laser_power_in_w_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float laser_speed_in_mm_per_s = 2;
    {PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.laser_speed_in_mm_per_s_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float laser_focus_shift_in_mm = 3;
    {PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.laser_focus_shift_in_mm_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float point_exposure_time_in_us = 4;
    {PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.point_exposure_time_in_us_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float jump_speed_in_mm_s = 5;
    {PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.jump_speed_in_mm_s_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float point_exposure_repetitions = 6;
    {PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.point_exposure_repetitions_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // uint64 repetition_rate_in_hz = 7;
    {PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.repetition_rate_in_hz_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // uint64 laser_pulses_per_burst = 8;
    {PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.laser_pulses_per_burst_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // uint64 pulseDurationInFemtoseconds = 9;
    {PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.pulsedurationinfemtoseconds_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // .open_vector_format.MarkingParams.MarkingMode marking_mode = 10;
    {PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.marking_mode_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // float jump_delay_in_us = 11;
    {PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.jump_delay_in_us_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float laser_off_delay_in_us = 12;
    {PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.laser_off_delay_in_us_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float laser_on_delay_in_us = 13;
    {PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.laser_on_delay_in_us_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float mark_delay_in_us = 14;
    {PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.mark_delay_in_us_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float polygon_delay_in_us = 15;
    {PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.polygon_delay_in_us_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float time_lag_in_us = 16;
    {PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.time_lag_in_us_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float laser_on_shift_in_us = 17;
    {PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.laser_on_shift_in_us_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float limit = 18;
    {PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.limit_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float n_prev_in_us = 19;
    {PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.n_prev_in_us_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float n_post_in_us = 20;
    {PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.n_post_in_us_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float wob_frequency_in_hz = 21;
    {PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.wob_frequency_in_hz_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float wob_amp_long_in_mm = 22;
    {PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.wob_amp_long_in_mm_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float wob_amp_trans_in_mm = 23;
    {PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.wob_amp_trans_in_mm_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // .open_vector_format.MarkingParams.WobbleMode wobble_mode = 24;
    {PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.wobble_mode_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .open_vector_format.PowerGradientParams powerGradient = 25;
    {PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.powergradient_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string name = 26;
    {PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 beam_shape_profile_nr = 27;
    {PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.beam_shape_profile_nr_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::open_vector_format::PowerGradientParams>()},
  }}, {{
    "\40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\4\0\0\0\0\0"
    "open_vector_format.MarkingParams"
    "name"
  }},
};

PROTOBUF_NOINLINE void MarkingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.MarkingParams)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.powergradient_ != nullptr);
    _impl_.powergradient_->Clear();
  }
  ::memset(&_impl_.laser_power_in_w_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.beam_shape_profile_nr_) -
      reinterpret_cast<char*>(&_impl_.laser_power_in_w_)) + sizeof(_impl_.beam_shape_profile_nr_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MarkingParams::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MarkingParams& this_ = static_cast<const MarkingParams&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MarkingParams::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MarkingParams& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.MarkingParams)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float laser_power_in_w = 1;
          if (::absl::bit_cast<::uint32_t>(this_._internal_laser_power_in_w()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_laser_power_in_w(), target);
          }

          // float laser_speed_in_mm_per_s = 2;
          if (::absl::bit_cast<::uint32_t>(this_._internal_laser_speed_in_mm_per_s()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_laser_speed_in_mm_per_s(), target);
          }

          // float laser_focus_shift_in_mm = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_laser_focus_shift_in_mm()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_laser_focus_shift_in_mm(), target);
          }

          // float point_exposure_time_in_us = 4;
          if (::absl::bit_cast<::uint32_t>(this_._internal_point_exposure_time_in_us()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_point_exposure_time_in_us(), target);
          }

          // float jump_speed_in_mm_s = 5;
          if (::absl::bit_cast<::uint32_t>(this_._internal_jump_speed_in_mm_s()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                5, this_._internal_jump_speed_in_mm_s(), target);
          }

          // float point_exposure_repetitions = 6;
          if (::absl::bit_cast<::uint32_t>(this_._internal_point_exposure_repetitions()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                6, this_._internal_point_exposure_repetitions(), target);
          }

          // uint64 repetition_rate_in_hz = 7;
          if (this_._internal_repetition_rate_in_hz() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                7, this_._internal_repetition_rate_in_hz(), target);
          }

          // uint64 laser_pulses_per_burst = 8;
          if (this_._internal_laser_pulses_per_burst() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                8, this_._internal_laser_pulses_per_burst(), target);
          }

          // uint64 pulseDurationInFemtoseconds = 9;
          if (this_._internal_pulsedurationinfemtoseconds() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                9, this_._internal_pulsedurationinfemtoseconds(), target);
          }

          // .open_vector_format.MarkingParams.MarkingMode marking_mode = 10;
          if (this_._internal_marking_mode() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                10, this_._internal_marking_mode(), target);
          }

          // float jump_delay_in_us = 11;
          if (::absl::bit_cast<::uint32_t>(this_._internal_jump_delay_in_us()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                11, this_._internal_jump_delay_in_us(), target);
          }

          // float laser_off_delay_in_us = 12;
          if (::absl::bit_cast<::uint32_t>(this_._internal_laser_off_delay_in_us()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                12, this_._internal_laser_off_delay_in_us(), target);
          }

          // float laser_on_delay_in_us = 13;
          if (::absl::bit_cast<::uint32_t>(this_._internal_laser_on_delay_in_us()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                13, this_._internal_laser_on_delay_in_us(), target);
          }

          // float mark_delay_in_us = 14;
          if (::absl::bit_cast<::uint32_t>(this_._internal_mark_delay_in_us()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                14, this_._internal_mark_delay_in_us(), target);
          }

          // float polygon_delay_in_us = 15;
          if (::absl::bit_cast<::uint32_t>(this_._internal_polygon_delay_in_us()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                15, this_._internal_polygon_delay_in_us(), target);
          }

          // float time_lag_in_us = 16;
          if (::absl::bit_cast<::uint32_t>(this_._internal_time_lag_in_us()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                16, this_._internal_time_lag_in_us(), target);
          }

          // float laser_on_shift_in_us = 17;
          if (::absl::bit_cast<::uint32_t>(this_._internal_laser_on_shift_in_us()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                17, this_._internal_laser_on_shift_in_us(), target);
          }

          // float limit = 18;
          if (::absl::bit_cast<::uint32_t>(this_._internal_limit()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                18, this_._internal_limit(), target);
          }

          // float n_prev_in_us = 19;
          if (::absl::bit_cast<::uint32_t>(this_._internal_n_prev_in_us()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                19, this_._internal_n_prev_in_us(), target);
          }

          // float n_post_in_us = 20;
          if (::absl::bit_cast<::uint32_t>(this_._internal_n_post_in_us()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                20, this_._internal_n_post_in_us(), target);
          }

          // float wob_frequency_in_hz = 21;
          if (::absl::bit_cast<::uint32_t>(this_._internal_wob_frequency_in_hz()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                21, this_._internal_wob_frequency_in_hz(), target);
          }

          // float wob_amp_long_in_mm = 22;
          if (::absl::bit_cast<::uint32_t>(this_._internal_wob_amp_long_in_mm()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                22, this_._internal_wob_amp_long_in_mm(), target);
          }

          // float wob_amp_trans_in_mm = 23;
          if (::absl::bit_cast<::uint32_t>(this_._internal_wob_amp_trans_in_mm()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                23, this_._internal_wob_amp_trans_in_mm(), target);
          }

          // .open_vector_format.MarkingParams.WobbleMode wobble_mode = 24;
          if (this_._internal_wobble_mode() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                24, this_._internal_wobble_mode(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .open_vector_format.PowerGradientParams powerGradient = 25;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                25, *this_._impl_.powergradient_, this_._impl_.powergradient_->GetCachedSize(), target,
                stream);
          }

          // string name = 26;
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "open_vector_format.MarkingParams.name");
            target = stream->WriteStringMaybeAliased(26, _s, target);
          }

          // int32 beam_shape_profile_nr = 27;
          if (this_._internal_beam_shape_profile_nr() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                27, this_._internal_beam_shape_profile_nr(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.MarkingParams)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MarkingParams::ByteSizeLong(const MessageLite& base) {
          const MarkingParams& this_ = static_cast<const MarkingParams&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MarkingParams::ByteSizeLong() const {
          const MarkingParams& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:open_vector_format.MarkingParams)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string name = 26;
            if (!this_._internal_name().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
          }
           {
            // .open_vector_format.PowerGradientParams powerGradient = 25;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.powergradient_);
            }
          }
           {
            // float laser_power_in_w = 1;
            if (::absl::bit_cast<::uint32_t>(this_._internal_laser_power_in_w()) != 0) {
              total_size += 5;
            }
            // float laser_speed_in_mm_per_s = 2;
            if (::absl::bit_cast<::uint32_t>(this_._internal_laser_speed_in_mm_per_s()) != 0) {
              total_size += 5;
            }
            // float laser_focus_shift_in_mm = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_laser_focus_shift_in_mm()) != 0) {
              total_size += 5;
            }
            // float point_exposure_time_in_us = 4;
            if (::absl::bit_cast<::uint32_t>(this_._internal_point_exposure_time_in_us()) != 0) {
              total_size += 5;
            }
            // float jump_speed_in_mm_s = 5;
            if (::absl::bit_cast<::uint32_t>(this_._internal_jump_speed_in_mm_s()) != 0) {
              total_size += 5;
            }
            // float point_exposure_repetitions = 6;
            if (::absl::bit_cast<::uint32_t>(this_._internal_point_exposure_repetitions()) != 0) {
              total_size += 5;
            }
            // uint64 repetition_rate_in_hz = 7;
            if (this_._internal_repetition_rate_in_hz() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_repetition_rate_in_hz());
            }
            // uint64 laser_pulses_per_burst = 8;
            if (this_._internal_laser_pulses_per_burst() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_laser_pulses_per_burst());
            }
            // uint64 pulseDurationInFemtoseconds = 9;
            if (this_._internal_pulsedurationinfemtoseconds() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_pulsedurationinfemtoseconds());
            }
            // .open_vector_format.MarkingParams.MarkingMode marking_mode = 10;
            if (this_._internal_marking_mode() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_marking_mode());
            }
            // float jump_delay_in_us = 11;
            if (::absl::bit_cast<::uint32_t>(this_._internal_jump_delay_in_us()) != 0) {
              total_size += 5;
            }
            // float laser_off_delay_in_us = 12;
            if (::absl::bit_cast<::uint32_t>(this_._internal_laser_off_delay_in_us()) != 0) {
              total_size += 5;
            }
            // float laser_on_delay_in_us = 13;
            if (::absl::bit_cast<::uint32_t>(this_._internal_laser_on_delay_in_us()) != 0) {
              total_size += 5;
            }
            // float mark_delay_in_us = 14;
            if (::absl::bit_cast<::uint32_t>(this_._internal_mark_delay_in_us()) != 0) {
              total_size += 5;
            }
            // float polygon_delay_in_us = 15;
            if (::absl::bit_cast<::uint32_t>(this_._internal_polygon_delay_in_us()) != 0) {
              total_size += 5;
            }
            // float time_lag_in_us = 16;
            if (::absl::bit_cast<::uint32_t>(this_._internal_time_lag_in_us()) != 0) {
              total_size += 6;
            }
            // float laser_on_shift_in_us = 17;
            if (::absl::bit_cast<::uint32_t>(this_._internal_laser_on_shift_in_us()) != 0) {
              total_size += 6;
            }
            // float limit = 18;
            if (::absl::bit_cast<::uint32_t>(this_._internal_limit()) != 0) {
              total_size += 6;
            }
            // float n_prev_in_us = 19;
            if (::absl::bit_cast<::uint32_t>(this_._internal_n_prev_in_us()) != 0) {
              total_size += 6;
            }
            // float n_post_in_us = 20;
            if (::absl::bit_cast<::uint32_t>(this_._internal_n_post_in_us()) != 0) {
              total_size += 6;
            }
            // float wob_frequency_in_hz = 21;
            if (::absl::bit_cast<::uint32_t>(this_._internal_wob_frequency_in_hz()) != 0) {
              total_size += 6;
            }
            // float wob_amp_long_in_mm = 22;
            if (::absl::bit_cast<::uint32_t>(this_._internal_wob_amp_long_in_mm()) != 0) {
              total_size += 6;
            }
            // float wob_amp_trans_in_mm = 23;
            if (::absl::bit_cast<::uint32_t>(this_._internal_wob_amp_trans_in_mm()) != 0) {
              total_size += 6;
            }
            // .open_vector_format.MarkingParams.WobbleMode wobble_mode = 24;
            if (this_._internal_wobble_mode() != 0) {
              total_size += 2 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_wobble_mode());
            }
            // int32 beam_shape_profile_nr = 27;
            if (this_._internal_beam_shape_profile_nr() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_beam_shape_profile_nr());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MarkingParams::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MarkingParams*>(&to_msg);
  auto& from = static_cast<const MarkingParams&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.MarkingParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.powergradient_ != nullptr);
    if (_this->_impl_.powergradient_ == nullptr) {
      _this->_impl_.powergradient_ =
          ::google::protobuf::Message::CopyConstruct<::open_vector_format::PowerGradientParams>(arena, *from._impl_.powergradient_);
    } else {
      _this->_impl_.powergradient_->MergeFrom(*from._impl_.powergradient_);
    }
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_laser_power_in_w()) != 0) {
    _this->_impl_.laser_power_in_w_ = from._impl_.laser_power_in_w_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_laser_speed_in_mm_per_s()) != 0) {
    _this->_impl_.laser_speed_in_mm_per_s_ = from._impl_.laser_speed_in_mm_per_s_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_laser_focus_shift_in_mm()) != 0) {
    _this->_impl_.laser_focus_shift_in_mm_ = from._impl_.laser_focus_shift_in_mm_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_point_exposure_time_in_us()) != 0) {
    _this->_impl_.point_exposure_time_in_us_ = from._impl_.point_exposure_time_in_us_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_jump_speed_in_mm_s()) != 0) {
    _this->_impl_.jump_speed_in_mm_s_ = from._impl_.jump_speed_in_mm_s_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_point_exposure_repetitions()) != 0) {
    _this->_impl_.point_exposure_repetitions_ = from._impl_.point_exposure_repetitions_;
  }
  if (from._internal_repetition_rate_in_hz() != 0) {
    _this->_impl_.repetition_rate_in_hz_ = from._impl_.repetition_rate_in_hz_;
  }
  if (from._internal_laser_pulses_per_burst() != 0) {
    _this->_impl_.laser_pulses_per_burst_ = from._impl_.laser_pulses_per_burst_;
  }
  if (from._internal_pulsedurationinfemtoseconds() != 0) {
    _this->_impl_.pulsedurationinfemtoseconds_ = from._impl_.pulsedurationinfemtoseconds_;
  }
  if (from._internal_marking_mode() != 0) {
    _this->_impl_.marking_mode_ = from._impl_.marking_mode_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_jump_delay_in_us()) != 0) {
    _this->_impl_.jump_delay_in_us_ = from._impl_.jump_delay_in_us_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_laser_off_delay_in_us()) != 0) {
    _this->_impl_.laser_off_delay_in_us_ = from._impl_.laser_off_delay_in_us_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_laser_on_delay_in_us()) != 0) {
    _this->_impl_.laser_on_delay_in_us_ = from._impl_.laser_on_delay_in_us_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_mark_delay_in_us()) != 0) {
    _this->_impl_.mark_delay_in_us_ = from._impl_.mark_delay_in_us_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_polygon_delay_in_us()) != 0) {
    _this->_impl_.polygon_delay_in_us_ = from._impl_.polygon_delay_in_us_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_time_lag_in_us()) != 0) {
    _this->_impl_.time_lag_in_us_ = from._impl_.time_lag_in_us_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_laser_on_shift_in_us()) != 0) {
    _this->_impl_.laser_on_shift_in_us_ = from._impl_.laser_on_shift_in_us_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_limit()) != 0) {
    _this->_impl_.limit_ = from._impl_.limit_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_n_prev_in_us()) != 0) {
    _this->_impl_.n_prev_in_us_ = from._impl_.n_prev_in_us_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_n_post_in_us()) != 0) {
    _this->_impl_.n_post_in_us_ = from._impl_.n_post_in_us_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_wob_frequency_in_hz()) != 0) {
    _this->_impl_.wob_frequency_in_hz_ = from._impl_.wob_frequency_in_hz_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_wob_amp_long_in_mm()) != 0) {
    _this->_impl_.wob_amp_long_in_mm_ = from._impl_.wob_amp_long_in_mm_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_wob_amp_trans_in_mm()) != 0) {
    _this->_impl_.wob_amp_trans_in_mm_ = from._impl_.wob_amp_trans_in_mm_;
  }
  if (from._internal_wobble_mode() != 0) {
    _this->_impl_.wobble_mode_ = from._impl_.wobble_mode_;
  }
  if (from._internal_beam_shape_profile_nr() != 0) {
    _this->_impl_.beam_shape_profile_nr_ = from._impl_.beam_shape_profile_nr_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MarkingParams::CopyFrom(const MarkingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.MarkingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MarkingParams::InternalSwap(MarkingParams* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.beam_shape_profile_nr_)
      + sizeof(MarkingParams::_impl_.beam_shape_profile_nr_)
      - PROTOBUF_FIELD_OFFSET(MarkingParams, _impl_.powergradient_)>(
          reinterpret_cast<char*>(&_impl_.powergradient_),
          reinterpret_cast<char*>(&other->_impl_.powergradient_));
}

::google::protobuf::Metadata MarkingParams::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PowerGradientParams::_Internal {
 public:
};

PowerGradientParams::PowerGradientParams(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.PowerGradientParams)
}
PowerGradientParams::PowerGradientParams(
    ::google::protobuf::Arena* arena, const PowerGradientParams& from)
    : PowerGradientParams(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE PowerGradientParams::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PowerGradientParams::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, minpowerinw_),
           0,
           offsetof(Impl_, gradientinwpers_) -
               offsetof(Impl_, minpowerinw_) +
               sizeof(Impl_::gradientinwpers_));
}
PowerGradientParams::~PowerGradientParams() {
  // @@protoc_insertion_point(destructor:open_vector_format.PowerGradientParams)
  SharedDtor(*this);
}
inline void PowerGradientParams::SharedDtor(MessageLite& self) {
  PowerGradientParams& this_ = static_cast<PowerGradientParams&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PowerGradientParams::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PowerGradientParams(arena);
}
constexpr auto PowerGradientParams::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PowerGradientParams),
                                            alignof(PowerGradientParams));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PowerGradientParams::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PowerGradientParams_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PowerGradientParams::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PowerGradientParams>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PowerGradientParams::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PowerGradientParams>(), &PowerGradientParams::ByteSizeLong,
            &PowerGradientParams::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PowerGradientParams, _impl_._cached_size_),
        false,
    },
    &PowerGradientParams::kDescriptorMethods,
    &descriptor_table_open_5fvector_5fformat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PowerGradientParams::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> PowerGradientParams::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::open_vector_format::PowerGradientParams>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // float gradientInWPerS = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(PowerGradientParams, _impl_.gradientinwpers_)}},
    // float minPowerInW = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(PowerGradientParams, _impl_.minpowerinw_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float minPowerInW = 1;
    {PROTOBUF_FIELD_OFFSET(PowerGradientParams, _impl_.minpowerinw_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float gradientInWPerS = 2;
    {PROTOBUF_FIELD_OFFSET(PowerGradientParams, _impl_.gradientinwpers_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void PowerGradientParams::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.PowerGradientParams)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.minpowerinw_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.gradientinwpers_) -
      reinterpret_cast<char*>(&_impl_.minpowerinw_)) + sizeof(_impl_.gradientinwpers_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PowerGradientParams::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PowerGradientParams& this_ = static_cast<const PowerGradientParams&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PowerGradientParams::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PowerGradientParams& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.PowerGradientParams)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float minPowerInW = 1;
          if (::absl::bit_cast<::uint32_t>(this_._internal_minpowerinw()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_minpowerinw(), target);
          }

          // float gradientInWPerS = 2;
          if (::absl::bit_cast<::uint32_t>(this_._internal_gradientinwpers()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_gradientinwpers(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.PowerGradientParams)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PowerGradientParams::ByteSizeLong(const MessageLite& base) {
          const PowerGradientParams& this_ = static_cast<const PowerGradientParams&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PowerGradientParams::ByteSizeLong() const {
          const PowerGradientParams& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:open_vector_format.PowerGradientParams)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // float minPowerInW = 1;
            if (::absl::bit_cast<::uint32_t>(this_._internal_minpowerinw()) != 0) {
              total_size += 5;
            }
            // float gradientInWPerS = 2;
            if (::absl::bit_cast<::uint32_t>(this_._internal_gradientinwpers()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PowerGradientParams::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PowerGradientParams*>(&to_msg);
  auto& from = static_cast<const PowerGradientParams&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.PowerGradientParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint32_t>(from._internal_minpowerinw()) != 0) {
    _this->_impl_.minpowerinw_ = from._impl_.minpowerinw_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_gradientinwpers()) != 0) {
    _this->_impl_.gradientinwpers_ = from._impl_.gradientinwpers_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PowerGradientParams::CopyFrom(const PowerGradientParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.PowerGradientParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PowerGradientParams::InternalSwap(PowerGradientParams* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PowerGradientParams, _impl_.gradientinwpers_)
      + sizeof(PowerGradientParams::_impl_.gradientinwpers_)
      - PROTOBUF_FIELD_OFFSET(PowerGradientParams, _impl_.minpowerinw_)>(
          reinterpret_cast<char*>(&_impl_.minpowerinw_),
          reinterpret_cast<char*>(&other->_impl_.minpowerinw_));
}

::google::protobuf::Metadata PowerGradientParams::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Part_GeometryInfo::_Internal {
 public:
};

Part_GeometryInfo::Part_GeometryInfo(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.Part.GeometryInfo)
}
Part_GeometryInfo::Part_GeometryInfo(
    ::google::protobuf::Arena* arena, const Part_GeometryInfo& from)
    : Part_GeometryInfo(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Part_GeometryInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Part_GeometryInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, volume_in_mm3_),
           0,
           offsetof(Impl_, projected_surface_in_mm2_) -
               offsetof(Impl_, volume_in_mm3_) +
               sizeof(Impl_::projected_surface_in_mm2_));
}
Part_GeometryInfo::~Part_GeometryInfo() {
  // @@protoc_insertion_point(destructor:open_vector_format.Part.GeometryInfo)
  SharedDtor(*this);
}
inline void Part_GeometryInfo::SharedDtor(MessageLite& self) {
  Part_GeometryInfo& this_ = static_cast<Part_GeometryInfo&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* Part_GeometryInfo::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Part_GeometryInfo(arena);
}
constexpr auto Part_GeometryInfo::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Part_GeometryInfo),
                                            alignof(Part_GeometryInfo));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Part_GeometryInfo::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Part_GeometryInfo_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Part_GeometryInfo::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Part_GeometryInfo>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Part_GeometryInfo::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Part_GeometryInfo>(), &Part_GeometryInfo::ByteSizeLong,
            &Part_GeometryInfo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Part_GeometryInfo, _impl_._cached_size_),
        false,
    },
    &Part_GeometryInfo::kDescriptorMethods,
    &descriptor_table_open_5fvector_5fformat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Part_GeometryInfo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 0, 2> Part_GeometryInfo::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::open_vector_format::Part_GeometryInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // double volume_in_mm3 = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(Part_GeometryInfo, _impl_.volume_in_mm3_)}},
    // double support_volume_in_mm3 = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(Part_GeometryInfo, _impl_.support_volume_in_mm3_)}},
    // double build_height_in_mm = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(Part_GeometryInfo, _impl_.build_height_in_mm_)}},
    // double surface_area_in_mm2 = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 63, 0, PROTOBUF_FIELD_OFFSET(Part_GeometryInfo, _impl_.surface_area_in_mm2_)}},
    // double projected_surface_in_mm2 = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 63, 0, PROTOBUF_FIELD_OFFSET(Part_GeometryInfo, _impl_.projected_surface_in_mm2_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // double volume_in_mm3 = 1;
    {PROTOBUF_FIELD_OFFSET(Part_GeometryInfo, _impl_.volume_in_mm3_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double support_volume_in_mm3 = 2;
    {PROTOBUF_FIELD_OFFSET(Part_GeometryInfo, _impl_.support_volume_in_mm3_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double build_height_in_mm = 3;
    {PROTOBUF_FIELD_OFFSET(Part_GeometryInfo, _impl_.build_height_in_mm_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double surface_area_in_mm2 = 4;
    {PROTOBUF_FIELD_OFFSET(Part_GeometryInfo, _impl_.surface_area_in_mm2_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double projected_surface_in_mm2 = 5;
    {PROTOBUF_FIELD_OFFSET(Part_GeometryInfo, _impl_.projected_surface_in_mm2_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Part_GeometryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.Part.GeometryInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.volume_in_mm3_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.projected_surface_in_mm2_) -
      reinterpret_cast<char*>(&_impl_.volume_in_mm3_)) + sizeof(_impl_.projected_surface_in_mm2_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Part_GeometryInfo::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Part_GeometryInfo& this_ = static_cast<const Part_GeometryInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Part_GeometryInfo::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Part_GeometryInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.Part.GeometryInfo)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // double volume_in_mm3 = 1;
          if (::absl::bit_cast<::uint64_t>(this_._internal_volume_in_mm3()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                1, this_._internal_volume_in_mm3(), target);
          }

          // double support_volume_in_mm3 = 2;
          if (::absl::bit_cast<::uint64_t>(this_._internal_support_volume_in_mm3()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                2, this_._internal_support_volume_in_mm3(), target);
          }

          // double build_height_in_mm = 3;
          if (::absl::bit_cast<::uint64_t>(this_._internal_build_height_in_mm()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                3, this_._internal_build_height_in_mm(), target);
          }

          // double surface_area_in_mm2 = 4;
          if (::absl::bit_cast<::uint64_t>(this_._internal_surface_area_in_mm2()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                4, this_._internal_surface_area_in_mm2(), target);
          }

          // double projected_surface_in_mm2 = 5;
          if (::absl::bit_cast<::uint64_t>(this_._internal_projected_surface_in_mm2()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                5, this_._internal_projected_surface_in_mm2(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.Part.GeometryInfo)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Part_GeometryInfo::ByteSizeLong(const MessageLite& base) {
          const Part_GeometryInfo& this_ = static_cast<const Part_GeometryInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Part_GeometryInfo::ByteSizeLong() const {
          const Part_GeometryInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:open_vector_format.Part.GeometryInfo)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // double volume_in_mm3 = 1;
            if (::absl::bit_cast<::uint64_t>(this_._internal_volume_in_mm3()) != 0) {
              total_size += 9;
            }
            // double support_volume_in_mm3 = 2;
            if (::absl::bit_cast<::uint64_t>(this_._internal_support_volume_in_mm3()) != 0) {
              total_size += 9;
            }
            // double build_height_in_mm = 3;
            if (::absl::bit_cast<::uint64_t>(this_._internal_build_height_in_mm()) != 0) {
              total_size += 9;
            }
            // double surface_area_in_mm2 = 4;
            if (::absl::bit_cast<::uint64_t>(this_._internal_surface_area_in_mm2()) != 0) {
              total_size += 9;
            }
            // double projected_surface_in_mm2 = 5;
            if (::absl::bit_cast<::uint64_t>(this_._internal_projected_surface_in_mm2()) != 0) {
              total_size += 9;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Part_GeometryInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Part_GeometryInfo*>(&to_msg);
  auto& from = static_cast<const Part_GeometryInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.Part.GeometryInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint64_t>(from._internal_volume_in_mm3()) != 0) {
    _this->_impl_.volume_in_mm3_ = from._impl_.volume_in_mm3_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_support_volume_in_mm3()) != 0) {
    _this->_impl_.support_volume_in_mm3_ = from._impl_.support_volume_in_mm3_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_build_height_in_mm()) != 0) {
    _this->_impl_.build_height_in_mm_ = from._impl_.build_height_in_mm_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_surface_area_in_mm2()) != 0) {
    _this->_impl_.surface_area_in_mm2_ = from._impl_.surface_area_in_mm2_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_projected_surface_in_mm2()) != 0) {
    _this->_impl_.projected_surface_in_mm2_ = from._impl_.projected_surface_in_mm2_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Part_GeometryInfo::CopyFrom(const Part_GeometryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.Part.GeometryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Part_GeometryInfo::InternalSwap(Part_GeometryInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Part_GeometryInfo, _impl_.projected_surface_in_mm2_)
      + sizeof(Part_GeometryInfo::_impl_.projected_surface_in_mm2_)
      - PROTOBUF_FIELD_OFFSET(Part_GeometryInfo, _impl_.volume_in_mm3_)>(
          reinterpret_cast<char*>(&_impl_.volume_in_mm3_),
          reinterpret_cast<char*>(&other->_impl_.volume_in_mm3_));
}

::google::protobuf::Metadata Part_GeometryInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Part_Material::_Internal {
 public:
};

Part_Material::Part_Material(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.Part.Material)
}
inline PROTOBUF_NDEBUG_INLINE Part_Material::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::open_vector_format::Part_Material& from_msg)
      : name_(arena, from.name_),
        _cached_size_{0} {}

Part_Material::Part_Material(
    ::google::protobuf::Arena* arena,
    const Part_Material& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Part_Material* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.id_ = from._impl_.id_;

  // @@protoc_insertion_point(copy_constructor:open_vector_format.Part.Material)
}
inline PROTOBUF_NDEBUG_INLINE Part_Material::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : name_(arena),
        _cached_size_{0} {}

inline void Part_Material::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.id_ = {};
}
Part_Material::~Part_Material() {
  // @@protoc_insertion_point(destructor:open_vector_format.Part.Material)
  SharedDtor(*this);
}
inline void Part_Material::SharedDtor(MessageLite& self) {
  Part_Material& this_ = static_cast<Part_Material&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.name_.Destroy();
  this_._impl_.~Impl_();
}

inline void* Part_Material::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Part_Material(arena);
}
constexpr auto Part_Material::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Part_Material),
                                            alignof(Part_Material));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Part_Material::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Part_Material_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Part_Material::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Part_Material>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Part_Material::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Part_Material>(), &Part_Material::ByteSizeLong,
            &Part_Material::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Part_Material, _impl_._cached_size_),
        false,
    },
    &Part_Material::kDescriptorMethods,
    &descriptor_table_open_5fvector_5fformat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Part_Material::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 45, 2> Part_Material::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::open_vector_format::Part_Material>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Part_Material, _impl_.name_)}},
    // uint64 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Part_Material, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Part_Material, _impl_.id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint64 id = 1;
    {PROTOBUF_FIELD_OFFSET(Part_Material, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // string name = 2;
    {PROTOBUF_FIELD_OFFSET(Part_Material, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\40\0\4\0\0\0\0\0"
    "open_vector_format.Part.Material"
    "name"
  }},
};

PROTOBUF_NOINLINE void Part_Material::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.Part.Material)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.id_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Part_Material::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Part_Material& this_ = static_cast<const Part_Material&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Part_Material::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Part_Material& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.Part.Material)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint64 id = 1;
          if (this_._internal_id() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                1, this_._internal_id(), target);
          }

          // string name = 2;
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "open_vector_format.Part.Material.name");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.Part.Material)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Part_Material::ByteSizeLong(const MessageLite& base) {
          const Part_Material& this_ = static_cast<const Part_Material&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Part_Material::ByteSizeLong() const {
          const Part_Material& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:open_vector_format.Part.Material)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string name = 2;
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
            // uint64 id = 1;
            if (this_._internal_id() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_id());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Part_Material::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Part_Material*>(&to_msg);
  auto& from = static_cast<const Part_Material&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.Part.Material)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_id() != 0) {
    _this->_impl_.id_ = from._impl_.id_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Part_Material::CopyFrom(const Part_Material& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.Part.Material)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Part_Material::InternalSwap(Part_Material* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
        swap(_impl_.id_, other->_impl_.id_);
}

::google::protobuf::Metadata Part_Material::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Part_ProcessStrategy_ProprietaryParam::_Internal {
 public:
};

Part_ProcessStrategy_ProprietaryParam::Part_ProcessStrategy_ProprietaryParam(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.Part.ProcessStrategy.ProprietaryParam)
}
inline PROTOBUF_NDEBUG_INLINE Part_ProcessStrategy_ProprietaryParam::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::open_vector_format::Part_ProcessStrategy_ProprietaryParam& from_msg)
      : param_name_(arena, from.param_name_),
        param_description_(arena, from.param_description_),
        _cached_size_{0} {}

Part_ProcessStrategy_ProprietaryParam::Part_ProcessStrategy_ProprietaryParam(
    ::google::protobuf::Arena* arena,
    const Part_ProcessStrategy_ProprietaryParam& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Part_ProcessStrategy_ProprietaryParam* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.param_value_ = from._impl_.param_value_;

  // @@protoc_insertion_point(copy_constructor:open_vector_format.Part.ProcessStrategy.ProprietaryParam)
}
inline PROTOBUF_NDEBUG_INLINE Part_ProcessStrategy_ProprietaryParam::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : param_name_(arena),
        param_description_(arena),
        _cached_size_{0} {}

inline void Part_ProcessStrategy_ProprietaryParam::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.param_value_ = {};
}
Part_ProcessStrategy_ProprietaryParam::~Part_ProcessStrategy_ProprietaryParam() {
  // @@protoc_insertion_point(destructor:open_vector_format.Part.ProcessStrategy.ProprietaryParam)
  SharedDtor(*this);
}
inline void Part_ProcessStrategy_ProprietaryParam::SharedDtor(MessageLite& self) {
  Part_ProcessStrategy_ProprietaryParam& this_ = static_cast<Part_ProcessStrategy_ProprietaryParam&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.param_name_.Destroy();
  this_._impl_.param_description_.Destroy();
  this_._impl_.~Impl_();
}

inline void* Part_ProcessStrategy_ProprietaryParam::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Part_ProcessStrategy_ProprietaryParam(arena);
}
constexpr auto Part_ProcessStrategy_ProprietaryParam::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Part_ProcessStrategy_ProprietaryParam),
                                            alignof(Part_ProcessStrategy_ProprietaryParam));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Part_ProcessStrategy_ProprietaryParam::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Part_ProcessStrategy_ProprietaryParam_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Part_ProcessStrategy_ProprietaryParam::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Part_ProcessStrategy_ProprietaryParam>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Part_ProcessStrategy_ProprietaryParam::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Part_ProcessStrategy_ProprietaryParam>(), &Part_ProcessStrategy_ProprietaryParam::ByteSizeLong,
            &Part_ProcessStrategy_ProprietaryParam::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Part_ProcessStrategy_ProprietaryParam, _impl_._cached_size_),
        false,
    },
    &Part_ProcessStrategy_ProprietaryParam::kDescriptorMethods,
    &descriptor_table_open_5fvector_5fformat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Part_ProcessStrategy_ProprietaryParam::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 92, 2> Part_ProcessStrategy_ProprietaryParam::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::open_vector_format::Part_ProcessStrategy_ProprietaryParam>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string param_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Part_ProcessStrategy_ProprietaryParam, _impl_.param_name_)}},
    // double param_value = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(Part_ProcessStrategy_ProprietaryParam, _impl_.param_value_)}},
    // string param_description = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Part_ProcessStrategy_ProprietaryParam, _impl_.param_description_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string param_name = 1;
    {PROTOBUF_FIELD_OFFSET(Part_ProcessStrategy_ProprietaryParam, _impl_.param_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double param_value = 2;
    {PROTOBUF_FIELD_OFFSET(Part_ProcessStrategy_ProprietaryParam, _impl_.param_value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // string param_description = 3;
    {PROTOBUF_FIELD_OFFSET(Part_ProcessStrategy_ProprietaryParam, _impl_.param_description_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\70\12\0\21\0\0\0\0"
    "open_vector_format.Part.ProcessStrategy.ProprietaryParam"
    "param_name"
    "param_description"
  }},
};

PROTOBUF_NOINLINE void Part_ProcessStrategy_ProprietaryParam::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.Part.ProcessStrategy.ProprietaryParam)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.param_name_.ClearToEmpty();
  _impl_.param_description_.ClearToEmpty();
  _impl_.param_value_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Part_ProcessStrategy_ProprietaryParam::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Part_ProcessStrategy_ProprietaryParam& this_ = static_cast<const Part_ProcessStrategy_ProprietaryParam&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Part_ProcessStrategy_ProprietaryParam::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Part_ProcessStrategy_ProprietaryParam& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.Part.ProcessStrategy.ProprietaryParam)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string param_name = 1;
          if (!this_._internal_param_name().empty()) {
            const std::string& _s = this_._internal_param_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "open_vector_format.Part.ProcessStrategy.ProprietaryParam.param_name");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // double param_value = 2;
          if (::absl::bit_cast<::uint64_t>(this_._internal_param_value()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                2, this_._internal_param_value(), target);
          }

          // string param_description = 3;
          if (!this_._internal_param_description().empty()) {
            const std::string& _s = this_._internal_param_description();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "open_vector_format.Part.ProcessStrategy.ProprietaryParam.param_description");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.Part.ProcessStrategy.ProprietaryParam)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Part_ProcessStrategy_ProprietaryParam::ByteSizeLong(const MessageLite& base) {
          const Part_ProcessStrategy_ProprietaryParam& this_ = static_cast<const Part_ProcessStrategy_ProprietaryParam&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Part_ProcessStrategy_ProprietaryParam::ByteSizeLong() const {
          const Part_ProcessStrategy_ProprietaryParam& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:open_vector_format.Part.ProcessStrategy.ProprietaryParam)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string param_name = 1;
            if (!this_._internal_param_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_param_name());
            }
            // string param_description = 3;
            if (!this_._internal_param_description().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_param_description());
            }
            // double param_value = 2;
            if (::absl::bit_cast<::uint64_t>(this_._internal_param_value()) != 0) {
              total_size += 9;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Part_ProcessStrategy_ProprietaryParam::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Part_ProcessStrategy_ProprietaryParam*>(&to_msg);
  auto& from = static_cast<const Part_ProcessStrategy_ProprietaryParam&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.Part.ProcessStrategy.ProprietaryParam)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_param_name().empty()) {
    _this->_internal_set_param_name(from._internal_param_name());
  }
  if (!from._internal_param_description().empty()) {
    _this->_internal_set_param_description(from._internal_param_description());
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_param_value()) != 0) {
    _this->_impl_.param_value_ = from._impl_.param_value_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Part_ProcessStrategy_ProprietaryParam::CopyFrom(const Part_ProcessStrategy_ProprietaryParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.Part.ProcessStrategy.ProprietaryParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Part_ProcessStrategy_ProprietaryParam::InternalSwap(Part_ProcessStrategy_ProprietaryParam* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.param_name_, &other->_impl_.param_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.param_description_, &other->_impl_.param_description_, arena);
        swap(_impl_.param_value_, other->_impl_.param_value_);
}

::google::protobuf::Metadata Part_ProcessStrategy_ProprietaryParam::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Part_ProcessStrategy::_Internal {
 public:
};

Part_ProcessStrategy::Part_ProcessStrategy(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.Part.ProcessStrategy)
}
inline PROTOBUF_NDEBUG_INLINE Part_ProcessStrategy::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::open_vector_format::Part_ProcessStrategy& from_msg)
      : additional_parameters_{visibility, arena, from.additional_parameters_},
        name_(arena, from.name_),
        _cached_size_{0} {}

Part_ProcessStrategy::Part_ProcessStrategy(
    ::google::protobuf::Arena* arena,
    const Part_ProcessStrategy& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Part_ProcessStrategy* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, rot_angle_in_deg_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, rot_angle_in_deg_),
           offsetof(Impl_, pattern_hatch_length_in_mm_) -
               offsetof(Impl_, rot_angle_in_deg_) +
               sizeof(Impl_::pattern_hatch_length_in_mm_));

  // @@protoc_insertion_point(copy_constructor:open_vector_format.Part.ProcessStrategy)
}
inline PROTOBUF_NDEBUG_INLINE Part_ProcessStrategy::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : additional_parameters_{visibility, arena},
        name_(arena),
        _cached_size_{0} {}

inline void Part_ProcessStrategy::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, rot_angle_in_deg_),
           0,
           offsetof(Impl_, pattern_hatch_length_in_mm_) -
               offsetof(Impl_, rot_angle_in_deg_) +
               sizeof(Impl_::pattern_hatch_length_in_mm_));
}
Part_ProcessStrategy::~Part_ProcessStrategy() {
  // @@protoc_insertion_point(destructor:open_vector_format.Part.ProcessStrategy)
  SharedDtor(*this);
}
inline void Part_ProcessStrategy::SharedDtor(MessageLite& self) {
  Part_ProcessStrategy& this_ = static_cast<Part_ProcessStrategy&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.name_.Destroy();
  this_._impl_.~Impl_();
}

inline void* Part_ProcessStrategy::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Part_ProcessStrategy(arena);
}
constexpr auto Part_ProcessStrategy::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Part_ProcessStrategy, _impl_.additional_parameters_) +
          decltype(Part_ProcessStrategy::_impl_.additional_parameters_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(Part_ProcessStrategy), alignof(Part_ProcessStrategy), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Part_ProcessStrategy::PlacementNew_,
                                 sizeof(Part_ProcessStrategy),
                                 alignof(Part_ProcessStrategy));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Part_ProcessStrategy::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Part_ProcessStrategy_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Part_ProcessStrategy::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Part_ProcessStrategy>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Part_ProcessStrategy::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Part_ProcessStrategy>(), &Part_ProcessStrategy::ByteSizeLong,
            &Part_ProcessStrategy::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Part_ProcessStrategy, _impl_._cached_size_),
        false,
    },
    &Part_ProcessStrategy::kDescriptorMethods,
    &descriptor_table_open_5fvector_5fformat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Part_ProcessStrategy::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 15, 1, 60, 7> Part_ProcessStrategy::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    100, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294959104,  // skipmap
    offsetof(decltype(_table_), field_entries),
    15,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::open_vector_format::Part_ProcessStrategy>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float rot_angle_in_deg = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(Part_ProcessStrategy, _impl_.rot_angle_in_deg_)}},
    // float increment_angle_in_deg = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Part_ProcessStrategy, _impl_.increment_angle_in_deg_)}},
    // float shift_in_mm = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(Part_ProcessStrategy, _impl_.shift_in_mm_)}},
    // float extend_into_in_mm = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(Part_ProcessStrategy, _impl_.extend_into_in_mm_)}},
    // float layer_thickness_in_mm = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(Part_ProcessStrategy, _impl_.layer_thickness_in_mm_)}},
    // float hatch_distance_in_mm = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(Part_ProcessStrategy, _impl_.hatch_distance_in_mm_)}},
    // float hatch_contour_distance_in_mm = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 63, 0, PROTOBUF_FIELD_OFFSET(Part_ProcessStrategy, _impl_.hatch_contour_distance_in_mm_)}},
    // float overhang_angle_in_deg = 8;
    {::_pbi::TcParser::FastF32S1,
     {69, 63, 0, PROTOBUF_FIELD_OFFSET(Part_ProcessStrategy, _impl_.overhang_angle_in_deg_)}},
    // float contour_offset_in_mm = 9;
    {::_pbi::TcParser::FastF32S1,
     {77, 63, 0, PROTOBUF_FIELD_OFFSET(Part_ProcessStrategy, _impl_.contour_offset_in_mm_)}},
    // int32 number_of_contours = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Part_ProcessStrategy, _impl_.number_of_contours_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(Part_ProcessStrategy, _impl_.number_of_contours_)}},
    // float contour_distance_in_mm = 11;
    {::_pbi::TcParser::FastF32S1,
     {93, 63, 0, PROTOBUF_FIELD_OFFSET(Part_ProcessStrategy, _impl_.contour_distance_in_mm_)}},
    // .open_vector_format.Part.ProcessStrategy.HatchingPattern hatching_pattern = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Part_ProcessStrategy, _impl_.hatching_pattern_), 63>(),
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(Part_ProcessStrategy, _impl_.hatching_pattern_)}},
    // float pattern_hatch_length_in_mm = 13;
    {::_pbi::TcParser::FastF32S1,
     {109, 63, 0, PROTOBUF_FIELD_OFFSET(Part_ProcessStrategy, _impl_.pattern_hatch_length_in_mm_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    90, 0, 1,
    64510, 13,
    65535, 65535
  }}, {{
    // float rot_angle_in_deg = 1;
    {PROTOBUF_FIELD_OFFSET(Part_ProcessStrategy, _impl_.rot_angle_in_deg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float increment_angle_in_deg = 2;
    {PROTOBUF_FIELD_OFFSET(Part_ProcessStrategy, _impl_.increment_angle_in_deg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float shift_in_mm = 3;
    {PROTOBUF_FIELD_OFFSET(Part_ProcessStrategy, _impl_.shift_in_mm_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float extend_into_in_mm = 4;
    {PROTOBUF_FIELD_OFFSET(Part_ProcessStrategy, _impl_.extend_into_in_mm_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float layer_thickness_in_mm = 5;
    {PROTOBUF_FIELD_OFFSET(Part_ProcessStrategy, _impl_.layer_thickness_in_mm_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float hatch_distance_in_mm = 6;
    {PROTOBUF_FIELD_OFFSET(Part_ProcessStrategy, _impl_.hatch_distance_in_mm_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float hatch_contour_distance_in_mm = 7;
    {PROTOBUF_FIELD_OFFSET(Part_ProcessStrategy, _impl_.hatch_contour_distance_in_mm_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float overhang_angle_in_deg = 8;
    {PROTOBUF_FIELD_OFFSET(Part_ProcessStrategy, _impl_.overhang_angle_in_deg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float contour_offset_in_mm = 9;
    {PROTOBUF_FIELD_OFFSET(Part_ProcessStrategy, _impl_.contour_offset_in_mm_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int32 number_of_contours = 10;
    {PROTOBUF_FIELD_OFFSET(Part_ProcessStrategy, _impl_.number_of_contours_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // float contour_distance_in_mm = 11;
    {PROTOBUF_FIELD_OFFSET(Part_ProcessStrategy, _impl_.contour_distance_in_mm_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // .open_vector_format.Part.ProcessStrategy.HatchingPattern hatching_pattern = 12;
    {PROTOBUF_FIELD_OFFSET(Part_ProcessStrategy, _impl_.hatching_pattern_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // float pattern_hatch_length_in_mm = 13;
    {PROTOBUF_FIELD_OFFSET(Part_ProcessStrategy, _impl_.pattern_hatch_length_in_mm_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // string name = 90;
    {PROTOBUF_FIELD_OFFSET(Part_ProcessStrategy, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .open_vector_format.Part.ProcessStrategy.ProprietaryParam additional_parameters = 100;
    {PROTOBUF_FIELD_OFFSET(Part_ProcessStrategy, _impl_.additional_parameters_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::open_vector_format::Part_ProcessStrategy_ProprietaryParam>()},
  }}, {{
    "\47\0\0\0\0\0\0\0\0\0\0\0\0\0\4\0"
    "open_vector_format.Part.ProcessStrategy"
    "name"
  }},
};

PROTOBUF_NOINLINE void Part_ProcessStrategy::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.Part.ProcessStrategy)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.additional_parameters_.Clear();
  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.rot_angle_in_deg_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.pattern_hatch_length_in_mm_) -
      reinterpret_cast<char*>(&_impl_.rot_angle_in_deg_)) + sizeof(_impl_.pattern_hatch_length_in_mm_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Part_ProcessStrategy::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Part_ProcessStrategy& this_ = static_cast<const Part_ProcessStrategy&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Part_ProcessStrategy::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Part_ProcessStrategy& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.Part.ProcessStrategy)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float rot_angle_in_deg = 1;
          if (::absl::bit_cast<::uint32_t>(this_._internal_rot_angle_in_deg()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_rot_angle_in_deg(), target);
          }

          // float increment_angle_in_deg = 2;
          if (::absl::bit_cast<::uint32_t>(this_._internal_increment_angle_in_deg()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_increment_angle_in_deg(), target);
          }

          // float shift_in_mm = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_shift_in_mm()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_shift_in_mm(), target);
          }

          // float extend_into_in_mm = 4;
          if (::absl::bit_cast<::uint32_t>(this_._internal_extend_into_in_mm()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_extend_into_in_mm(), target);
          }

          // float layer_thickness_in_mm = 5;
          if (::absl::bit_cast<::uint32_t>(this_._internal_layer_thickness_in_mm()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                5, this_._internal_layer_thickness_in_mm(), target);
          }

          // float hatch_distance_in_mm = 6;
          if (::absl::bit_cast<::uint32_t>(this_._internal_hatch_distance_in_mm()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                6, this_._internal_hatch_distance_in_mm(), target);
          }

          // float hatch_contour_distance_in_mm = 7;
          if (::absl::bit_cast<::uint32_t>(this_._internal_hatch_contour_distance_in_mm()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                7, this_._internal_hatch_contour_distance_in_mm(), target);
          }

          // float overhang_angle_in_deg = 8;
          if (::absl::bit_cast<::uint32_t>(this_._internal_overhang_angle_in_deg()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                8, this_._internal_overhang_angle_in_deg(), target);
          }

          // float contour_offset_in_mm = 9;
          if (::absl::bit_cast<::uint32_t>(this_._internal_contour_offset_in_mm()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                9, this_._internal_contour_offset_in_mm(), target);
          }

          // int32 number_of_contours = 10;
          if (this_._internal_number_of_contours() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<10>(
                    stream, this_._internal_number_of_contours(), target);
          }

          // float contour_distance_in_mm = 11;
          if (::absl::bit_cast<::uint32_t>(this_._internal_contour_distance_in_mm()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                11, this_._internal_contour_distance_in_mm(), target);
          }

          // .open_vector_format.Part.ProcessStrategy.HatchingPattern hatching_pattern = 12;
          if (this_._internal_hatching_pattern() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                12, this_._internal_hatching_pattern(), target);
          }

          // float pattern_hatch_length_in_mm = 13;
          if (::absl::bit_cast<::uint32_t>(this_._internal_pattern_hatch_length_in_mm()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                13, this_._internal_pattern_hatch_length_in_mm(), target);
          }

          // string name = 90;
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "open_vector_format.Part.ProcessStrategy.name");
            target = stream->WriteStringMaybeAliased(90, _s, target);
          }

          // repeated .open_vector_format.Part.ProcessStrategy.ProprietaryParam additional_parameters = 100;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_additional_parameters_size());
               i < n; i++) {
            const auto& repfield = this_._internal_additional_parameters().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    100, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.Part.ProcessStrategy)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Part_ProcessStrategy::ByteSizeLong(const MessageLite& base) {
          const Part_ProcessStrategy& this_ = static_cast<const Part_ProcessStrategy&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Part_ProcessStrategy::ByteSizeLong() const {
          const Part_ProcessStrategy& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:open_vector_format.Part.ProcessStrategy)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .open_vector_format.Part.ProcessStrategy.ProprietaryParam additional_parameters = 100;
            {
              total_size += 2UL * this_._internal_additional_parameters_size();
              for (const auto& msg : this_._internal_additional_parameters()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string name = 90;
            if (!this_._internal_name().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
            // float rot_angle_in_deg = 1;
            if (::absl::bit_cast<::uint32_t>(this_._internal_rot_angle_in_deg()) != 0) {
              total_size += 5;
            }
            // float increment_angle_in_deg = 2;
            if (::absl::bit_cast<::uint32_t>(this_._internal_increment_angle_in_deg()) != 0) {
              total_size += 5;
            }
            // float shift_in_mm = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_shift_in_mm()) != 0) {
              total_size += 5;
            }
            // float extend_into_in_mm = 4;
            if (::absl::bit_cast<::uint32_t>(this_._internal_extend_into_in_mm()) != 0) {
              total_size += 5;
            }
            // float layer_thickness_in_mm = 5;
            if (::absl::bit_cast<::uint32_t>(this_._internal_layer_thickness_in_mm()) != 0) {
              total_size += 5;
            }
            // float hatch_distance_in_mm = 6;
            if (::absl::bit_cast<::uint32_t>(this_._internal_hatch_distance_in_mm()) != 0) {
              total_size += 5;
            }
            // float hatch_contour_distance_in_mm = 7;
            if (::absl::bit_cast<::uint32_t>(this_._internal_hatch_contour_distance_in_mm()) != 0) {
              total_size += 5;
            }
            // float overhang_angle_in_deg = 8;
            if (::absl::bit_cast<::uint32_t>(this_._internal_overhang_angle_in_deg()) != 0) {
              total_size += 5;
            }
            // float contour_offset_in_mm = 9;
            if (::absl::bit_cast<::uint32_t>(this_._internal_contour_offset_in_mm()) != 0) {
              total_size += 5;
            }
            // int32 number_of_contours = 10;
            if (this_._internal_number_of_contours() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_number_of_contours());
            }
            // float contour_distance_in_mm = 11;
            if (::absl::bit_cast<::uint32_t>(this_._internal_contour_distance_in_mm()) != 0) {
              total_size += 5;
            }
            // .open_vector_format.Part.ProcessStrategy.HatchingPattern hatching_pattern = 12;
            if (this_._internal_hatching_pattern() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_hatching_pattern());
            }
            // float pattern_hatch_length_in_mm = 13;
            if (::absl::bit_cast<::uint32_t>(this_._internal_pattern_hatch_length_in_mm()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Part_ProcessStrategy::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Part_ProcessStrategy*>(&to_msg);
  auto& from = static_cast<const Part_ProcessStrategy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.Part.ProcessStrategy)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_additional_parameters()->MergeFrom(
      from._internal_additional_parameters());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_rot_angle_in_deg()) != 0) {
    _this->_impl_.rot_angle_in_deg_ = from._impl_.rot_angle_in_deg_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_increment_angle_in_deg()) != 0) {
    _this->_impl_.increment_angle_in_deg_ = from._impl_.increment_angle_in_deg_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_shift_in_mm()) != 0) {
    _this->_impl_.shift_in_mm_ = from._impl_.shift_in_mm_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_extend_into_in_mm()) != 0) {
    _this->_impl_.extend_into_in_mm_ = from._impl_.extend_into_in_mm_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_layer_thickness_in_mm()) != 0) {
    _this->_impl_.layer_thickness_in_mm_ = from._impl_.layer_thickness_in_mm_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_hatch_distance_in_mm()) != 0) {
    _this->_impl_.hatch_distance_in_mm_ = from._impl_.hatch_distance_in_mm_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_hatch_contour_distance_in_mm()) != 0) {
    _this->_impl_.hatch_contour_distance_in_mm_ = from._impl_.hatch_contour_distance_in_mm_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_overhang_angle_in_deg()) != 0) {
    _this->_impl_.overhang_angle_in_deg_ = from._impl_.overhang_angle_in_deg_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_contour_offset_in_mm()) != 0) {
    _this->_impl_.contour_offset_in_mm_ = from._impl_.contour_offset_in_mm_;
  }
  if (from._internal_number_of_contours() != 0) {
    _this->_impl_.number_of_contours_ = from._impl_.number_of_contours_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_contour_distance_in_mm()) != 0) {
    _this->_impl_.contour_distance_in_mm_ = from._impl_.contour_distance_in_mm_;
  }
  if (from._internal_hatching_pattern() != 0) {
    _this->_impl_.hatching_pattern_ = from._impl_.hatching_pattern_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_pattern_hatch_length_in_mm()) != 0) {
    _this->_impl_.pattern_hatch_length_in_mm_ = from._impl_.pattern_hatch_length_in_mm_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Part_ProcessStrategy::CopyFrom(const Part_ProcessStrategy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.Part.ProcessStrategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Part_ProcessStrategy::InternalSwap(Part_ProcessStrategy* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.additional_parameters_.InternalSwap(&other->_impl_.additional_parameters_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Part_ProcessStrategy, _impl_.pattern_hatch_length_in_mm_)
      + sizeof(Part_ProcessStrategy::_impl_.pattern_hatch_length_in_mm_)
      - PROTOBUF_FIELD_OFFSET(Part_ProcessStrategy, _impl_.rot_angle_in_deg_)>(
          reinterpret_cast<char*>(&_impl_.rot_angle_in_deg_),
          reinterpret_cast<char*>(&other->_impl_.rot_angle_in_deg_));
}

::google::protobuf::Metadata Part_ProcessStrategy::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Part::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Part>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Part, _impl_._has_bits_);
};

Part::Part(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.Part)
}
inline PROTOBUF_NDEBUG_INLINE Part::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::open_vector_format::Part& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        exposure_order_{visibility, arena, from.exposure_order_},
        name_(arena, from.name_),
        parent_part_name_(arena, from.parent_part_name_) {}

Part::Part(
    ::google::protobuf::Arena* arena,
    const Part& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Part* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.geometry_info_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::open_vector_format::Part_GeometryInfo>(
                              arena, *from._impl_.geometry_info_)
                        : nullptr;
  _impl_.material_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::open_vector_format::Part_Material>(
                              arena, *from._impl_.material_)
                        : nullptr;
  _impl_.process_strategy_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::open_vector_format::Part_ProcessStrategy>(
                              arena, *from._impl_.process_strategy_)
                        : nullptr;
  _impl_.up_skin_process_strategy_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::open_vector_format::Part_ProcessStrategy>(
                              arena, *from._impl_.up_skin_process_strategy_)
                        : nullptr;
  _impl_.down_skin_process_strategy_ = (cached_has_bits & 0x00000010u) ? ::google::protobuf::Message::CopyConstruct<::open_vector_format::Part_ProcessStrategy>(
                              arena, *from._impl_.down_skin_process_strategy_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:open_vector_format.Part)
}
inline PROTOBUF_NDEBUG_INLINE Part::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        exposure_order_{visibility, arena},
        name_(arena),
        parent_part_name_(arena) {}

inline void Part::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, geometry_info_),
           0,
           offsetof(Impl_, down_skin_process_strategy_) -
               offsetof(Impl_, geometry_info_) +
               sizeof(Impl_::down_skin_process_strategy_));
}
Part::~Part() {
  // @@protoc_insertion_point(destructor:open_vector_format.Part)
  SharedDtor(*this);
}
inline void Part::SharedDtor(MessageLite& self) {
  Part& this_ = static_cast<Part&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.name_.Destroy();
  this_._impl_.parent_part_name_.Destroy();
  delete this_._impl_.geometry_info_;
  delete this_._impl_.material_;
  delete this_._impl_.process_strategy_;
  delete this_._impl_.up_skin_process_strategy_;
  delete this_._impl_.down_skin_process_strategy_;
  this_._impl_.~Impl_();
}

inline void* Part::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Part(arena);
}
constexpr auto Part::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Part, _impl_.exposure_order_) +
          decltype(Part::_impl_.exposure_order_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(Part), alignof(Part), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Part::PlacementNew_,
                                 sizeof(Part),
                                 alignof(Part));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Part::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Part_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Part::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Part>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Part::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Part>(), &Part::ByteSizeLong,
            &Part::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Part, _impl_._cached_size_),
        false,
    },
    &Part::kDescriptorMethods,
    &descriptor_table_open_5fvector_5fformat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Part::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 6, 60, 2> Part::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Part, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    6,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::open_vector_format::Part>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string parent_part_name = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(Part, _impl_.parent_part_name_)}},
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Part, _impl_.name_)}},
    // .open_vector_format.Part.GeometryInfo geometry_info = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(Part, _impl_.geometry_info_)}},
    // .open_vector_format.Part.Material material = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(Part, _impl_.material_)}},
    // .open_vector_format.Part.ProcessStrategy process_strategy = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 2, 2, PROTOBUF_FIELD_OFFSET(Part, _impl_.process_strategy_)}},
    // .open_vector_format.Part.ProcessStrategy up_skin_process_strategy = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 3, 3, PROTOBUF_FIELD_OFFSET(Part, _impl_.up_skin_process_strategy_)}},
    // .open_vector_format.Part.ProcessStrategy down_skin_process_strategy = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 4, 4, PROTOBUF_FIELD_OFFSET(Part, _impl_.down_skin_process_strategy_)}},
    // repeated .open_vector_format.VectorBlock.LPBFMetadata exposure_order = 7;
    {::_pbi::TcParser::FastMtR1,
     {58, 63, 5, PROTOBUF_FIELD_OFFSET(Part, _impl_.exposure_order_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(Part, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .open_vector_format.Part.GeometryInfo geometry_info = 2;
    {PROTOBUF_FIELD_OFFSET(Part, _impl_.geometry_info_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .open_vector_format.Part.Material material = 3;
    {PROTOBUF_FIELD_OFFSET(Part, _impl_.material_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .open_vector_format.Part.ProcessStrategy process_strategy = 4;
    {PROTOBUF_FIELD_OFFSET(Part, _impl_.process_strategy_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .open_vector_format.Part.ProcessStrategy up_skin_process_strategy = 5;
    {PROTOBUF_FIELD_OFFSET(Part, _impl_.up_skin_process_strategy_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .open_vector_format.Part.ProcessStrategy down_skin_process_strategy = 6;
    {PROTOBUF_FIELD_OFFSET(Part, _impl_.down_skin_process_strategy_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .open_vector_format.VectorBlock.LPBFMetadata exposure_order = 7;
    {PROTOBUF_FIELD_OFFSET(Part, _impl_.exposure_order_), -1, 5,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // string parent_part_name = 8;
    {PROTOBUF_FIELD_OFFSET(Part, _impl_.parent_part_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::open_vector_format::Part_GeometryInfo>()},
    {::_pbi::TcParser::GetTable<::open_vector_format::Part_Material>()},
    {::_pbi::TcParser::GetTable<::open_vector_format::Part_ProcessStrategy>()},
    {::_pbi::TcParser::GetTable<::open_vector_format::Part_ProcessStrategy>()},
    {::_pbi::TcParser::GetTable<::open_vector_format::Part_ProcessStrategy>()},
    {::_pbi::TcParser::GetTable<::open_vector_format::VectorBlock_LPBFMetadata>()},
  }}, {{
    "\27\4\0\0\0\0\0\0\20\0\0\0\0\0\0\0"
    "open_vector_format.Part"
    "name"
    "parent_part_name"
  }},
};

PROTOBUF_NOINLINE void Part::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.Part)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.exposure_order_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.parent_part_name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.geometry_info_ != nullptr);
      _impl_.geometry_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.material_ != nullptr);
      _impl_.material_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.process_strategy_ != nullptr);
      _impl_.process_strategy_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.up_skin_process_strategy_ != nullptr);
      _impl_.up_skin_process_strategy_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.down_skin_process_strategy_ != nullptr);
      _impl_.down_skin_process_strategy_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Part::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Part& this_ = static_cast<const Part&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Part::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Part& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.Part)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string name = 1;
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "open_vector_format.Part.name");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .open_vector_format.Part.GeometryInfo geometry_info = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.geometry_info_, this_._impl_.geometry_info_->GetCachedSize(), target,
                stream);
          }

          // .open_vector_format.Part.Material material = 3;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.material_, this_._impl_.material_->GetCachedSize(), target,
                stream);
          }

          // .open_vector_format.Part.ProcessStrategy process_strategy = 4;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.process_strategy_, this_._impl_.process_strategy_->GetCachedSize(), target,
                stream);
          }

          // .open_vector_format.Part.ProcessStrategy up_skin_process_strategy = 5;
          if (cached_has_bits & 0x00000008u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                5, *this_._impl_.up_skin_process_strategy_, this_._impl_.up_skin_process_strategy_->GetCachedSize(), target,
                stream);
          }

          // .open_vector_format.Part.ProcessStrategy down_skin_process_strategy = 6;
          if (cached_has_bits & 0x00000010u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                6, *this_._impl_.down_skin_process_strategy_, this_._impl_.down_skin_process_strategy_->GetCachedSize(), target,
                stream);
          }

          // repeated .open_vector_format.VectorBlock.LPBFMetadata exposure_order = 7;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_exposure_order_size());
               i < n; i++) {
            const auto& repfield = this_._internal_exposure_order().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    7, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // string parent_part_name = 8;
          if (!this_._internal_parent_part_name().empty()) {
            const std::string& _s = this_._internal_parent_part_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "open_vector_format.Part.parent_part_name");
            target = stream->WriteStringMaybeAliased(8, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.Part)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Part::ByteSizeLong(const MessageLite& base) {
          const Part& this_ = static_cast<const Part&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Part::ByteSizeLong() const {
          const Part& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:open_vector_format.Part)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .open_vector_format.VectorBlock.LPBFMetadata exposure_order = 7;
            {
              total_size += 1UL * this_._internal_exposure_order_size();
              for (const auto& msg : this_._internal_exposure_order()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string name = 1;
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
            // string parent_part_name = 8;
            if (!this_._internal_parent_part_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_parent_part_name());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x0000001fu) {
            // .open_vector_format.Part.GeometryInfo geometry_info = 2;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.geometry_info_);
            }
            // .open_vector_format.Part.Material material = 3;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.material_);
            }
            // .open_vector_format.Part.ProcessStrategy process_strategy = 4;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.process_strategy_);
            }
            // .open_vector_format.Part.ProcessStrategy up_skin_process_strategy = 5;
            if (cached_has_bits & 0x00000008u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.up_skin_process_strategy_);
            }
            // .open_vector_format.Part.ProcessStrategy down_skin_process_strategy = 6;
            if (cached_has_bits & 0x00000010u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.down_skin_process_strategy_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Part::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Part*>(&to_msg);
  auto& from = static_cast<const Part&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.Part)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_exposure_order()->MergeFrom(
      from._internal_exposure_order());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_parent_part_name().empty()) {
    _this->_internal_set_parent_part_name(from._internal_parent_part_name());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.geometry_info_ != nullptr);
      if (_this->_impl_.geometry_info_ == nullptr) {
        _this->_impl_.geometry_info_ =
            ::google::protobuf::Message::CopyConstruct<::open_vector_format::Part_GeometryInfo>(arena, *from._impl_.geometry_info_);
      } else {
        _this->_impl_.geometry_info_->MergeFrom(*from._impl_.geometry_info_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.material_ != nullptr);
      if (_this->_impl_.material_ == nullptr) {
        _this->_impl_.material_ =
            ::google::protobuf::Message::CopyConstruct<::open_vector_format::Part_Material>(arena, *from._impl_.material_);
      } else {
        _this->_impl_.material_->MergeFrom(*from._impl_.material_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.process_strategy_ != nullptr);
      if (_this->_impl_.process_strategy_ == nullptr) {
        _this->_impl_.process_strategy_ =
            ::google::protobuf::Message::CopyConstruct<::open_vector_format::Part_ProcessStrategy>(arena, *from._impl_.process_strategy_);
      } else {
        _this->_impl_.process_strategy_->MergeFrom(*from._impl_.process_strategy_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.up_skin_process_strategy_ != nullptr);
      if (_this->_impl_.up_skin_process_strategy_ == nullptr) {
        _this->_impl_.up_skin_process_strategy_ =
            ::google::protobuf::Message::CopyConstruct<::open_vector_format::Part_ProcessStrategy>(arena, *from._impl_.up_skin_process_strategy_);
      } else {
        _this->_impl_.up_skin_process_strategy_->MergeFrom(*from._impl_.up_skin_process_strategy_);
      }
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(from._impl_.down_skin_process_strategy_ != nullptr);
      if (_this->_impl_.down_skin_process_strategy_ == nullptr) {
        _this->_impl_.down_skin_process_strategy_ =
            ::google::protobuf::Message::CopyConstruct<::open_vector_format::Part_ProcessStrategy>(arena, *from._impl_.down_skin_process_strategy_);
      } else {
        _this->_impl_.down_skin_process_strategy_->MergeFrom(*from._impl_.down_skin_process_strategy_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Part::CopyFrom(const Part& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.Part)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Part::InternalSwap(Part* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.exposure_order_.InternalSwap(&other->_impl_.exposure_order_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.parent_part_name_, &other->_impl_.parent_part_name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Part, _impl_.down_skin_process_strategy_)
      + sizeof(Part::_impl_.down_skin_process_strategy_)
      - PROTOBUF_FIELD_OFFSET(Part, _impl_.geometry_info_)>(
          reinterpret_cast<char*>(&_impl_.geometry_info_),
          reinterpret_cast<char*>(&other->_impl_.geometry_info_));
}

::google::protobuf::Metadata Part::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse::WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse::WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse::WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse() : SuperType() {}
              WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse::WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse(arena);
              }
              constexpr auto WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse),
                                                          alignof(WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_open_5fvector_5fformat_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::open_vector_format::WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .open_vector_format.WorkPlane.Patch value = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse, _impl_.value_)}},
    // int32 key = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse, _impl_.key_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 key = 1;
    {PROTOBUF_FIELD_OFFSET(WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .open_vector_format.WorkPlane.Patch value = 2;
    {PROTOBUF_FIELD_OFFSET(WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse, _impl_.value_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::open_vector_format::WorkPlane_Patch>()},
  }}, {{
  }},
};

// ===================================================================

class WorkPlane_WorkPlaneMetaData_closedContour::_Internal {
 public:
};

WorkPlane_WorkPlaneMetaData_closedContour::WorkPlane_WorkPlaneMetaData_closedContour(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour)
}
inline PROTOBUF_NDEBUG_INLINE WorkPlane_WorkPlaneMetaData_closedContour::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour& from_msg)
      : contour_section_vector_block_indices_{visibility, arena, from.contour_section_vector_block_indices_},
        _contour_section_vector_block_indices_cached_byte_size_{0},
        _cached_size_{0} {}

WorkPlane_WorkPlaneMetaData_closedContour::WorkPlane_WorkPlaneMetaData_closedContour(
    ::google::protobuf::Arena* arena,
    const WorkPlane_WorkPlaneMetaData_closedContour& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  WorkPlane_WorkPlaneMetaData_closedContour* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, area_in_mm_2_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, area_in_mm_2_),
           offsetof(Impl_, type_) -
               offsetof(Impl_, area_in_mm_2_) +
               sizeof(Impl_::type_));

  // @@protoc_insertion_point(copy_constructor:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour)
}
inline PROTOBUF_NDEBUG_INLINE WorkPlane_WorkPlaneMetaData_closedContour::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : contour_section_vector_block_indices_{visibility, arena},
        _contour_section_vector_block_indices_cached_byte_size_{0},
        _cached_size_{0} {}

inline void WorkPlane_WorkPlaneMetaData_closedContour::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, area_in_mm_2_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, area_in_mm_2_) +
               sizeof(Impl_::type_));
}
WorkPlane_WorkPlaneMetaData_closedContour::~WorkPlane_WorkPlaneMetaData_closedContour() {
  // @@protoc_insertion_point(destructor:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour)
  SharedDtor(*this);
}
inline void WorkPlane_WorkPlaneMetaData_closedContour::SharedDtor(MessageLite& self) {
  WorkPlane_WorkPlaneMetaData_closedContour& this_ = static_cast<WorkPlane_WorkPlaneMetaData_closedContour&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* WorkPlane_WorkPlaneMetaData_closedContour::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) WorkPlane_WorkPlaneMetaData_closedContour(arena);
}
constexpr auto WorkPlane_WorkPlaneMetaData_closedContour::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(WorkPlane_WorkPlaneMetaData_closedContour, _impl_.contour_section_vector_block_indices_) +
          decltype(WorkPlane_WorkPlaneMetaData_closedContour::_impl_.contour_section_vector_block_indices_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(WorkPlane_WorkPlaneMetaData_closedContour), alignof(WorkPlane_WorkPlaneMetaData_closedContour), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&WorkPlane_WorkPlaneMetaData_closedContour::PlacementNew_,
                                 sizeof(WorkPlane_WorkPlaneMetaData_closedContour),
                                 alignof(WorkPlane_WorkPlaneMetaData_closedContour));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull WorkPlane_WorkPlaneMetaData_closedContour::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_WorkPlane_WorkPlaneMetaData_closedContour_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &WorkPlane_WorkPlaneMetaData_closedContour::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<WorkPlane_WorkPlaneMetaData_closedContour>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &WorkPlane_WorkPlaneMetaData_closedContour::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<WorkPlane_WorkPlaneMetaData_closedContour>(), &WorkPlane_WorkPlaneMetaData_closedContour::ByteSizeLong,
            &WorkPlane_WorkPlaneMetaData_closedContour::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(WorkPlane_WorkPlaneMetaData_closedContour, _impl_._cached_size_),
        false,
    },
    &WorkPlane_WorkPlaneMetaData_closedContour::kDescriptorMethods,
    &descriptor_table_open_5fvector_5fformat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* WorkPlane_WorkPlaneMetaData_closedContour::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 0, 2> WorkPlane_WorkPlaneMetaData_closedContour::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967176,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated int32 contour_section_vector_block_indices = 1;
    {::_pbi::TcParser::FastV32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(WorkPlane_WorkPlaneMetaData_closedContour, _impl_.contour_section_vector_block_indices_)}},
    // float area_in_mm_2 = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(WorkPlane_WorkPlaneMetaData_closedContour, _impl_.area_in_mm_2_)}},
    // float length_in_mm = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(WorkPlane_WorkPlaneMetaData_closedContour, _impl_.length_in_mm_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // int32 parent_index = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(WorkPlane_WorkPlaneMetaData_closedContour, _impl_.parent_index_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(WorkPlane_WorkPlaneMetaData_closedContour, _impl_.parent_index_)}},
    // int32 winding_number = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(WorkPlane_WorkPlaneMetaData_closedContour, _impl_.winding_number_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(WorkPlane_WorkPlaneMetaData_closedContour, _impl_.winding_number_)}},
    // .open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour.ContourType type = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(WorkPlane_WorkPlaneMetaData_closedContour, _impl_.type_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(WorkPlane_WorkPlaneMetaData_closedContour, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated int32 contour_section_vector_block_indices = 1;
    {PROTOBUF_FIELD_OFFSET(WorkPlane_WorkPlaneMetaData_closedContour, _impl_.contour_section_vector_block_indices_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // float area_in_mm_2 = 2;
    {PROTOBUF_FIELD_OFFSET(WorkPlane_WorkPlaneMetaData_closedContour, _impl_.area_in_mm_2_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float length_in_mm = 3;
    {PROTOBUF_FIELD_OFFSET(WorkPlane_WorkPlaneMetaData_closedContour, _impl_.length_in_mm_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int32 parent_index = 5;
    {PROTOBUF_FIELD_OFFSET(WorkPlane_WorkPlaneMetaData_closedContour, _impl_.parent_index_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 winding_number = 6;
    {PROTOBUF_FIELD_OFFSET(WorkPlane_WorkPlaneMetaData_closedContour, _impl_.winding_number_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour.ContourType type = 7;
    {PROTOBUF_FIELD_OFFSET(WorkPlane_WorkPlaneMetaData_closedContour, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void WorkPlane_WorkPlaneMetaData_closedContour::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.contour_section_vector_block_indices_.Clear();
  ::memset(&_impl_.area_in_mm_2_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.area_in_mm_2_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* WorkPlane_WorkPlaneMetaData_closedContour::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const WorkPlane_WorkPlaneMetaData_closedContour& this_ = static_cast<const WorkPlane_WorkPlaneMetaData_closedContour&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* WorkPlane_WorkPlaneMetaData_closedContour::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const WorkPlane_WorkPlaneMetaData_closedContour& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated int32 contour_section_vector_block_indices = 1;
          {
            int byte_size = this_._impl_._contour_section_vector_block_indices_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteInt32Packed(
                  1, this_._internal_contour_section_vector_block_indices(), byte_size, target);
            }
          }

          // float area_in_mm_2 = 2;
          if (::absl::bit_cast<::uint32_t>(this_._internal_area_in_mm_2()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_area_in_mm_2(), target);
          }

          // float length_in_mm = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_length_in_mm()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_length_in_mm(), target);
          }

          // int32 parent_index = 5;
          if (this_._internal_parent_index() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<5>(
                    stream, this_._internal_parent_index(), target);
          }

          // int32 winding_number = 6;
          if (this_._internal_winding_number() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<6>(
                    stream, this_._internal_winding_number(), target);
          }

          // .open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour.ContourType type = 7;
          if (this_._internal_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                7, this_._internal_type(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t WorkPlane_WorkPlaneMetaData_closedContour::ByteSizeLong(const MessageLite& base) {
          const WorkPlane_WorkPlaneMetaData_closedContour& this_ = static_cast<const WorkPlane_WorkPlaneMetaData_closedContour&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t WorkPlane_WorkPlaneMetaData_closedContour::ByteSizeLong() const {
          const WorkPlane_WorkPlaneMetaData_closedContour& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated int32 contour_section_vector_block_indices = 1;
            {
              total_size +=
                  ::_pbi::WireFormatLite::Int32SizeWithPackedTagSize(
                      this_._internal_contour_section_vector_block_indices(), 1,
                      this_._impl_._contour_section_vector_block_indices_cached_byte_size_);
            }
          }
           {
            // float area_in_mm_2 = 2;
            if (::absl::bit_cast<::uint32_t>(this_._internal_area_in_mm_2()) != 0) {
              total_size += 5;
            }
            // float length_in_mm = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_length_in_mm()) != 0) {
              total_size += 5;
            }
            // int32 parent_index = 5;
            if (this_._internal_parent_index() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_parent_index());
            }
            // int32 winding_number = 6;
            if (this_._internal_winding_number() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_winding_number());
            }
            // .open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour.ContourType type = 7;
            if (this_._internal_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void WorkPlane_WorkPlaneMetaData_closedContour::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<WorkPlane_WorkPlaneMetaData_closedContour*>(&to_msg);
  auto& from = static_cast<const WorkPlane_WorkPlaneMetaData_closedContour&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_contour_section_vector_block_indices()->MergeFrom(from._internal_contour_section_vector_block_indices());
  if (::absl::bit_cast<::uint32_t>(from._internal_area_in_mm_2()) != 0) {
    _this->_impl_.area_in_mm_2_ = from._impl_.area_in_mm_2_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_length_in_mm()) != 0) {
    _this->_impl_.length_in_mm_ = from._impl_.length_in_mm_;
  }
  if (from._internal_parent_index() != 0) {
    _this->_impl_.parent_index_ = from._impl_.parent_index_;
  }
  if (from._internal_winding_number() != 0) {
    _this->_impl_.winding_number_ = from._impl_.winding_number_;
  }
  if (from._internal_type() != 0) {
    _this->_impl_.type_ = from._impl_.type_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void WorkPlane_WorkPlaneMetaData_closedContour::CopyFrom(const WorkPlane_WorkPlaneMetaData_closedContour& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void WorkPlane_WorkPlaneMetaData_closedContour::InternalSwap(WorkPlane_WorkPlaneMetaData_closedContour* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.contour_section_vector_block_indices_.InternalSwap(&other->_impl_.contour_section_vector_block_indices_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkPlane_WorkPlaneMetaData_closedContour, _impl_.type_)
      + sizeof(WorkPlane_WorkPlaneMetaData_closedContour::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(WorkPlane_WorkPlaneMetaData_closedContour, _impl_.area_in_mm_2_)>(
          reinterpret_cast<char*>(&_impl_.area_in_mm_2_),
          reinterpret_cast<char*>(&other->_impl_.area_in_mm_2_));
}

::google::protobuf::Metadata WorkPlane_WorkPlaneMetaData_closedContour::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class WorkPlane_WorkPlaneMetaData::_Internal {
 public:
  using HasBits =
      decltype(std::declval<WorkPlane_WorkPlaneMetaData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(WorkPlane_WorkPlaneMetaData, _impl_._has_bits_);
};

WorkPlane_WorkPlaneMetaData::WorkPlane_WorkPlaneMetaData(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.WorkPlane.WorkPlaneMetaData)
}
inline PROTOBUF_NDEBUG_INLINE WorkPlane_WorkPlaneMetaData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::open_vector_format::WorkPlane_WorkPlaneMetaData& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        patches_map_{visibility, arena, from.patches_map_},
        contours_{visibility, arena, from.contours_} {}

WorkPlane_WorkPlaneMetaData::WorkPlane_WorkPlaneMetaData(
    ::google::protobuf::Arena* arena,
    const WorkPlane_WorkPlaneMetaData& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  WorkPlane_WorkPlaneMetaData* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.bounds_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::open_vector_format::AxisAlignedBox2D>(
                              arena, *from._impl_.bounds_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, total_scan_distance_in_mm_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, total_scan_distance_in_mm_),
           offsetof(Impl_, minpower_) -
               offsetof(Impl_, total_scan_distance_in_mm_) +
               sizeof(Impl_::minpower_));

  // @@protoc_insertion_point(copy_constructor:open_vector_format.WorkPlane.WorkPlaneMetaData)
}
inline PROTOBUF_NDEBUG_INLINE WorkPlane_WorkPlaneMetaData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        patches_map_{visibility, arena},
        contours_{visibility, arena} {}

inline void WorkPlane_WorkPlaneMetaData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, bounds_),
           0,
           offsetof(Impl_, minpower_) -
               offsetof(Impl_, bounds_) +
               sizeof(Impl_::minpower_));
}
WorkPlane_WorkPlaneMetaData::~WorkPlane_WorkPlaneMetaData() {
  // @@protoc_insertion_point(destructor:open_vector_format.WorkPlane.WorkPlaneMetaData)
  SharedDtor(*this);
}
inline void WorkPlane_WorkPlaneMetaData::SharedDtor(MessageLite& self) {
  WorkPlane_WorkPlaneMetaData& this_ = static_cast<WorkPlane_WorkPlaneMetaData&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.bounds_;
  this_._impl_.~Impl_();
}

inline void* WorkPlane_WorkPlaneMetaData::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) WorkPlane_WorkPlaneMetaData(arena);
}
constexpr auto WorkPlane_WorkPlaneMetaData::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(WorkPlane_WorkPlaneMetaData, _impl_.patches_map_) +
          decltype(WorkPlane_WorkPlaneMetaData::_impl_.patches_map_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(WorkPlane_WorkPlaneMetaData, _impl_.patches_map_) +
          decltype(WorkPlane_WorkPlaneMetaData::_impl_.patches_map_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(WorkPlane_WorkPlaneMetaData, _impl_.contours_) +
          decltype(WorkPlane_WorkPlaneMetaData::_impl_.contours_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(WorkPlane_WorkPlaneMetaData), alignof(WorkPlane_WorkPlaneMetaData), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&WorkPlane_WorkPlaneMetaData::PlacementNew_,
                                 sizeof(WorkPlane_WorkPlaneMetaData),
                                 alignof(WorkPlane_WorkPlaneMetaData));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull WorkPlane_WorkPlaneMetaData::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_WorkPlane_WorkPlaneMetaData_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &WorkPlane_WorkPlaneMetaData::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<WorkPlane_WorkPlaneMetaData>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &WorkPlane_WorkPlaneMetaData::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<WorkPlane_WorkPlaneMetaData>(), &WorkPlane_WorkPlaneMetaData::ByteSizeLong,
            &WorkPlane_WorkPlaneMetaData::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(WorkPlane_WorkPlaneMetaData, _impl_._cached_size_),
        false,
    },
    &WorkPlane_WorkPlaneMetaData::kDescriptorMethods,
    &descriptor_table_open_5fvector_5fformat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* WorkPlane_WorkPlaneMetaData::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 4, 0, 2> WorkPlane_WorkPlaneMetaData::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(WorkPlane_WorkPlaneMetaData, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::open_vector_format::WorkPlane_WorkPlaneMetaData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // double total_scan_distance_in_mm = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(WorkPlane_WorkPlaneMetaData, _impl_.total_scan_distance_in_mm_)}},
    // double total_jump_distance_in_mm = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(WorkPlane_WorkPlaneMetaData, _impl_.total_jump_distance_in_mm_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // float maxPower = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(WorkPlane_WorkPlaneMetaData, _impl_.maxpower_)}},
    // float minPower = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(WorkPlane_WorkPlaneMetaData, _impl_.minpower_)}},
    // repeated .open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour contours = 6;
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(WorkPlane_WorkPlaneMetaData, _impl_.contours_)}},
    // .open_vector_format.AxisAlignedBox2D Bounds = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 0, 1, PROTOBUF_FIELD_OFFSET(WorkPlane_WorkPlaneMetaData, _impl_.bounds_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double total_scan_distance_in_mm = 1;
    {PROTOBUF_FIELD_OFFSET(WorkPlane_WorkPlaneMetaData, _impl_.total_scan_distance_in_mm_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double total_jump_distance_in_mm = 2;
    {PROTOBUF_FIELD_OFFSET(WorkPlane_WorkPlaneMetaData, _impl_.total_jump_distance_in_mm_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // map<int32, .open_vector_format.WorkPlane.Patch> patches_map = 3;
    {PROTOBUF_FIELD_OFFSET(WorkPlane_WorkPlaneMetaData, _impl_.patches_map_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // float maxPower = 4;
    {PROTOBUF_FIELD_OFFSET(WorkPlane_WorkPlaneMetaData, _impl_.maxpower_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float minPower = 5;
    {PROTOBUF_FIELD_OFFSET(WorkPlane_WorkPlaneMetaData, _impl_.minpower_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // repeated .open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour contours = 6;
    {PROTOBUF_FIELD_OFFSET(WorkPlane_WorkPlaneMetaData, _impl_.contours_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .open_vector_format.AxisAlignedBox2D Bounds = 7;
    {PROTOBUF_FIELD_OFFSET(WorkPlane_WorkPlaneMetaData, _impl_.bounds_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour>()},
    {::_pbi::TcParser::GetTable<::open_vector_format::AxisAlignedBox2D>()},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(WorkPlane_WorkPlaneMetaData()._impl_.patches_map_)>(
        0, 0, 0, 5,
        11)},
    {::_pbi::TcParser::GetTable<::open_vector_format::WorkPlane_Patch>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void WorkPlane_WorkPlaneMetaData::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.WorkPlane.WorkPlaneMetaData)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.patches_map_.Clear();
  _impl_.contours_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.bounds_ != nullptr);
    _impl_.bounds_->Clear();
  }
  ::memset(&_impl_.total_scan_distance_in_mm_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.minpower_) -
      reinterpret_cast<char*>(&_impl_.total_scan_distance_in_mm_)) + sizeof(_impl_.minpower_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* WorkPlane_WorkPlaneMetaData::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const WorkPlane_WorkPlaneMetaData& this_ = static_cast<const WorkPlane_WorkPlaneMetaData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* WorkPlane_WorkPlaneMetaData::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const WorkPlane_WorkPlaneMetaData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.WorkPlane.WorkPlaneMetaData)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // double total_scan_distance_in_mm = 1;
          if (::absl::bit_cast<::uint64_t>(this_._internal_total_scan_distance_in_mm()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                1, this_._internal_total_scan_distance_in_mm(), target);
          }

          // double total_jump_distance_in_mm = 2;
          if (::absl::bit_cast<::uint64_t>(this_._internal_total_jump_distance_in_mm()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                2, this_._internal_total_jump_distance_in_mm(), target);
          }

          // map<int32, .open_vector_format.WorkPlane.Patch> patches_map = 3;
          if (!this_._internal_patches_map().empty()) {
            using MapType = ::google::protobuf::Map<::int32_t, ::open_vector_format::WorkPlane_Patch>;
            using WireHelper = _pbi::MapEntryFuncs<::int32_t, ::open_vector_format::WorkPlane_Patch,
                                           _pbi::WireFormatLite::TYPE_INT32,
                                           _pbi::WireFormatLite::TYPE_MESSAGE>;
            const auto& field = this_._internal_patches_map();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    3, entry.first, entry.second, target, stream);
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    3, entry.first, entry.second, target, stream);
              }
            }
          }

          // float maxPower = 4;
          if (::absl::bit_cast<::uint32_t>(this_._internal_maxpower()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_maxpower(), target);
          }

          // float minPower = 5;
          if (::absl::bit_cast<::uint32_t>(this_._internal_minpower()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                5, this_._internal_minpower(), target);
          }

          // repeated .open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour contours = 6;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_contours_size());
               i < n; i++) {
            const auto& repfield = this_._internal_contours().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    6, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .open_vector_format.AxisAlignedBox2D Bounds = 7;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                7, *this_._impl_.bounds_, this_._impl_.bounds_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.WorkPlane.WorkPlaneMetaData)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t WorkPlane_WorkPlaneMetaData::ByteSizeLong(const MessageLite& base) {
          const WorkPlane_WorkPlaneMetaData& this_ = static_cast<const WorkPlane_WorkPlaneMetaData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t WorkPlane_WorkPlaneMetaData::ByteSizeLong() const {
          const WorkPlane_WorkPlaneMetaData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:open_vector_format.WorkPlane.WorkPlaneMetaData)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // map<int32, .open_vector_format.WorkPlane.Patch> patches_map = 3;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_patches_map_size());
              for (const auto& entry : this_._internal_patches_map()) {
                total_size += _pbi::MapEntryFuncs<::int32_t, ::open_vector_format::WorkPlane_Patch,
                                               _pbi::WireFormatLite::TYPE_INT32,
                                               _pbi::WireFormatLite::TYPE_MESSAGE>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // repeated .open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour contours = 6;
            {
              total_size += 1UL * this_._internal_contours_size();
              for (const auto& msg : this_._internal_contours()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // .open_vector_format.AxisAlignedBox2D Bounds = 7;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.bounds_);
            }
          }
           {
            // double total_scan_distance_in_mm = 1;
            if (::absl::bit_cast<::uint64_t>(this_._internal_total_scan_distance_in_mm()) != 0) {
              total_size += 9;
            }
            // double total_jump_distance_in_mm = 2;
            if (::absl::bit_cast<::uint64_t>(this_._internal_total_jump_distance_in_mm()) != 0) {
              total_size += 9;
            }
            // float maxPower = 4;
            if (::absl::bit_cast<::uint32_t>(this_._internal_maxpower()) != 0) {
              total_size += 5;
            }
            // float minPower = 5;
            if (::absl::bit_cast<::uint32_t>(this_._internal_minpower()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void WorkPlane_WorkPlaneMetaData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<WorkPlane_WorkPlaneMetaData*>(&to_msg);
  auto& from = static_cast<const WorkPlane_WorkPlaneMetaData&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.WorkPlane.WorkPlaneMetaData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.patches_map_.MergeFrom(from._impl_.patches_map_);
  _this->_internal_mutable_contours()->MergeFrom(
      from._internal_contours());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.bounds_ != nullptr);
    if (_this->_impl_.bounds_ == nullptr) {
      _this->_impl_.bounds_ =
          ::google::protobuf::Message::CopyConstruct<::open_vector_format::AxisAlignedBox2D>(arena, *from._impl_.bounds_);
    } else {
      _this->_impl_.bounds_->MergeFrom(*from._impl_.bounds_);
    }
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_total_scan_distance_in_mm()) != 0) {
    _this->_impl_.total_scan_distance_in_mm_ = from._impl_.total_scan_distance_in_mm_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_total_jump_distance_in_mm()) != 0) {
    _this->_impl_.total_jump_distance_in_mm_ = from._impl_.total_jump_distance_in_mm_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_maxpower()) != 0) {
    _this->_impl_.maxpower_ = from._impl_.maxpower_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_minpower()) != 0) {
    _this->_impl_.minpower_ = from._impl_.minpower_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void WorkPlane_WorkPlaneMetaData::CopyFrom(const WorkPlane_WorkPlaneMetaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.WorkPlane.WorkPlaneMetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void WorkPlane_WorkPlaneMetaData::InternalSwap(WorkPlane_WorkPlaneMetaData* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.patches_map_.InternalSwap(&other->_impl_.patches_map_);
  _impl_.contours_.InternalSwap(&other->_impl_.contours_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkPlane_WorkPlaneMetaData, _impl_.minpower_)
      + sizeof(WorkPlane_WorkPlaneMetaData::_impl_.minpower_)
      - PROTOBUF_FIELD_OFFSET(WorkPlane_WorkPlaneMetaData, _impl_.bounds_)>(
          reinterpret_cast<char*>(&_impl_.bounds_),
          reinterpret_cast<char*>(&other->_impl_.bounds_));
}

::google::protobuf::Metadata WorkPlane_WorkPlaneMetaData::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class WorkPlane_Patch::_Internal {
 public:
  using HasBits =
      decltype(std::declval<WorkPlane_Patch>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(WorkPlane_Patch, _impl_._has_bits_);
};

WorkPlane_Patch::WorkPlane_Patch(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.WorkPlane.Patch)
}
inline PROTOBUF_NDEBUG_INLINE WorkPlane_Patch::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::open_vector_format::WorkPlane_Patch& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

WorkPlane_Patch::WorkPlane_Patch(
    ::google::protobuf::Arena* arena,
    const WorkPlane_Patch& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  WorkPlane_Patch* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.outer_contour_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::open_vector_format::VectorBlock_LineSequence>(
                              arena, *from._impl_.outer_contour_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, u_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, u_),
           offsetof(Impl_, layer_id_) -
               offsetof(Impl_, u_) +
               sizeof(Impl_::layer_id_));

  // @@protoc_insertion_point(copy_constructor:open_vector_format.WorkPlane.Patch)
}
inline PROTOBUF_NDEBUG_INLINE WorkPlane_Patch::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void WorkPlane_Patch::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, outer_contour_),
           0,
           offsetof(Impl_, layer_id_) -
               offsetof(Impl_, outer_contour_) +
               sizeof(Impl_::layer_id_));
}
WorkPlane_Patch::~WorkPlane_Patch() {
  // @@protoc_insertion_point(destructor:open_vector_format.WorkPlane.Patch)
  SharedDtor(*this);
}
inline void WorkPlane_Patch::SharedDtor(MessageLite& self) {
  WorkPlane_Patch& this_ = static_cast<WorkPlane_Patch&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.outer_contour_;
  this_._impl_.~Impl_();
}

inline void* WorkPlane_Patch::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) WorkPlane_Patch(arena);
}
constexpr auto WorkPlane_Patch::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(WorkPlane_Patch),
                                            alignof(WorkPlane_Patch));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull WorkPlane_Patch::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_WorkPlane_Patch_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &WorkPlane_Patch::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<WorkPlane_Patch>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &WorkPlane_Patch::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<WorkPlane_Patch>(), &WorkPlane_Patch::ByteSizeLong,
            &WorkPlane_Patch::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(WorkPlane_Patch, _impl_._cached_size_),
        false,
    },
    &WorkPlane_Patch::kDescriptorMethods,
    &descriptor_table_open_5fvector_5fformat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* WorkPlane_Patch::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 0, 2> WorkPlane_Patch::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(WorkPlane_Patch, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::open_vector_format::WorkPlane_Patch>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 layer_id = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(WorkPlane_Patch, _impl_.layer_id_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(WorkPlane_Patch, _impl_.layer_id_)}},
    // .open_vector_format.VectorBlock.LineSequence outer_contour = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(WorkPlane_Patch, _impl_.outer_contour_)}},
    // float u = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(WorkPlane_Patch, _impl_.u_)}},
    // float v = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(WorkPlane_Patch, _impl_.v_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .open_vector_format.VectorBlock.LineSequence outer_contour = 1;
    {PROTOBUF_FIELD_OFFSET(WorkPlane_Patch, _impl_.outer_contour_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float u = 2;
    {PROTOBUF_FIELD_OFFSET(WorkPlane_Patch, _impl_.u_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float v = 3;
    {PROTOBUF_FIELD_OFFSET(WorkPlane_Patch, _impl_.v_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int32 layer_id = 4;
    {PROTOBUF_FIELD_OFFSET(WorkPlane_Patch, _impl_.layer_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::open_vector_format::VectorBlock_LineSequence>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void WorkPlane_Patch::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.WorkPlane.Patch)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.outer_contour_ != nullptr);
    _impl_.outer_contour_->Clear();
  }
  ::memset(&_impl_.u_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.layer_id_) -
      reinterpret_cast<char*>(&_impl_.u_)) + sizeof(_impl_.layer_id_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* WorkPlane_Patch::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const WorkPlane_Patch& this_ = static_cast<const WorkPlane_Patch&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* WorkPlane_Patch::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const WorkPlane_Patch& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.WorkPlane.Patch)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .open_vector_format.VectorBlock.LineSequence outer_contour = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.outer_contour_, this_._impl_.outer_contour_->GetCachedSize(), target,
                stream);
          }

          // float u = 2;
          if (::absl::bit_cast<::uint32_t>(this_._internal_u()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_u(), target);
          }

          // float v = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_v()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_v(), target);
          }

          // int32 layer_id = 4;
          if (this_._internal_layer_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_layer_id(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.WorkPlane.Patch)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t WorkPlane_Patch::ByteSizeLong(const MessageLite& base) {
          const WorkPlane_Patch& this_ = static_cast<const WorkPlane_Patch&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t WorkPlane_Patch::ByteSizeLong() const {
          const WorkPlane_Patch& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:open_vector_format.WorkPlane.Patch)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .open_vector_format.VectorBlock.LineSequence outer_contour = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.outer_contour_);
            }
          }
           {
            // float u = 2;
            if (::absl::bit_cast<::uint32_t>(this_._internal_u()) != 0) {
              total_size += 5;
            }
            // float v = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_v()) != 0) {
              total_size += 5;
            }
            // int32 layer_id = 4;
            if (this_._internal_layer_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_layer_id());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void WorkPlane_Patch::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<WorkPlane_Patch*>(&to_msg);
  auto& from = static_cast<const WorkPlane_Patch&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.WorkPlane.Patch)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.outer_contour_ != nullptr);
    if (_this->_impl_.outer_contour_ == nullptr) {
      _this->_impl_.outer_contour_ =
          ::google::protobuf::Message::CopyConstruct<::open_vector_format::VectorBlock_LineSequence>(arena, *from._impl_.outer_contour_);
    } else {
      _this->_impl_.outer_contour_->MergeFrom(*from._impl_.outer_contour_);
    }
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_u()) != 0) {
    _this->_impl_.u_ = from._impl_.u_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_v()) != 0) {
    _this->_impl_.v_ = from._impl_.v_;
  }
  if (from._internal_layer_id() != 0) {
    _this->_impl_.layer_id_ = from._impl_.layer_id_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void WorkPlane_Patch::CopyFrom(const WorkPlane_Patch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.WorkPlane.Patch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void WorkPlane_Patch::InternalSwap(WorkPlane_Patch* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkPlane_Patch, _impl_.layer_id_)
      + sizeof(WorkPlane_Patch::_impl_.layer_id_)
      - PROTOBUF_FIELD_OFFSET(WorkPlane_Patch, _impl_.outer_contour_)>(
          reinterpret_cast<char*>(&_impl_.outer_contour_),
          reinterpret_cast<char*>(&other->_impl_.outer_contour_));
}

::google::protobuf::Metadata WorkPlane_Patch::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class WorkPlane::_Internal {
 public:
  using HasBits =
      decltype(std::declval<WorkPlane>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(WorkPlane, _impl_._has_bits_);
};

WorkPlane::WorkPlane(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.WorkPlane)
}
inline PROTOBUF_NDEBUG_INLINE WorkPlane::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::open_vector_format::WorkPlane& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        vector_blocks_{visibility, arena, from.vector_blocks_},
        additional_axis_positions_{visibility, arena, from.additional_axis_positions_},
        machine_type_(arena, from.machine_type_) {}

WorkPlane::WorkPlane(
    ::google::protobuf::Arena* arena,
    const WorkPlane& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  WorkPlane* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.meta_data_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::open_vector_format::WorkPlane_WorkPlaneMetaData>(
                              arena, *from._impl_.meta_data_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_pos_in_mm_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, x_pos_in_mm_),
           offsetof(Impl_, work_plane_number_) -
               offsetof(Impl_, x_pos_in_mm_) +
               sizeof(Impl_::work_plane_number_));

  // @@protoc_insertion_point(copy_constructor:open_vector_format.WorkPlane)
}
inline PROTOBUF_NDEBUG_INLINE WorkPlane::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        vector_blocks_{visibility, arena},
        additional_axis_positions_{visibility, arena},
        machine_type_(arena) {}

inline void WorkPlane::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, meta_data_),
           0,
           offsetof(Impl_, work_plane_number_) -
               offsetof(Impl_, meta_data_) +
               sizeof(Impl_::work_plane_number_));
}
WorkPlane::~WorkPlane() {
  // @@protoc_insertion_point(destructor:open_vector_format.WorkPlane)
  SharedDtor(*this);
}
inline void WorkPlane::SharedDtor(MessageLite& self) {
  WorkPlane& this_ = static_cast<WorkPlane&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.machine_type_.Destroy();
  delete this_._impl_.meta_data_;
  this_._impl_.~Impl_();
}

inline void* WorkPlane::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) WorkPlane(arena);
}
constexpr auto WorkPlane::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(WorkPlane, _impl_.vector_blocks_) +
          decltype(WorkPlane::_impl_.vector_blocks_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(WorkPlane, _impl_.additional_axis_positions_) +
          decltype(WorkPlane::_impl_.additional_axis_positions_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(WorkPlane), alignof(WorkPlane), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&WorkPlane::PlacementNew_,
                                 sizeof(WorkPlane),
                                 alignof(WorkPlane));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull WorkPlane::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_WorkPlane_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &WorkPlane::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<WorkPlane>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &WorkPlane::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<WorkPlane>(), &WorkPlane::ByteSizeLong,
            &WorkPlane::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(WorkPlane, _impl_._cached_size_),
        false,
    },
    &WorkPlane::kDescriptorMethods,
    &descriptor_table_open_5fvector_5fformat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* WorkPlane::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 13, 2, 57, 2> WorkPlane::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(WorkPlane, _impl_._has_bits_),
    0, // no _extensions_
    13, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294959104,  // skipmap
    offsetof(decltype(_table_), field_entries),
    13,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::open_vector_format::WorkPlane>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .open_vector_format.VectorBlock vector_blocks = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(WorkPlane, _impl_.vector_blocks_)}},
    // float x_pos_in_mm = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(WorkPlane, _impl_.x_pos_in_mm_)}},
    // float y_pos_in_mm = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(WorkPlane, _impl_.y_pos_in_mm_)}},
    // float z_pos_in_mm = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(WorkPlane, _impl_.z_pos_in_mm_)}},
    // float x_rot_in_deg = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(WorkPlane, _impl_.x_rot_in_deg_)}},
    // float y_rot_in_deg = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(WorkPlane, _impl_.y_rot_in_deg_)}},
    // float z_rot_in_deg = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 63, 0, PROTOBUF_FIELD_OFFSET(WorkPlane, _impl_.z_rot_in_deg_)}},
    // int32 num_blocks = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(WorkPlane, _impl_.num_blocks_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(WorkPlane, _impl_.num_blocks_)}},
    // uint32 repeats = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(WorkPlane, _impl_.repeats_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(WorkPlane, _impl_.repeats_)}},
    // int32 work_plane_number = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(WorkPlane, _impl_.work_plane_number_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(WorkPlane, _impl_.work_plane_number_)}},
    // string machine_type = 11;
    {::_pbi::TcParser::FastUS1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(WorkPlane, _impl_.machine_type_)}},
    // repeated float additional_axis_positions = 12;
    {::_pbi::TcParser::FastF32P1,
     {98, 63, 0, PROTOBUF_FIELD_OFFSET(WorkPlane, _impl_.additional_axis_positions_)}},
    // .open_vector_format.WorkPlane.WorkPlaneMetaData meta_data = 13;
    {::_pbi::TcParser::FastMtS1,
     {106, 0, 1, PROTOBUF_FIELD_OFFSET(WorkPlane, _impl_.meta_data_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .open_vector_format.VectorBlock vector_blocks = 1;
    {PROTOBUF_FIELD_OFFSET(WorkPlane, _impl_.vector_blocks_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // float x_pos_in_mm = 2;
    {PROTOBUF_FIELD_OFFSET(WorkPlane, _impl_.x_pos_in_mm_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float y_pos_in_mm = 3;
    {PROTOBUF_FIELD_OFFSET(WorkPlane, _impl_.y_pos_in_mm_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float z_pos_in_mm = 4;
    {PROTOBUF_FIELD_OFFSET(WorkPlane, _impl_.z_pos_in_mm_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float x_rot_in_deg = 5;
    {PROTOBUF_FIELD_OFFSET(WorkPlane, _impl_.x_rot_in_deg_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float y_rot_in_deg = 6;
    {PROTOBUF_FIELD_OFFSET(WorkPlane, _impl_.y_rot_in_deg_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float z_rot_in_deg = 7;
    {PROTOBUF_FIELD_OFFSET(WorkPlane, _impl_.z_rot_in_deg_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int32 num_blocks = 8;
    {PROTOBUF_FIELD_OFFSET(WorkPlane, _impl_.num_blocks_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // uint32 repeats = 9;
    {PROTOBUF_FIELD_OFFSET(WorkPlane, _impl_.repeats_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // int32 work_plane_number = 10;
    {PROTOBUF_FIELD_OFFSET(WorkPlane, _impl_.work_plane_number_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string machine_type = 11;
    {PROTOBUF_FIELD_OFFSET(WorkPlane, _impl_.machine_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated float additional_axis_positions = 12;
    {PROTOBUF_FIELD_OFFSET(WorkPlane, _impl_.additional_axis_positions_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // .open_vector_format.WorkPlane.WorkPlaneMetaData meta_data = 13;
    {PROTOBUF_FIELD_OFFSET(WorkPlane, _impl_.meta_data_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::open_vector_format::VectorBlock>()},
    {::_pbi::TcParser::GetTable<::open_vector_format::WorkPlane_WorkPlaneMetaData>()},
  }}, {{
    "\34\0\0\0\0\0\0\0\0\0\0\14\0\0\0\0"
    "open_vector_format.WorkPlane"
    "machine_type"
  }},
};

PROTOBUF_NOINLINE void WorkPlane::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.WorkPlane)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vector_blocks_.Clear();
  _impl_.additional_axis_positions_.Clear();
  _impl_.machine_type_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.meta_data_ != nullptr);
    _impl_.meta_data_->Clear();
  }
  ::memset(&_impl_.x_pos_in_mm_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.work_plane_number_) -
      reinterpret_cast<char*>(&_impl_.x_pos_in_mm_)) + sizeof(_impl_.work_plane_number_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* WorkPlane::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const WorkPlane& this_ = static_cast<const WorkPlane&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* WorkPlane::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const WorkPlane& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.WorkPlane)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .open_vector_format.VectorBlock vector_blocks = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_vector_blocks_size());
               i < n; i++) {
            const auto& repfield = this_._internal_vector_blocks().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // float x_pos_in_mm = 2;
          if (::absl::bit_cast<::uint32_t>(this_._internal_x_pos_in_mm()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_x_pos_in_mm(), target);
          }

          // float y_pos_in_mm = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_y_pos_in_mm()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_y_pos_in_mm(), target);
          }

          // float z_pos_in_mm = 4;
          if (::absl::bit_cast<::uint32_t>(this_._internal_z_pos_in_mm()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_z_pos_in_mm(), target);
          }

          // float x_rot_in_deg = 5;
          if (::absl::bit_cast<::uint32_t>(this_._internal_x_rot_in_deg()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                5, this_._internal_x_rot_in_deg(), target);
          }

          // float y_rot_in_deg = 6;
          if (::absl::bit_cast<::uint32_t>(this_._internal_y_rot_in_deg()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                6, this_._internal_y_rot_in_deg(), target);
          }

          // float z_rot_in_deg = 7;
          if (::absl::bit_cast<::uint32_t>(this_._internal_z_rot_in_deg()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                7, this_._internal_z_rot_in_deg(), target);
          }

          // int32 num_blocks = 8;
          if (this_._internal_num_blocks() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<8>(
                    stream, this_._internal_num_blocks(), target);
          }

          // uint32 repeats = 9;
          if (this_._internal_repeats() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                9, this_._internal_repeats(), target);
          }

          // int32 work_plane_number = 10;
          if (this_._internal_work_plane_number() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<10>(
                    stream, this_._internal_work_plane_number(), target);
          }

          // string machine_type = 11;
          if (!this_._internal_machine_type().empty()) {
            const std::string& _s = this_._internal_machine_type();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "open_vector_format.WorkPlane.machine_type");
            target = stream->WriteStringMaybeAliased(11, _s, target);
          }

          // repeated float additional_axis_positions = 12;
          if (this_._internal_additional_axis_positions_size() > 0) {
            target = stream->WriteFixedPacked(12, this_._internal_additional_axis_positions(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .open_vector_format.WorkPlane.WorkPlaneMetaData meta_data = 13;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                13, *this_._impl_.meta_data_, this_._impl_.meta_data_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.WorkPlane)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t WorkPlane::ByteSizeLong(const MessageLite& base) {
          const WorkPlane& this_ = static_cast<const WorkPlane&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t WorkPlane::ByteSizeLong() const {
          const WorkPlane& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:open_vector_format.WorkPlane)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .open_vector_format.VectorBlock vector_blocks = 1;
            {
              total_size += 1UL * this_._internal_vector_blocks_size();
              for (const auto& msg : this_._internal_vector_blocks()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated float additional_axis_positions = 12;
            {
              std::size_t data_size = std::size_t{4} *
                  ::_pbi::FromIntSize(this_._internal_additional_axis_positions_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
          }
           {
            // string machine_type = 11;
            if (!this_._internal_machine_type().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_machine_type());
            }
          }
           {
            // .open_vector_format.WorkPlane.WorkPlaneMetaData meta_data = 13;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.meta_data_);
            }
          }
           {
            // float x_pos_in_mm = 2;
            if (::absl::bit_cast<::uint32_t>(this_._internal_x_pos_in_mm()) != 0) {
              total_size += 5;
            }
            // float y_pos_in_mm = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_y_pos_in_mm()) != 0) {
              total_size += 5;
            }
            // float z_pos_in_mm = 4;
            if (::absl::bit_cast<::uint32_t>(this_._internal_z_pos_in_mm()) != 0) {
              total_size += 5;
            }
            // float x_rot_in_deg = 5;
            if (::absl::bit_cast<::uint32_t>(this_._internal_x_rot_in_deg()) != 0) {
              total_size += 5;
            }
            // float y_rot_in_deg = 6;
            if (::absl::bit_cast<::uint32_t>(this_._internal_y_rot_in_deg()) != 0) {
              total_size += 5;
            }
            // float z_rot_in_deg = 7;
            if (::absl::bit_cast<::uint32_t>(this_._internal_z_rot_in_deg()) != 0) {
              total_size += 5;
            }
            // int32 num_blocks = 8;
            if (this_._internal_num_blocks() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_num_blocks());
            }
            // uint32 repeats = 9;
            if (this_._internal_repeats() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_repeats());
            }
            // int32 work_plane_number = 10;
            if (this_._internal_work_plane_number() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_work_plane_number());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void WorkPlane::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<WorkPlane*>(&to_msg);
  auto& from = static_cast<const WorkPlane&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.WorkPlane)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_vector_blocks()->MergeFrom(
      from._internal_vector_blocks());
  _this->_internal_mutable_additional_axis_positions()->MergeFrom(from._internal_additional_axis_positions());
  if (!from._internal_machine_type().empty()) {
    _this->_internal_set_machine_type(from._internal_machine_type());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.meta_data_ != nullptr);
    if (_this->_impl_.meta_data_ == nullptr) {
      _this->_impl_.meta_data_ =
          ::google::protobuf::Message::CopyConstruct<::open_vector_format::WorkPlane_WorkPlaneMetaData>(arena, *from._impl_.meta_data_);
    } else {
      _this->_impl_.meta_data_->MergeFrom(*from._impl_.meta_data_);
    }
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_x_pos_in_mm()) != 0) {
    _this->_impl_.x_pos_in_mm_ = from._impl_.x_pos_in_mm_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_y_pos_in_mm()) != 0) {
    _this->_impl_.y_pos_in_mm_ = from._impl_.y_pos_in_mm_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_z_pos_in_mm()) != 0) {
    _this->_impl_.z_pos_in_mm_ = from._impl_.z_pos_in_mm_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_x_rot_in_deg()) != 0) {
    _this->_impl_.x_rot_in_deg_ = from._impl_.x_rot_in_deg_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_y_rot_in_deg()) != 0) {
    _this->_impl_.y_rot_in_deg_ = from._impl_.y_rot_in_deg_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_z_rot_in_deg()) != 0) {
    _this->_impl_.z_rot_in_deg_ = from._impl_.z_rot_in_deg_;
  }
  if (from._internal_num_blocks() != 0) {
    _this->_impl_.num_blocks_ = from._impl_.num_blocks_;
  }
  if (from._internal_repeats() != 0) {
    _this->_impl_.repeats_ = from._impl_.repeats_;
  }
  if (from._internal_work_plane_number() != 0) {
    _this->_impl_.work_plane_number_ = from._impl_.work_plane_number_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void WorkPlane::CopyFrom(const WorkPlane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.WorkPlane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void WorkPlane::InternalSwap(WorkPlane* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.vector_blocks_.InternalSwap(&other->_impl_.vector_blocks_);
  _impl_.additional_axis_positions_.InternalSwap(&other->_impl_.additional_axis_positions_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.machine_type_, &other->_impl_.machine_type_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkPlane, _impl_.work_plane_number_)
      + sizeof(WorkPlane::_impl_.work_plane_number_)
      - PROTOBUF_FIELD_OFFSET(WorkPlane, _impl_.meta_data_)>(
          reinterpret_cast<char*>(&_impl_.meta_data_),
          reinterpret_cast<char*>(&other->_impl_.meta_data_));
}

::google::protobuf::Metadata WorkPlane::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class VectorBlock_VectorBlockMetaData::_Internal {
 public:
  using HasBits =
      decltype(std::declval<VectorBlock_VectorBlockMetaData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(VectorBlock_VectorBlockMetaData, _impl_._has_bits_);
};

VectorBlock_VectorBlockMetaData::VectorBlock_VectorBlockMetaData(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.VectorBlock.VectorBlockMetaData)
}
inline PROTOBUF_NDEBUG_INLINE VectorBlock_VectorBlockMetaData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::open_vector_format::VectorBlock_VectorBlockMetaData& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

VectorBlock_VectorBlockMetaData::VectorBlock_VectorBlockMetaData(
    ::google::protobuf::Arena* arena,
    const VectorBlock_VectorBlockMetaData& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  VectorBlock_VectorBlockMetaData* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.bounds_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::open_vector_format::AxisAlignedBox2D>(
                              arena, *from._impl_.bounds_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, total_scan_distance_in_mm_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, total_scan_distance_in_mm_),
           offsetof(Impl_, display_color_) -
               offsetof(Impl_, total_scan_distance_in_mm_) +
               sizeof(Impl_::display_color_));

  // @@protoc_insertion_point(copy_constructor:open_vector_format.VectorBlock.VectorBlockMetaData)
}
inline PROTOBUF_NDEBUG_INLINE VectorBlock_VectorBlockMetaData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void VectorBlock_VectorBlockMetaData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, bounds_),
           0,
           offsetof(Impl_, display_color_) -
               offsetof(Impl_, bounds_) +
               sizeof(Impl_::display_color_));
}
VectorBlock_VectorBlockMetaData::~VectorBlock_VectorBlockMetaData() {
  // @@protoc_insertion_point(destructor:open_vector_format.VectorBlock.VectorBlockMetaData)
  SharedDtor(*this);
}
inline void VectorBlock_VectorBlockMetaData::SharedDtor(MessageLite& self) {
  VectorBlock_VectorBlockMetaData& this_ = static_cast<VectorBlock_VectorBlockMetaData&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.bounds_;
  this_._impl_.~Impl_();
}

inline void* VectorBlock_VectorBlockMetaData::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) VectorBlock_VectorBlockMetaData(arena);
}
constexpr auto VectorBlock_VectorBlockMetaData::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(VectorBlock_VectorBlockMetaData),
                                            alignof(VectorBlock_VectorBlockMetaData));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull VectorBlock_VectorBlockMetaData::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_VectorBlock_VectorBlockMetaData_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &VectorBlock_VectorBlockMetaData::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<VectorBlock_VectorBlockMetaData>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &VectorBlock_VectorBlockMetaData::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<VectorBlock_VectorBlockMetaData>(), &VectorBlock_VectorBlockMetaData::ByteSizeLong,
            &VectorBlock_VectorBlockMetaData::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(VectorBlock_VectorBlockMetaData, _impl_._cached_size_),
        false,
    },
    &VectorBlock_VectorBlockMetaData::kDescriptorMethods,
    &descriptor_table_open_5fvector_5fformat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* VectorBlock_VectorBlockMetaData::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 1, 0, 2> VectorBlock_VectorBlockMetaData::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(VectorBlock_VectorBlockMetaData, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::open_vector_format::VectorBlock_VectorBlockMetaData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // double total_scan_distance_in_mm = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(VectorBlock_VectorBlockMetaData, _impl_.total_scan_distance_in_mm_)}},
    // double total_jump_distance_in_mm = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(VectorBlock_VectorBlockMetaData, _impl_.total_jump_distance_in_mm_)}},
    // int32 part_key = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VectorBlock_VectorBlockMetaData, _impl_.part_key_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(VectorBlock_VectorBlockMetaData, _impl_.part_key_)}},
    // int32 patch_key = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VectorBlock_VectorBlockMetaData, _impl_.patch_key_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(VectorBlock_VectorBlockMetaData, _impl_.patch_key_)}},
    // int32 contour_index = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VectorBlock_VectorBlockMetaData, _impl_.contour_index_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(VectorBlock_VectorBlockMetaData, _impl_.contour_index_)}},
    // .open_vector_format.AxisAlignedBox2D bounds = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 0, 0, PROTOBUF_FIELD_OFFSET(VectorBlock_VectorBlockMetaData, _impl_.bounds_)}},
    // int32 display_color = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VectorBlock_VectorBlockMetaData, _impl_.display_color_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(VectorBlock_VectorBlockMetaData, _impl_.display_color_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double total_scan_distance_in_mm = 1;
    {PROTOBUF_FIELD_OFFSET(VectorBlock_VectorBlockMetaData, _impl_.total_scan_distance_in_mm_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double total_jump_distance_in_mm = 2;
    {PROTOBUF_FIELD_OFFSET(VectorBlock_VectorBlockMetaData, _impl_.total_jump_distance_in_mm_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // int32 part_key = 3;
    {PROTOBUF_FIELD_OFFSET(VectorBlock_VectorBlockMetaData, _impl_.part_key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 patch_key = 4;
    {PROTOBUF_FIELD_OFFSET(VectorBlock_VectorBlockMetaData, _impl_.patch_key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 contour_index = 5;
    {PROTOBUF_FIELD_OFFSET(VectorBlock_VectorBlockMetaData, _impl_.contour_index_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .open_vector_format.AxisAlignedBox2D bounds = 6;
    {PROTOBUF_FIELD_OFFSET(VectorBlock_VectorBlockMetaData, _impl_.bounds_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 display_color = 7;
    {PROTOBUF_FIELD_OFFSET(VectorBlock_VectorBlockMetaData, _impl_.display_color_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::open_vector_format::AxisAlignedBox2D>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void VectorBlock_VectorBlockMetaData::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.VectorBlock.VectorBlockMetaData)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.bounds_ != nullptr);
    _impl_.bounds_->Clear();
  }
  ::memset(&_impl_.total_scan_distance_in_mm_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.display_color_) -
      reinterpret_cast<char*>(&_impl_.total_scan_distance_in_mm_)) + sizeof(_impl_.display_color_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* VectorBlock_VectorBlockMetaData::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const VectorBlock_VectorBlockMetaData& this_ = static_cast<const VectorBlock_VectorBlockMetaData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* VectorBlock_VectorBlockMetaData::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const VectorBlock_VectorBlockMetaData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.VectorBlock.VectorBlockMetaData)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // double total_scan_distance_in_mm = 1;
          if (::absl::bit_cast<::uint64_t>(this_._internal_total_scan_distance_in_mm()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                1, this_._internal_total_scan_distance_in_mm(), target);
          }

          // double total_jump_distance_in_mm = 2;
          if (::absl::bit_cast<::uint64_t>(this_._internal_total_jump_distance_in_mm()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                2, this_._internal_total_jump_distance_in_mm(), target);
          }

          // int32 part_key = 3;
          if (this_._internal_part_key() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_part_key(), target);
          }

          // int32 patch_key = 4;
          if (this_._internal_patch_key() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_patch_key(), target);
          }

          // int32 contour_index = 5;
          if (this_._internal_contour_index() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<5>(
                    stream, this_._internal_contour_index(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .open_vector_format.AxisAlignedBox2D bounds = 6;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                6, *this_._impl_.bounds_, this_._impl_.bounds_->GetCachedSize(), target,
                stream);
          }

          // int32 display_color = 7;
          if (this_._internal_display_color() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<7>(
                    stream, this_._internal_display_color(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.VectorBlock.VectorBlockMetaData)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t VectorBlock_VectorBlockMetaData::ByteSizeLong(const MessageLite& base) {
          const VectorBlock_VectorBlockMetaData& this_ = static_cast<const VectorBlock_VectorBlockMetaData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t VectorBlock_VectorBlockMetaData::ByteSizeLong() const {
          const VectorBlock_VectorBlockMetaData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:open_vector_format.VectorBlock.VectorBlockMetaData)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .open_vector_format.AxisAlignedBox2D bounds = 6;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.bounds_);
            }
          }
           {
            // double total_scan_distance_in_mm = 1;
            if (::absl::bit_cast<::uint64_t>(this_._internal_total_scan_distance_in_mm()) != 0) {
              total_size += 9;
            }
            // double total_jump_distance_in_mm = 2;
            if (::absl::bit_cast<::uint64_t>(this_._internal_total_jump_distance_in_mm()) != 0) {
              total_size += 9;
            }
            // int32 part_key = 3;
            if (this_._internal_part_key() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_part_key());
            }
            // int32 patch_key = 4;
            if (this_._internal_patch_key() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_patch_key());
            }
            // int32 contour_index = 5;
            if (this_._internal_contour_index() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_contour_index());
            }
            // int32 display_color = 7;
            if (this_._internal_display_color() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_display_color());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void VectorBlock_VectorBlockMetaData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<VectorBlock_VectorBlockMetaData*>(&to_msg);
  auto& from = static_cast<const VectorBlock_VectorBlockMetaData&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.VectorBlock.VectorBlockMetaData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.bounds_ != nullptr);
    if (_this->_impl_.bounds_ == nullptr) {
      _this->_impl_.bounds_ =
          ::google::protobuf::Message::CopyConstruct<::open_vector_format::AxisAlignedBox2D>(arena, *from._impl_.bounds_);
    } else {
      _this->_impl_.bounds_->MergeFrom(*from._impl_.bounds_);
    }
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_total_scan_distance_in_mm()) != 0) {
    _this->_impl_.total_scan_distance_in_mm_ = from._impl_.total_scan_distance_in_mm_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_total_jump_distance_in_mm()) != 0) {
    _this->_impl_.total_jump_distance_in_mm_ = from._impl_.total_jump_distance_in_mm_;
  }
  if (from._internal_part_key() != 0) {
    _this->_impl_.part_key_ = from._impl_.part_key_;
  }
  if (from._internal_patch_key() != 0) {
    _this->_impl_.patch_key_ = from._impl_.patch_key_;
  }
  if (from._internal_contour_index() != 0) {
    _this->_impl_.contour_index_ = from._impl_.contour_index_;
  }
  if (from._internal_display_color() != 0) {
    _this->_impl_.display_color_ = from._impl_.display_color_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VectorBlock_VectorBlockMetaData::CopyFrom(const VectorBlock_VectorBlockMetaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.VectorBlock.VectorBlockMetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void VectorBlock_VectorBlockMetaData::InternalSwap(VectorBlock_VectorBlockMetaData* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VectorBlock_VectorBlockMetaData, _impl_.display_color_)
      + sizeof(VectorBlock_VectorBlockMetaData::_impl_.display_color_)
      - PROTOBUF_FIELD_OFFSET(VectorBlock_VectorBlockMetaData, _impl_.bounds_)>(
          reinterpret_cast<char*>(&_impl_.bounds_),
          reinterpret_cast<char*>(&other->_impl_.bounds_));
}

::google::protobuf::Metadata VectorBlock_VectorBlockMetaData::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class VectorBlock_LPBFMetadata::_Internal {
 public:
};

VectorBlock_LPBFMetadata::VectorBlock_LPBFMetadata(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.VectorBlock.LPBFMetadata)
}
VectorBlock_LPBFMetadata::VectorBlock_LPBFMetadata(
    ::google::protobuf::Arena* arena, const VectorBlock_LPBFMetadata& from)
    : VectorBlock_LPBFMetadata(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE VectorBlock_LPBFMetadata::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void VectorBlock_LPBFMetadata::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, part_area_),
           0,
           offsetof(Impl_, reexposure_) -
               offsetof(Impl_, part_area_) +
               sizeof(Impl_::reexposure_));
}
VectorBlock_LPBFMetadata::~VectorBlock_LPBFMetadata() {
  // @@protoc_insertion_point(destructor:open_vector_format.VectorBlock.LPBFMetadata)
  SharedDtor(*this);
}
inline void VectorBlock_LPBFMetadata::SharedDtor(MessageLite& self) {
  VectorBlock_LPBFMetadata& this_ = static_cast<VectorBlock_LPBFMetadata&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* VectorBlock_LPBFMetadata::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) VectorBlock_LPBFMetadata(arena);
}
constexpr auto VectorBlock_LPBFMetadata::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(VectorBlock_LPBFMetadata),
                                            alignof(VectorBlock_LPBFMetadata));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull VectorBlock_LPBFMetadata::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_VectorBlock_LPBFMetadata_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &VectorBlock_LPBFMetadata::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<VectorBlock_LPBFMetadata>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &VectorBlock_LPBFMetadata::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<VectorBlock_LPBFMetadata>(), &VectorBlock_LPBFMetadata::ByteSizeLong,
            &VectorBlock_LPBFMetadata::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(VectorBlock_LPBFMetadata, _impl_._cached_size_),
        false,
    },
    &VectorBlock_LPBFMetadata::kDescriptorMethods,
    &descriptor_table_open_5fvector_5fformat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* VectorBlock_LPBFMetadata::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 0, 2> VectorBlock_LPBFMetadata::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::open_vector_format::VectorBlock_LPBFMetadata>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .open_vector_format.VectorBlock.PartArea part_area = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VectorBlock_LPBFMetadata, _impl_.part_area_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(VectorBlock_LPBFMetadata, _impl_.part_area_)}},
    // .open_vector_format.VectorBlock.LPBFMetadata.SkinType skin_type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VectorBlock_LPBFMetadata, _impl_.skin_type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(VectorBlock_LPBFMetadata, _impl_.skin_type_)}},
    // .open_vector_format.VectorBlock.LPBFMetadata.SkinCoreStrategyArea skin_core_strategy_area = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VectorBlock_LPBFMetadata, _impl_.skin_core_strategy_area_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(VectorBlock_LPBFMetadata, _impl_.skin_core_strategy_area_)}},
    // .open_vector_format.VectorBlock.StructureType structure_type = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VectorBlock_LPBFMetadata, _impl_.structure_type_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(VectorBlock_LPBFMetadata, _impl_.structure_type_)}},
    // bool reexposure = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(VectorBlock_LPBFMetadata, _impl_.reexposure_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(VectorBlock_LPBFMetadata, _impl_.reexposure_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .open_vector_format.VectorBlock.PartArea part_area = 1;
    {PROTOBUF_FIELD_OFFSET(VectorBlock_LPBFMetadata, _impl_.part_area_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .open_vector_format.VectorBlock.LPBFMetadata.SkinType skin_type = 2;
    {PROTOBUF_FIELD_OFFSET(VectorBlock_LPBFMetadata, _impl_.skin_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .open_vector_format.VectorBlock.LPBFMetadata.SkinCoreStrategyArea skin_core_strategy_area = 3;
    {PROTOBUF_FIELD_OFFSET(VectorBlock_LPBFMetadata, _impl_.skin_core_strategy_area_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .open_vector_format.VectorBlock.StructureType structure_type = 4;
    {PROTOBUF_FIELD_OFFSET(VectorBlock_LPBFMetadata, _impl_.structure_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool reexposure = 5;
    {PROTOBUF_FIELD_OFFSET(VectorBlock_LPBFMetadata, _impl_.reexposure_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void VectorBlock_LPBFMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.VectorBlock.LPBFMetadata)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.part_area_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.reexposure_) -
      reinterpret_cast<char*>(&_impl_.part_area_)) + sizeof(_impl_.reexposure_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* VectorBlock_LPBFMetadata::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const VectorBlock_LPBFMetadata& this_ = static_cast<const VectorBlock_LPBFMetadata&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* VectorBlock_LPBFMetadata::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const VectorBlock_LPBFMetadata& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.VectorBlock.LPBFMetadata)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .open_vector_format.VectorBlock.PartArea part_area = 1;
          if (this_._internal_part_area() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_part_area(), target);
          }

          // .open_vector_format.VectorBlock.LPBFMetadata.SkinType skin_type = 2;
          if (this_._internal_skin_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this_._internal_skin_type(), target);
          }

          // .open_vector_format.VectorBlock.LPBFMetadata.SkinCoreStrategyArea skin_core_strategy_area = 3;
          if (this_._internal_skin_core_strategy_area() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                3, this_._internal_skin_core_strategy_area(), target);
          }

          // .open_vector_format.VectorBlock.StructureType structure_type = 4;
          if (this_._internal_structure_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                4, this_._internal_structure_type(), target);
          }

          // bool reexposure = 5;
          if (this_._internal_reexposure() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                5, this_._internal_reexposure(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.VectorBlock.LPBFMetadata)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t VectorBlock_LPBFMetadata::ByteSizeLong(const MessageLite& base) {
          const VectorBlock_LPBFMetadata& this_ = static_cast<const VectorBlock_LPBFMetadata&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t VectorBlock_LPBFMetadata::ByteSizeLong() const {
          const VectorBlock_LPBFMetadata& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:open_vector_format.VectorBlock.LPBFMetadata)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .open_vector_format.VectorBlock.PartArea part_area = 1;
            if (this_._internal_part_area() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_part_area());
            }
            // .open_vector_format.VectorBlock.LPBFMetadata.SkinType skin_type = 2;
            if (this_._internal_skin_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_skin_type());
            }
            // .open_vector_format.VectorBlock.LPBFMetadata.SkinCoreStrategyArea skin_core_strategy_area = 3;
            if (this_._internal_skin_core_strategy_area() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_skin_core_strategy_area());
            }
            // .open_vector_format.VectorBlock.StructureType structure_type = 4;
            if (this_._internal_structure_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_structure_type());
            }
            // bool reexposure = 5;
            if (this_._internal_reexposure() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void VectorBlock_LPBFMetadata::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<VectorBlock_LPBFMetadata*>(&to_msg);
  auto& from = static_cast<const VectorBlock_LPBFMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.VectorBlock.LPBFMetadata)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_part_area() != 0) {
    _this->_impl_.part_area_ = from._impl_.part_area_;
  }
  if (from._internal_skin_type() != 0) {
    _this->_impl_.skin_type_ = from._impl_.skin_type_;
  }
  if (from._internal_skin_core_strategy_area() != 0) {
    _this->_impl_.skin_core_strategy_area_ = from._impl_.skin_core_strategy_area_;
  }
  if (from._internal_structure_type() != 0) {
    _this->_impl_.structure_type_ = from._impl_.structure_type_;
  }
  if (from._internal_reexposure() != 0) {
    _this->_impl_.reexposure_ = from._impl_.reexposure_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VectorBlock_LPBFMetadata::CopyFrom(const VectorBlock_LPBFMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.VectorBlock.LPBFMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void VectorBlock_LPBFMetadata::InternalSwap(VectorBlock_LPBFMetadata* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VectorBlock_LPBFMetadata, _impl_.reexposure_)
      + sizeof(VectorBlock_LPBFMetadata::_impl_.reexposure_)
      - PROTOBUF_FIELD_OFFSET(VectorBlock_LPBFMetadata, _impl_.part_area_)>(
          reinterpret_cast<char*>(&_impl_.part_area_),
          reinterpret_cast<char*>(&other->_impl_.part_area_));
}

::google::protobuf::Metadata VectorBlock_LPBFMetadata::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class VectorBlock_MicroStructuringMetadata::_Internal {
 public:
};

VectorBlock_MicroStructuringMetadata::VectorBlock_MicroStructuringMetadata(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.VectorBlock.MicroStructuringMetadata)
}
VectorBlock_MicroStructuringMetadata::VectorBlock_MicroStructuringMetadata(
    ::google::protobuf::Arena* arena, const VectorBlock_MicroStructuringMetadata& from)
    : VectorBlock_MicroStructuringMetadata(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE VectorBlock_MicroStructuringMetadata::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void VectorBlock_MicroStructuringMetadata::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, part_area_),
           0,
           offsetof(Impl_, structure_type_) -
               offsetof(Impl_, part_area_) +
               sizeof(Impl_::structure_type_));
}
VectorBlock_MicroStructuringMetadata::~VectorBlock_MicroStructuringMetadata() {
  // @@protoc_insertion_point(destructor:open_vector_format.VectorBlock.MicroStructuringMetadata)
  SharedDtor(*this);
}
inline void VectorBlock_MicroStructuringMetadata::SharedDtor(MessageLite& self) {
  VectorBlock_MicroStructuringMetadata& this_ = static_cast<VectorBlock_MicroStructuringMetadata&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* VectorBlock_MicroStructuringMetadata::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) VectorBlock_MicroStructuringMetadata(arena);
}
constexpr auto VectorBlock_MicroStructuringMetadata::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(VectorBlock_MicroStructuringMetadata),
                                            alignof(VectorBlock_MicroStructuringMetadata));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull VectorBlock_MicroStructuringMetadata::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_VectorBlock_MicroStructuringMetadata_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &VectorBlock_MicroStructuringMetadata::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<VectorBlock_MicroStructuringMetadata>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &VectorBlock_MicroStructuringMetadata::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<VectorBlock_MicroStructuringMetadata>(), &VectorBlock_MicroStructuringMetadata::ByteSizeLong,
            &VectorBlock_MicroStructuringMetadata::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(VectorBlock_MicroStructuringMetadata, _impl_._cached_size_),
        false,
    },
    &VectorBlock_MicroStructuringMetadata::kDescriptorMethods,
    &descriptor_table_open_5fvector_5fformat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* VectorBlock_MicroStructuringMetadata::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> VectorBlock_MicroStructuringMetadata::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::open_vector_format::VectorBlock_MicroStructuringMetadata>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .open_vector_format.VectorBlock.StructureType structure_type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VectorBlock_MicroStructuringMetadata, _impl_.structure_type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(VectorBlock_MicroStructuringMetadata, _impl_.structure_type_)}},
    // .open_vector_format.VectorBlock.PartArea part_area = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VectorBlock_MicroStructuringMetadata, _impl_.part_area_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(VectorBlock_MicroStructuringMetadata, _impl_.part_area_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .open_vector_format.VectorBlock.PartArea part_area = 1;
    {PROTOBUF_FIELD_OFFSET(VectorBlock_MicroStructuringMetadata, _impl_.part_area_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .open_vector_format.VectorBlock.StructureType structure_type = 2;
    {PROTOBUF_FIELD_OFFSET(VectorBlock_MicroStructuringMetadata, _impl_.structure_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void VectorBlock_MicroStructuringMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.VectorBlock.MicroStructuringMetadata)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.part_area_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.structure_type_) -
      reinterpret_cast<char*>(&_impl_.part_area_)) + sizeof(_impl_.structure_type_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* VectorBlock_MicroStructuringMetadata::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const VectorBlock_MicroStructuringMetadata& this_ = static_cast<const VectorBlock_MicroStructuringMetadata&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* VectorBlock_MicroStructuringMetadata::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const VectorBlock_MicroStructuringMetadata& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.VectorBlock.MicroStructuringMetadata)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .open_vector_format.VectorBlock.PartArea part_area = 1;
          if (this_._internal_part_area() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_part_area(), target);
          }

          // .open_vector_format.VectorBlock.StructureType structure_type = 2;
          if (this_._internal_structure_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this_._internal_structure_type(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.VectorBlock.MicroStructuringMetadata)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t VectorBlock_MicroStructuringMetadata::ByteSizeLong(const MessageLite& base) {
          const VectorBlock_MicroStructuringMetadata& this_ = static_cast<const VectorBlock_MicroStructuringMetadata&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t VectorBlock_MicroStructuringMetadata::ByteSizeLong() const {
          const VectorBlock_MicroStructuringMetadata& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:open_vector_format.VectorBlock.MicroStructuringMetadata)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .open_vector_format.VectorBlock.PartArea part_area = 1;
            if (this_._internal_part_area() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_part_area());
            }
            // .open_vector_format.VectorBlock.StructureType structure_type = 2;
            if (this_._internal_structure_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_structure_type());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void VectorBlock_MicroStructuringMetadata::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<VectorBlock_MicroStructuringMetadata*>(&to_msg);
  auto& from = static_cast<const VectorBlock_MicroStructuringMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.VectorBlock.MicroStructuringMetadata)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_part_area() != 0) {
    _this->_impl_.part_area_ = from._impl_.part_area_;
  }
  if (from._internal_structure_type() != 0) {
    _this->_impl_.structure_type_ = from._impl_.structure_type_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VectorBlock_MicroStructuringMetadata::CopyFrom(const VectorBlock_MicroStructuringMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.VectorBlock.MicroStructuringMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void VectorBlock_MicroStructuringMetadata::InternalSwap(VectorBlock_MicroStructuringMetadata* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VectorBlock_MicroStructuringMetadata, _impl_.structure_type_)
      + sizeof(VectorBlock_MicroStructuringMetadata::_impl_.structure_type_)
      - PROTOBUF_FIELD_OFFSET(VectorBlock_MicroStructuringMetadata, _impl_.part_area_)>(
          reinterpret_cast<char*>(&_impl_.part_area_),
          reinterpret_cast<char*>(&other->_impl_.part_area_));
}

::google::protobuf::Metadata VectorBlock_MicroStructuringMetadata::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class VectorBlock_PolishingMetadata::_Internal {
 public:
};

VectorBlock_PolishingMetadata::VectorBlock_PolishingMetadata(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:open_vector_format.VectorBlock.PolishingMetadata)
}
VectorBlock_PolishingMetadata::VectorBlock_PolishingMetadata(
    ::google::protobuf::Arena* arena,
    const VectorBlock_PolishingMetadata& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  VectorBlock_PolishingMetadata* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:open_vector_format.VectorBlock.PolishingMetadata)
}

inline void* VectorBlock_PolishingMetadata::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) VectorBlock_PolishingMetadata(arena);
}
constexpr auto VectorBlock_PolishingMetadata::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(VectorBlock_PolishingMetadata),
                                            alignof(VectorBlock_PolishingMetadata));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull VectorBlock_PolishingMetadata::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_VectorBlock_PolishingMetadata_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &VectorBlock_PolishingMetadata::MergeImpl,
        ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<VectorBlock_PolishingMetadata>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &VectorBlock_PolishingMetadata::SharedDtor,
        ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<VectorBlock_PolishingMetadata>(), &VectorBlock_PolishingMetadata::ByteSizeLong,
            &VectorBlock_PolishingMetadata::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(VectorBlock_PolishingMetadata, _impl_._cached_size_),
        false,
    },
    &VectorBlock_PolishingMetadata::kDescriptorMethods,
    &descriptor_table_open_5fvector_5fformat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* VectorBlock_PolishingMetadata::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> VectorBlock_PolishingMetadata::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::open_vector_format::VectorBlock_PolishingMetadata>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata VectorBlock_PolishingMetadata::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class VectorBlock_LineSequence::_Internal {
 public:
};

VectorBlock_LineSequence::VectorBlock_LineSequence(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.VectorBlock.LineSequence)
}
inline PROTOBUF_NDEBUG_INLINE VectorBlock_LineSequence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::open_vector_format::VectorBlock_LineSequence& from_msg)
      : points_{visibility, arena, from.points_},
        _cached_size_{0} {}

VectorBlock_LineSequence::VectorBlock_LineSequence(
    ::google::protobuf::Arena* arena,
    const VectorBlock_LineSequence& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  VectorBlock_LineSequence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:open_vector_format.VectorBlock.LineSequence)
}
inline PROTOBUF_NDEBUG_INLINE VectorBlock_LineSequence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : points_{visibility, arena},
        _cached_size_{0} {}

inline void VectorBlock_LineSequence::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
VectorBlock_LineSequence::~VectorBlock_LineSequence() {
  // @@protoc_insertion_point(destructor:open_vector_format.VectorBlock.LineSequence)
  SharedDtor(*this);
}
inline void VectorBlock_LineSequence::SharedDtor(MessageLite& self) {
  VectorBlock_LineSequence& this_ = static_cast<VectorBlock_LineSequence&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* VectorBlock_LineSequence::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) VectorBlock_LineSequence(arena);
}
constexpr auto VectorBlock_LineSequence::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(VectorBlock_LineSequence, _impl_.points_) +
          decltype(VectorBlock_LineSequence::_impl_.points_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(VectorBlock_LineSequence), alignof(VectorBlock_LineSequence), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&VectorBlock_LineSequence::PlacementNew_,
                                 sizeof(VectorBlock_LineSequence),
                                 alignof(VectorBlock_LineSequence));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull VectorBlock_LineSequence::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_VectorBlock_LineSequence_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &VectorBlock_LineSequence::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<VectorBlock_LineSequence>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &VectorBlock_LineSequence::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<VectorBlock_LineSequence>(), &VectorBlock_LineSequence::ByteSizeLong,
            &VectorBlock_LineSequence::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(VectorBlock_LineSequence, _impl_._cached_size_),
        false,
    },
    &VectorBlock_LineSequence::kDescriptorMethods,
    &descriptor_table_open_5fvector_5fformat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* VectorBlock_LineSequence::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> VectorBlock_LineSequence::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::open_vector_format::VectorBlock_LineSequence>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated float points = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(VectorBlock_LineSequence, _impl_.points_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated float points = 1;
    {PROTOBUF_FIELD_OFFSET(VectorBlock_LineSequence, _impl_.points_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void VectorBlock_LineSequence::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.VectorBlock.LineSequence)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.points_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* VectorBlock_LineSequence::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const VectorBlock_LineSequence& this_ = static_cast<const VectorBlock_LineSequence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* VectorBlock_LineSequence::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const VectorBlock_LineSequence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.VectorBlock.LineSequence)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated float points = 1;
          if (this_._internal_points_size() > 0) {
            target = stream->WriteFixedPacked(1, this_._internal_points(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.VectorBlock.LineSequence)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t VectorBlock_LineSequence::ByteSizeLong(const MessageLite& base) {
          const VectorBlock_LineSequence& this_ = static_cast<const VectorBlock_LineSequence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t VectorBlock_LineSequence::ByteSizeLong() const {
          const VectorBlock_LineSequence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:open_vector_format.VectorBlock.LineSequence)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated float points = 1;
            {
              std::size_t data_size = std::size_t{4} *
                  ::_pbi::FromIntSize(this_._internal_points_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void VectorBlock_LineSequence::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<VectorBlock_LineSequence*>(&to_msg);
  auto& from = static_cast<const VectorBlock_LineSequence&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.VectorBlock.LineSequence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_points()->MergeFrom(from._internal_points());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VectorBlock_LineSequence::CopyFrom(const VectorBlock_LineSequence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.VectorBlock.LineSequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void VectorBlock_LineSequence::InternalSwap(VectorBlock_LineSequence* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.points_.InternalSwap(&other->_impl_.points_);
}

::google::protobuf::Metadata VectorBlock_LineSequence::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class VectorBlock_LineSequence3D::_Internal {
 public:
};

VectorBlock_LineSequence3D::VectorBlock_LineSequence3D(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.VectorBlock.LineSequence3D)
}
inline PROTOBUF_NDEBUG_INLINE VectorBlock_LineSequence3D::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::open_vector_format::VectorBlock_LineSequence3D& from_msg)
      : points_{visibility, arena, from.points_},
        _cached_size_{0} {}

VectorBlock_LineSequence3D::VectorBlock_LineSequence3D(
    ::google::protobuf::Arena* arena,
    const VectorBlock_LineSequence3D& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  VectorBlock_LineSequence3D* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:open_vector_format.VectorBlock.LineSequence3D)
}
inline PROTOBUF_NDEBUG_INLINE VectorBlock_LineSequence3D::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : points_{visibility, arena},
        _cached_size_{0} {}

inline void VectorBlock_LineSequence3D::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
VectorBlock_LineSequence3D::~VectorBlock_LineSequence3D() {
  // @@protoc_insertion_point(destructor:open_vector_format.VectorBlock.LineSequence3D)
  SharedDtor(*this);
}
inline void VectorBlock_LineSequence3D::SharedDtor(MessageLite& self) {
  VectorBlock_LineSequence3D& this_ = static_cast<VectorBlock_LineSequence3D&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* VectorBlock_LineSequence3D::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) VectorBlock_LineSequence3D(arena);
}
constexpr auto VectorBlock_LineSequence3D::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(VectorBlock_LineSequence3D, _impl_.points_) +
          decltype(VectorBlock_LineSequence3D::_impl_.points_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(VectorBlock_LineSequence3D), alignof(VectorBlock_LineSequence3D), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&VectorBlock_LineSequence3D::PlacementNew_,
                                 sizeof(VectorBlock_LineSequence3D),
                                 alignof(VectorBlock_LineSequence3D));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull VectorBlock_LineSequence3D::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_VectorBlock_LineSequence3D_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &VectorBlock_LineSequence3D::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<VectorBlock_LineSequence3D>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &VectorBlock_LineSequence3D::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<VectorBlock_LineSequence3D>(), &VectorBlock_LineSequence3D::ByteSizeLong,
            &VectorBlock_LineSequence3D::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(VectorBlock_LineSequence3D, _impl_._cached_size_),
        false,
    },
    &VectorBlock_LineSequence3D::kDescriptorMethods,
    &descriptor_table_open_5fvector_5fformat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* VectorBlock_LineSequence3D::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> VectorBlock_LineSequence3D::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::open_vector_format::VectorBlock_LineSequence3D>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated float points = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(VectorBlock_LineSequence3D, _impl_.points_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated float points = 1;
    {PROTOBUF_FIELD_OFFSET(VectorBlock_LineSequence3D, _impl_.points_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void VectorBlock_LineSequence3D::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.VectorBlock.LineSequence3D)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.points_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* VectorBlock_LineSequence3D::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const VectorBlock_LineSequence3D& this_ = static_cast<const VectorBlock_LineSequence3D&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* VectorBlock_LineSequence3D::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const VectorBlock_LineSequence3D& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.VectorBlock.LineSequence3D)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated float points = 1;
          if (this_._internal_points_size() > 0) {
            target = stream->WriteFixedPacked(1, this_._internal_points(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.VectorBlock.LineSequence3D)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t VectorBlock_LineSequence3D::ByteSizeLong(const MessageLite& base) {
          const VectorBlock_LineSequence3D& this_ = static_cast<const VectorBlock_LineSequence3D&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t VectorBlock_LineSequence3D::ByteSizeLong() const {
          const VectorBlock_LineSequence3D& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:open_vector_format.VectorBlock.LineSequence3D)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated float points = 1;
            {
              std::size_t data_size = std::size_t{4} *
                  ::_pbi::FromIntSize(this_._internal_points_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void VectorBlock_LineSequence3D::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<VectorBlock_LineSequence3D*>(&to_msg);
  auto& from = static_cast<const VectorBlock_LineSequence3D&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.VectorBlock.LineSequence3D)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_points()->MergeFrom(from._internal_points());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VectorBlock_LineSequence3D::CopyFrom(const VectorBlock_LineSequence3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.VectorBlock.LineSequence3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void VectorBlock_LineSequence3D::InternalSwap(VectorBlock_LineSequence3D* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.points_.InternalSwap(&other->_impl_.points_);
}

::google::protobuf::Metadata VectorBlock_LineSequence3D::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class VectorBlock_Hatches::_Internal {
 public:
};

VectorBlock_Hatches::VectorBlock_Hatches(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.VectorBlock.Hatches)
}
inline PROTOBUF_NDEBUG_INLINE VectorBlock_Hatches::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::open_vector_format::VectorBlock_Hatches& from_msg)
      : points_{visibility, arena, from.points_},
        _cached_size_{0} {}

VectorBlock_Hatches::VectorBlock_Hatches(
    ::google::protobuf::Arena* arena,
    const VectorBlock_Hatches& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  VectorBlock_Hatches* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:open_vector_format.VectorBlock.Hatches)
}
inline PROTOBUF_NDEBUG_INLINE VectorBlock_Hatches::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : points_{visibility, arena},
        _cached_size_{0} {}

inline void VectorBlock_Hatches::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
VectorBlock_Hatches::~VectorBlock_Hatches() {
  // @@protoc_insertion_point(destructor:open_vector_format.VectorBlock.Hatches)
  SharedDtor(*this);
}
inline void VectorBlock_Hatches::SharedDtor(MessageLite& self) {
  VectorBlock_Hatches& this_ = static_cast<VectorBlock_Hatches&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* VectorBlock_Hatches::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) VectorBlock_Hatches(arena);
}
constexpr auto VectorBlock_Hatches::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(VectorBlock_Hatches, _impl_.points_) +
          decltype(VectorBlock_Hatches::_impl_.points_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(VectorBlock_Hatches), alignof(VectorBlock_Hatches), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&VectorBlock_Hatches::PlacementNew_,
                                 sizeof(VectorBlock_Hatches),
                                 alignof(VectorBlock_Hatches));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull VectorBlock_Hatches::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_VectorBlock_Hatches_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &VectorBlock_Hatches::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<VectorBlock_Hatches>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &VectorBlock_Hatches::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<VectorBlock_Hatches>(), &VectorBlock_Hatches::ByteSizeLong,
            &VectorBlock_Hatches::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(VectorBlock_Hatches, _impl_._cached_size_),
        false,
    },
    &VectorBlock_Hatches::kDescriptorMethods,
    &descriptor_table_open_5fvector_5fformat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* VectorBlock_Hatches::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> VectorBlock_Hatches::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::open_vector_format::VectorBlock_Hatches>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated float points = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(VectorBlock_Hatches, _impl_.points_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated float points = 1;
    {PROTOBUF_FIELD_OFFSET(VectorBlock_Hatches, _impl_.points_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void VectorBlock_Hatches::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.VectorBlock.Hatches)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.points_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* VectorBlock_Hatches::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const VectorBlock_Hatches& this_ = static_cast<const VectorBlock_Hatches&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* VectorBlock_Hatches::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const VectorBlock_Hatches& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.VectorBlock.Hatches)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated float points = 1;
          if (this_._internal_points_size() > 0) {
            target = stream->WriteFixedPacked(1, this_._internal_points(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.VectorBlock.Hatches)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t VectorBlock_Hatches::ByteSizeLong(const MessageLite& base) {
          const VectorBlock_Hatches& this_ = static_cast<const VectorBlock_Hatches&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t VectorBlock_Hatches::ByteSizeLong() const {
          const VectorBlock_Hatches& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:open_vector_format.VectorBlock.Hatches)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated float points = 1;
            {
              std::size_t data_size = std::size_t{4} *
                  ::_pbi::FromIntSize(this_._internal_points_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void VectorBlock_Hatches::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<VectorBlock_Hatches*>(&to_msg);
  auto& from = static_cast<const VectorBlock_Hatches&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.VectorBlock.Hatches)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_points()->MergeFrom(from._internal_points());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VectorBlock_Hatches::CopyFrom(const VectorBlock_Hatches& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.VectorBlock.Hatches)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void VectorBlock_Hatches::InternalSwap(VectorBlock_Hatches* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.points_.InternalSwap(&other->_impl_.points_);
}

::google::protobuf::Metadata VectorBlock_Hatches::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class VectorBlock_Hatches3D::_Internal {
 public:
};

VectorBlock_Hatches3D::VectorBlock_Hatches3D(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.VectorBlock.Hatches3D)
}
inline PROTOBUF_NDEBUG_INLINE VectorBlock_Hatches3D::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::open_vector_format::VectorBlock_Hatches3D& from_msg)
      : points_{visibility, arena, from.points_},
        _cached_size_{0} {}

VectorBlock_Hatches3D::VectorBlock_Hatches3D(
    ::google::protobuf::Arena* arena,
    const VectorBlock_Hatches3D& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  VectorBlock_Hatches3D* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:open_vector_format.VectorBlock.Hatches3D)
}
inline PROTOBUF_NDEBUG_INLINE VectorBlock_Hatches3D::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : points_{visibility, arena},
        _cached_size_{0} {}

inline void VectorBlock_Hatches3D::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
VectorBlock_Hatches3D::~VectorBlock_Hatches3D() {
  // @@protoc_insertion_point(destructor:open_vector_format.VectorBlock.Hatches3D)
  SharedDtor(*this);
}
inline void VectorBlock_Hatches3D::SharedDtor(MessageLite& self) {
  VectorBlock_Hatches3D& this_ = static_cast<VectorBlock_Hatches3D&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* VectorBlock_Hatches3D::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) VectorBlock_Hatches3D(arena);
}
constexpr auto VectorBlock_Hatches3D::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(VectorBlock_Hatches3D, _impl_.points_) +
          decltype(VectorBlock_Hatches3D::_impl_.points_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(VectorBlock_Hatches3D), alignof(VectorBlock_Hatches3D), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&VectorBlock_Hatches3D::PlacementNew_,
                                 sizeof(VectorBlock_Hatches3D),
                                 alignof(VectorBlock_Hatches3D));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull VectorBlock_Hatches3D::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_VectorBlock_Hatches3D_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &VectorBlock_Hatches3D::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<VectorBlock_Hatches3D>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &VectorBlock_Hatches3D::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<VectorBlock_Hatches3D>(), &VectorBlock_Hatches3D::ByteSizeLong,
            &VectorBlock_Hatches3D::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(VectorBlock_Hatches3D, _impl_._cached_size_),
        false,
    },
    &VectorBlock_Hatches3D::kDescriptorMethods,
    &descriptor_table_open_5fvector_5fformat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* VectorBlock_Hatches3D::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> VectorBlock_Hatches3D::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::open_vector_format::VectorBlock_Hatches3D>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated float points = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(VectorBlock_Hatches3D, _impl_.points_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated float points = 1;
    {PROTOBUF_FIELD_OFFSET(VectorBlock_Hatches3D, _impl_.points_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void VectorBlock_Hatches3D::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.VectorBlock.Hatches3D)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.points_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* VectorBlock_Hatches3D::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const VectorBlock_Hatches3D& this_ = static_cast<const VectorBlock_Hatches3D&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* VectorBlock_Hatches3D::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const VectorBlock_Hatches3D& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.VectorBlock.Hatches3D)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated float points = 1;
          if (this_._internal_points_size() > 0) {
            target = stream->WriteFixedPacked(1, this_._internal_points(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.VectorBlock.Hatches3D)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t VectorBlock_Hatches3D::ByteSizeLong(const MessageLite& base) {
          const VectorBlock_Hatches3D& this_ = static_cast<const VectorBlock_Hatches3D&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t VectorBlock_Hatches3D::ByteSizeLong() const {
          const VectorBlock_Hatches3D& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:open_vector_format.VectorBlock.Hatches3D)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated float points = 1;
            {
              std::size_t data_size = std::size_t{4} *
                  ::_pbi::FromIntSize(this_._internal_points_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void VectorBlock_Hatches3D::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<VectorBlock_Hatches3D*>(&to_msg);
  auto& from = static_cast<const VectorBlock_Hatches3D&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.VectorBlock.Hatches3D)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_points()->MergeFrom(from._internal_points());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VectorBlock_Hatches3D::CopyFrom(const VectorBlock_Hatches3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.VectorBlock.Hatches3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void VectorBlock_Hatches3D::InternalSwap(VectorBlock_Hatches3D* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.points_.InternalSwap(&other->_impl_.points_);
}

::google::protobuf::Metadata VectorBlock_Hatches3D::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class VectorBlock_PointSequence::_Internal {
 public:
};

VectorBlock_PointSequence::VectorBlock_PointSequence(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.VectorBlock.PointSequence)
}
inline PROTOBUF_NDEBUG_INLINE VectorBlock_PointSequence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::open_vector_format::VectorBlock_PointSequence& from_msg)
      : points_{visibility, arena, from.points_},
        _cached_size_{0} {}

VectorBlock_PointSequence::VectorBlock_PointSequence(
    ::google::protobuf::Arena* arena,
    const VectorBlock_PointSequence& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  VectorBlock_PointSequence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:open_vector_format.VectorBlock.PointSequence)
}
inline PROTOBUF_NDEBUG_INLINE VectorBlock_PointSequence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : points_{visibility, arena},
        _cached_size_{0} {}

inline void VectorBlock_PointSequence::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
VectorBlock_PointSequence::~VectorBlock_PointSequence() {
  // @@protoc_insertion_point(destructor:open_vector_format.VectorBlock.PointSequence)
  SharedDtor(*this);
}
inline void VectorBlock_PointSequence::SharedDtor(MessageLite& self) {
  VectorBlock_PointSequence& this_ = static_cast<VectorBlock_PointSequence&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* VectorBlock_PointSequence::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) VectorBlock_PointSequence(arena);
}
constexpr auto VectorBlock_PointSequence::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(VectorBlock_PointSequence, _impl_.points_) +
          decltype(VectorBlock_PointSequence::_impl_.points_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(VectorBlock_PointSequence), alignof(VectorBlock_PointSequence), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&VectorBlock_PointSequence::PlacementNew_,
                                 sizeof(VectorBlock_PointSequence),
                                 alignof(VectorBlock_PointSequence));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull VectorBlock_PointSequence::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_VectorBlock_PointSequence_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &VectorBlock_PointSequence::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<VectorBlock_PointSequence>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &VectorBlock_PointSequence::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<VectorBlock_PointSequence>(), &VectorBlock_PointSequence::ByteSizeLong,
            &VectorBlock_PointSequence::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(VectorBlock_PointSequence, _impl_._cached_size_),
        false,
    },
    &VectorBlock_PointSequence::kDescriptorMethods,
    &descriptor_table_open_5fvector_5fformat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* VectorBlock_PointSequence::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> VectorBlock_PointSequence::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::open_vector_format::VectorBlock_PointSequence>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated float points = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(VectorBlock_PointSequence, _impl_.points_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated float points = 1;
    {PROTOBUF_FIELD_OFFSET(VectorBlock_PointSequence, _impl_.points_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void VectorBlock_PointSequence::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.VectorBlock.PointSequence)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.points_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* VectorBlock_PointSequence::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const VectorBlock_PointSequence& this_ = static_cast<const VectorBlock_PointSequence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* VectorBlock_PointSequence::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const VectorBlock_PointSequence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.VectorBlock.PointSequence)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated float points = 1;
          if (this_._internal_points_size() > 0) {
            target = stream->WriteFixedPacked(1, this_._internal_points(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.VectorBlock.PointSequence)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t VectorBlock_PointSequence::ByteSizeLong(const MessageLite& base) {
          const VectorBlock_PointSequence& this_ = static_cast<const VectorBlock_PointSequence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t VectorBlock_PointSequence::ByteSizeLong() const {
          const VectorBlock_PointSequence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:open_vector_format.VectorBlock.PointSequence)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated float points = 1;
            {
              std::size_t data_size = std::size_t{4} *
                  ::_pbi::FromIntSize(this_._internal_points_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void VectorBlock_PointSequence::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<VectorBlock_PointSequence*>(&to_msg);
  auto& from = static_cast<const VectorBlock_PointSequence&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.VectorBlock.PointSequence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_points()->MergeFrom(from._internal_points());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VectorBlock_PointSequence::CopyFrom(const VectorBlock_PointSequence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.VectorBlock.PointSequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void VectorBlock_PointSequence::InternalSwap(VectorBlock_PointSequence* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.points_.InternalSwap(&other->_impl_.points_);
}

::google::protobuf::Metadata VectorBlock_PointSequence::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class VectorBlock_PointSequence3D::_Internal {
 public:
};

VectorBlock_PointSequence3D::VectorBlock_PointSequence3D(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.VectorBlock.PointSequence3D)
}
inline PROTOBUF_NDEBUG_INLINE VectorBlock_PointSequence3D::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::open_vector_format::VectorBlock_PointSequence3D& from_msg)
      : points_{visibility, arena, from.points_},
        _cached_size_{0} {}

VectorBlock_PointSequence3D::VectorBlock_PointSequence3D(
    ::google::protobuf::Arena* arena,
    const VectorBlock_PointSequence3D& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  VectorBlock_PointSequence3D* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:open_vector_format.VectorBlock.PointSequence3D)
}
inline PROTOBUF_NDEBUG_INLINE VectorBlock_PointSequence3D::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : points_{visibility, arena},
        _cached_size_{0} {}

inline void VectorBlock_PointSequence3D::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
VectorBlock_PointSequence3D::~VectorBlock_PointSequence3D() {
  // @@protoc_insertion_point(destructor:open_vector_format.VectorBlock.PointSequence3D)
  SharedDtor(*this);
}
inline void VectorBlock_PointSequence3D::SharedDtor(MessageLite& self) {
  VectorBlock_PointSequence3D& this_ = static_cast<VectorBlock_PointSequence3D&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* VectorBlock_PointSequence3D::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) VectorBlock_PointSequence3D(arena);
}
constexpr auto VectorBlock_PointSequence3D::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(VectorBlock_PointSequence3D, _impl_.points_) +
          decltype(VectorBlock_PointSequence3D::_impl_.points_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(VectorBlock_PointSequence3D), alignof(VectorBlock_PointSequence3D), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&VectorBlock_PointSequence3D::PlacementNew_,
                                 sizeof(VectorBlock_PointSequence3D),
                                 alignof(VectorBlock_PointSequence3D));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull VectorBlock_PointSequence3D::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_VectorBlock_PointSequence3D_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &VectorBlock_PointSequence3D::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<VectorBlock_PointSequence3D>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &VectorBlock_PointSequence3D::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<VectorBlock_PointSequence3D>(), &VectorBlock_PointSequence3D::ByteSizeLong,
            &VectorBlock_PointSequence3D::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(VectorBlock_PointSequence3D, _impl_._cached_size_),
        false,
    },
    &VectorBlock_PointSequence3D::kDescriptorMethods,
    &descriptor_table_open_5fvector_5fformat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* VectorBlock_PointSequence3D::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> VectorBlock_PointSequence3D::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::open_vector_format::VectorBlock_PointSequence3D>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated float points = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(VectorBlock_PointSequence3D, _impl_.points_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated float points = 1;
    {PROTOBUF_FIELD_OFFSET(VectorBlock_PointSequence3D, _impl_.points_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void VectorBlock_PointSequence3D::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.VectorBlock.PointSequence3D)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.points_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* VectorBlock_PointSequence3D::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const VectorBlock_PointSequence3D& this_ = static_cast<const VectorBlock_PointSequence3D&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* VectorBlock_PointSequence3D::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const VectorBlock_PointSequence3D& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.VectorBlock.PointSequence3D)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated float points = 1;
          if (this_._internal_points_size() > 0) {
            target = stream->WriteFixedPacked(1, this_._internal_points(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.VectorBlock.PointSequence3D)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t VectorBlock_PointSequence3D::ByteSizeLong(const MessageLite& base) {
          const VectorBlock_PointSequence3D& this_ = static_cast<const VectorBlock_PointSequence3D&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t VectorBlock_PointSequence3D::ByteSizeLong() const {
          const VectorBlock_PointSequence3D& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:open_vector_format.VectorBlock.PointSequence3D)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated float points = 1;
            {
              std::size_t data_size = std::size_t{4} *
                  ::_pbi::FromIntSize(this_._internal_points_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void VectorBlock_PointSequence3D::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<VectorBlock_PointSequence3D*>(&to_msg);
  auto& from = static_cast<const VectorBlock_PointSequence3D&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.VectorBlock.PointSequence3D)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_points()->MergeFrom(from._internal_points());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VectorBlock_PointSequence3D::CopyFrom(const VectorBlock_PointSequence3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.VectorBlock.PointSequence3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void VectorBlock_PointSequence3D::InternalSwap(VectorBlock_PointSequence3D* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.points_.InternalSwap(&other->_impl_.points_);
}

::google::protobuf::Metadata VectorBlock_PointSequence3D::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class VectorBlock_Arcs::_Internal {
 public:
};

VectorBlock_Arcs::VectorBlock_Arcs(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.VectorBlock.Arcs)
}
inline PROTOBUF_NDEBUG_INLINE VectorBlock_Arcs::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::open_vector_format::VectorBlock_Arcs& from_msg)
      : centers_{visibility, arena, from.centers_},
        _cached_size_{0} {}

VectorBlock_Arcs::VectorBlock_Arcs(
    ::google::protobuf::Arena* arena,
    const VectorBlock_Arcs& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  VectorBlock_Arcs* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, angle_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, angle_),
           offsetof(Impl_, start_dy_) -
               offsetof(Impl_, angle_) +
               sizeof(Impl_::start_dy_));

  // @@protoc_insertion_point(copy_constructor:open_vector_format.VectorBlock.Arcs)
}
inline PROTOBUF_NDEBUG_INLINE VectorBlock_Arcs::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : centers_{visibility, arena},
        _cached_size_{0} {}

inline void VectorBlock_Arcs::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, angle_),
           0,
           offsetof(Impl_, start_dy_) -
               offsetof(Impl_, angle_) +
               sizeof(Impl_::start_dy_));
}
VectorBlock_Arcs::~VectorBlock_Arcs() {
  // @@protoc_insertion_point(destructor:open_vector_format.VectorBlock.Arcs)
  SharedDtor(*this);
}
inline void VectorBlock_Arcs::SharedDtor(MessageLite& self) {
  VectorBlock_Arcs& this_ = static_cast<VectorBlock_Arcs&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* VectorBlock_Arcs::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) VectorBlock_Arcs(arena);
}
constexpr auto VectorBlock_Arcs::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(VectorBlock_Arcs, _impl_.centers_) +
          decltype(VectorBlock_Arcs::_impl_.centers_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(VectorBlock_Arcs), alignof(VectorBlock_Arcs), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&VectorBlock_Arcs::PlacementNew_,
                                 sizeof(VectorBlock_Arcs),
                                 alignof(VectorBlock_Arcs));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull VectorBlock_Arcs::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_VectorBlock_Arcs_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &VectorBlock_Arcs::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<VectorBlock_Arcs>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &VectorBlock_Arcs::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<VectorBlock_Arcs>(), &VectorBlock_Arcs::ByteSizeLong,
            &VectorBlock_Arcs::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(VectorBlock_Arcs, _impl_._cached_size_),
        false,
    },
    &VectorBlock_Arcs::kDescriptorMethods,
    &descriptor_table_open_5fvector_5fformat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* VectorBlock_Arcs::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> VectorBlock_Arcs::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::open_vector_format::VectorBlock_Arcs>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated float centers = 4;
    {::_pbi::TcParser::FastF32P1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(VectorBlock_Arcs, _impl_.centers_)}},
    // double angle = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(VectorBlock_Arcs, _impl_.angle_)}},
    // float start_dx = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(VectorBlock_Arcs, _impl_.start_dx_)}},
    // float start_dy = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(VectorBlock_Arcs, _impl_.start_dy_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double angle = 1;
    {PROTOBUF_FIELD_OFFSET(VectorBlock_Arcs, _impl_.angle_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // float start_dx = 2;
    {PROTOBUF_FIELD_OFFSET(VectorBlock_Arcs, _impl_.start_dx_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float start_dy = 3;
    {PROTOBUF_FIELD_OFFSET(VectorBlock_Arcs, _impl_.start_dy_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // repeated float centers = 4;
    {PROTOBUF_FIELD_OFFSET(VectorBlock_Arcs, _impl_.centers_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void VectorBlock_Arcs::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.VectorBlock.Arcs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.centers_.Clear();
  ::memset(&_impl_.angle_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.start_dy_) -
      reinterpret_cast<char*>(&_impl_.angle_)) + sizeof(_impl_.start_dy_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* VectorBlock_Arcs::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const VectorBlock_Arcs& this_ = static_cast<const VectorBlock_Arcs&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* VectorBlock_Arcs::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const VectorBlock_Arcs& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.VectorBlock.Arcs)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // double angle = 1;
          if (::absl::bit_cast<::uint64_t>(this_._internal_angle()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                1, this_._internal_angle(), target);
          }

          // float start_dx = 2;
          if (::absl::bit_cast<::uint32_t>(this_._internal_start_dx()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_start_dx(), target);
          }

          // float start_dy = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_start_dy()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_start_dy(), target);
          }

          // repeated float centers = 4;
          if (this_._internal_centers_size() > 0) {
            target = stream->WriteFixedPacked(4, this_._internal_centers(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.VectorBlock.Arcs)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t VectorBlock_Arcs::ByteSizeLong(const MessageLite& base) {
          const VectorBlock_Arcs& this_ = static_cast<const VectorBlock_Arcs&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t VectorBlock_Arcs::ByteSizeLong() const {
          const VectorBlock_Arcs& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:open_vector_format.VectorBlock.Arcs)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated float centers = 4;
            {
              std::size_t data_size = std::size_t{4} *
                  ::_pbi::FromIntSize(this_._internal_centers_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
          }
           {
            // double angle = 1;
            if (::absl::bit_cast<::uint64_t>(this_._internal_angle()) != 0) {
              total_size += 9;
            }
            // float start_dx = 2;
            if (::absl::bit_cast<::uint32_t>(this_._internal_start_dx()) != 0) {
              total_size += 5;
            }
            // float start_dy = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_start_dy()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void VectorBlock_Arcs::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<VectorBlock_Arcs*>(&to_msg);
  auto& from = static_cast<const VectorBlock_Arcs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.VectorBlock.Arcs)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_centers()->MergeFrom(from._internal_centers());
  if (::absl::bit_cast<::uint64_t>(from._internal_angle()) != 0) {
    _this->_impl_.angle_ = from._impl_.angle_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_start_dx()) != 0) {
    _this->_impl_.start_dx_ = from._impl_.start_dx_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_start_dy()) != 0) {
    _this->_impl_.start_dy_ = from._impl_.start_dy_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VectorBlock_Arcs::CopyFrom(const VectorBlock_Arcs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.VectorBlock.Arcs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void VectorBlock_Arcs::InternalSwap(VectorBlock_Arcs* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.centers_.InternalSwap(&other->_impl_.centers_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VectorBlock_Arcs, _impl_.start_dy_)
      + sizeof(VectorBlock_Arcs::_impl_.start_dy_)
      - PROTOBUF_FIELD_OFFSET(VectorBlock_Arcs, _impl_.angle_)>(
          reinterpret_cast<char*>(&_impl_.angle_),
          reinterpret_cast<char*>(&other->_impl_.angle_));
}

::google::protobuf::Metadata VectorBlock_Arcs::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class VectorBlock_Arcs3D::_Internal {
 public:
};

VectorBlock_Arcs3D::VectorBlock_Arcs3D(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.VectorBlock.Arcs3D)
}
inline PROTOBUF_NDEBUG_INLINE VectorBlock_Arcs3D::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::open_vector_format::VectorBlock_Arcs3D& from_msg)
      : centers_{visibility, arena, from.centers_},
        _cached_size_{0} {}

VectorBlock_Arcs3D::VectorBlock_Arcs3D(
    ::google::protobuf::Arena* arena,
    const VectorBlock_Arcs3D& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  VectorBlock_Arcs3D* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, angle_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, angle_),
           offsetof(Impl_, start_dz_) -
               offsetof(Impl_, angle_) +
               sizeof(Impl_::start_dz_));

  // @@protoc_insertion_point(copy_constructor:open_vector_format.VectorBlock.Arcs3D)
}
inline PROTOBUF_NDEBUG_INLINE VectorBlock_Arcs3D::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : centers_{visibility, arena},
        _cached_size_{0} {}

inline void VectorBlock_Arcs3D::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, angle_),
           0,
           offsetof(Impl_, start_dz_) -
               offsetof(Impl_, angle_) +
               sizeof(Impl_::start_dz_));
}
VectorBlock_Arcs3D::~VectorBlock_Arcs3D() {
  // @@protoc_insertion_point(destructor:open_vector_format.VectorBlock.Arcs3D)
  SharedDtor(*this);
}
inline void VectorBlock_Arcs3D::SharedDtor(MessageLite& self) {
  VectorBlock_Arcs3D& this_ = static_cast<VectorBlock_Arcs3D&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* VectorBlock_Arcs3D::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) VectorBlock_Arcs3D(arena);
}
constexpr auto VectorBlock_Arcs3D::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(VectorBlock_Arcs3D, _impl_.centers_) +
          decltype(VectorBlock_Arcs3D::_impl_.centers_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(VectorBlock_Arcs3D), alignof(VectorBlock_Arcs3D), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&VectorBlock_Arcs3D::PlacementNew_,
                                 sizeof(VectorBlock_Arcs3D),
                                 alignof(VectorBlock_Arcs3D));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull VectorBlock_Arcs3D::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_VectorBlock_Arcs3D_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &VectorBlock_Arcs3D::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<VectorBlock_Arcs3D>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &VectorBlock_Arcs3D::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<VectorBlock_Arcs3D>(), &VectorBlock_Arcs3D::ByteSizeLong,
            &VectorBlock_Arcs3D::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(VectorBlock_Arcs3D, _impl_._cached_size_),
        false,
    },
    &VectorBlock_Arcs3D::kDescriptorMethods,
    &descriptor_table_open_5fvector_5fformat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* VectorBlock_Arcs3D::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 0, 2> VectorBlock_Arcs3D::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::open_vector_format::VectorBlock_Arcs3D>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // double angle = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(VectorBlock_Arcs3D, _impl_.angle_)}},
    // float start_dx = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(VectorBlock_Arcs3D, _impl_.start_dx_)}},
    // float start_dy = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(VectorBlock_Arcs3D, _impl_.start_dy_)}},
    // float start_dz = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(VectorBlock_Arcs3D, _impl_.start_dz_)}},
    // repeated float centers = 5;
    {::_pbi::TcParser::FastF32P1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(VectorBlock_Arcs3D, _impl_.centers_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // double angle = 1;
    {PROTOBUF_FIELD_OFFSET(VectorBlock_Arcs3D, _impl_.angle_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // float start_dx = 2;
    {PROTOBUF_FIELD_OFFSET(VectorBlock_Arcs3D, _impl_.start_dx_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float start_dy = 3;
    {PROTOBUF_FIELD_OFFSET(VectorBlock_Arcs3D, _impl_.start_dy_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float start_dz = 4;
    {PROTOBUF_FIELD_OFFSET(VectorBlock_Arcs3D, _impl_.start_dz_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // repeated float centers = 5;
    {PROTOBUF_FIELD_OFFSET(VectorBlock_Arcs3D, _impl_.centers_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void VectorBlock_Arcs3D::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.VectorBlock.Arcs3D)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.centers_.Clear();
  ::memset(&_impl_.angle_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.start_dz_) -
      reinterpret_cast<char*>(&_impl_.angle_)) + sizeof(_impl_.start_dz_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* VectorBlock_Arcs3D::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const VectorBlock_Arcs3D& this_ = static_cast<const VectorBlock_Arcs3D&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* VectorBlock_Arcs3D::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const VectorBlock_Arcs3D& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.VectorBlock.Arcs3D)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // double angle = 1;
          if (::absl::bit_cast<::uint64_t>(this_._internal_angle()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                1, this_._internal_angle(), target);
          }

          // float start_dx = 2;
          if (::absl::bit_cast<::uint32_t>(this_._internal_start_dx()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_start_dx(), target);
          }

          // float start_dy = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_start_dy()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_start_dy(), target);
          }

          // float start_dz = 4;
          if (::absl::bit_cast<::uint32_t>(this_._internal_start_dz()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_start_dz(), target);
          }

          // repeated float centers = 5;
          if (this_._internal_centers_size() > 0) {
            target = stream->WriteFixedPacked(5, this_._internal_centers(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.VectorBlock.Arcs3D)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t VectorBlock_Arcs3D::ByteSizeLong(const MessageLite& base) {
          const VectorBlock_Arcs3D& this_ = static_cast<const VectorBlock_Arcs3D&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t VectorBlock_Arcs3D::ByteSizeLong() const {
          const VectorBlock_Arcs3D& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:open_vector_format.VectorBlock.Arcs3D)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated float centers = 5;
            {
              std::size_t data_size = std::size_t{4} *
                  ::_pbi::FromIntSize(this_._internal_centers_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
          }
           {
            // double angle = 1;
            if (::absl::bit_cast<::uint64_t>(this_._internal_angle()) != 0) {
              total_size += 9;
            }
            // float start_dx = 2;
            if (::absl::bit_cast<::uint32_t>(this_._internal_start_dx()) != 0) {
              total_size += 5;
            }
            // float start_dy = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_start_dy()) != 0) {
              total_size += 5;
            }
            // float start_dz = 4;
            if (::absl::bit_cast<::uint32_t>(this_._internal_start_dz()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void VectorBlock_Arcs3D::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<VectorBlock_Arcs3D*>(&to_msg);
  auto& from = static_cast<const VectorBlock_Arcs3D&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.VectorBlock.Arcs3D)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_centers()->MergeFrom(from._internal_centers());
  if (::absl::bit_cast<::uint64_t>(from._internal_angle()) != 0) {
    _this->_impl_.angle_ = from._impl_.angle_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_start_dx()) != 0) {
    _this->_impl_.start_dx_ = from._impl_.start_dx_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_start_dy()) != 0) {
    _this->_impl_.start_dy_ = from._impl_.start_dy_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_start_dz()) != 0) {
    _this->_impl_.start_dz_ = from._impl_.start_dz_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VectorBlock_Arcs3D::CopyFrom(const VectorBlock_Arcs3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.VectorBlock.Arcs3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void VectorBlock_Arcs3D::InternalSwap(VectorBlock_Arcs3D* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.centers_.InternalSwap(&other->_impl_.centers_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VectorBlock_Arcs3D, _impl_.start_dz_)
      + sizeof(VectorBlock_Arcs3D::_impl_.start_dz_)
      - PROTOBUF_FIELD_OFFSET(VectorBlock_Arcs3D, _impl_.angle_)>(
          reinterpret_cast<char*>(&_impl_.angle_),
          reinterpret_cast<char*>(&other->_impl_.angle_));
}

::google::protobuf::Metadata VectorBlock_Arcs3D::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class VectorBlock_Ellipses::_Internal {
 public:
  using HasBits =
      decltype(std::declval<VectorBlock_Ellipses>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(VectorBlock_Ellipses, _impl_._has_bits_);
};

VectorBlock_Ellipses::VectorBlock_Ellipses(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.VectorBlock.Ellipses)
}
inline PROTOBUF_NDEBUG_INLINE VectorBlock_Ellipses::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::open_vector_format::VectorBlock_Ellipses& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

VectorBlock_Ellipses::VectorBlock_Ellipses(
    ::google::protobuf::Arena* arena,
    const VectorBlock_Ellipses& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  VectorBlock_Ellipses* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.ellipses_arcs_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::open_vector_format::VectorBlock_Arcs>(
                              arena, *from._impl_.ellipses_arcs_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, a_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, a_),
           offsetof(Impl_, phi0_) -
               offsetof(Impl_, a_) +
               sizeof(Impl_::phi0_));

  // @@protoc_insertion_point(copy_constructor:open_vector_format.VectorBlock.Ellipses)
}
inline PROTOBUF_NDEBUG_INLINE VectorBlock_Ellipses::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void VectorBlock_Ellipses::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, ellipses_arcs_),
           0,
           offsetof(Impl_, phi0_) -
               offsetof(Impl_, ellipses_arcs_) +
               sizeof(Impl_::phi0_));
}
VectorBlock_Ellipses::~VectorBlock_Ellipses() {
  // @@protoc_insertion_point(destructor:open_vector_format.VectorBlock.Ellipses)
  SharedDtor(*this);
}
inline void VectorBlock_Ellipses::SharedDtor(MessageLite& self) {
  VectorBlock_Ellipses& this_ = static_cast<VectorBlock_Ellipses&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.ellipses_arcs_;
  this_._impl_.~Impl_();
}

inline void* VectorBlock_Ellipses::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) VectorBlock_Ellipses(arena);
}
constexpr auto VectorBlock_Ellipses::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(VectorBlock_Ellipses),
                                            alignof(VectorBlock_Ellipses));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull VectorBlock_Ellipses::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_VectorBlock_Ellipses_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &VectorBlock_Ellipses::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<VectorBlock_Ellipses>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &VectorBlock_Ellipses::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<VectorBlock_Ellipses>(), &VectorBlock_Ellipses::ByteSizeLong,
            &VectorBlock_Ellipses::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(VectorBlock_Ellipses, _impl_._cached_size_),
        false,
    },
    &VectorBlock_Ellipses::kDescriptorMethods,
    &descriptor_table_open_5fvector_5fformat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* VectorBlock_Ellipses::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 0, 2> VectorBlock_Ellipses::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(VectorBlock_Ellipses, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::open_vector_format::VectorBlock_Ellipses>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .open_vector_format.VectorBlock.Arcs ellipses_arcs = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(VectorBlock_Ellipses, _impl_.ellipses_arcs_)}},
    // float a = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(VectorBlock_Ellipses, _impl_.a_)}},
    // float b = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(VectorBlock_Ellipses, _impl_.b_)}},
    // double phi0 = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(VectorBlock_Ellipses, _impl_.phi0_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float a = 1;
    {PROTOBUF_FIELD_OFFSET(VectorBlock_Ellipses, _impl_.a_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float b = 2;
    {PROTOBUF_FIELD_OFFSET(VectorBlock_Ellipses, _impl_.b_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // double phi0 = 3;
    {PROTOBUF_FIELD_OFFSET(VectorBlock_Ellipses, _impl_.phi0_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // .open_vector_format.VectorBlock.Arcs ellipses_arcs = 4;
    {PROTOBUF_FIELD_OFFSET(VectorBlock_Ellipses, _impl_.ellipses_arcs_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::open_vector_format::VectorBlock_Arcs>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void VectorBlock_Ellipses::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.VectorBlock.Ellipses)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.ellipses_arcs_ != nullptr);
    _impl_.ellipses_arcs_->Clear();
  }
  ::memset(&_impl_.a_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.phi0_) -
      reinterpret_cast<char*>(&_impl_.a_)) + sizeof(_impl_.phi0_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* VectorBlock_Ellipses::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const VectorBlock_Ellipses& this_ = static_cast<const VectorBlock_Ellipses&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* VectorBlock_Ellipses::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const VectorBlock_Ellipses& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.VectorBlock.Ellipses)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float a = 1;
          if (::absl::bit_cast<::uint32_t>(this_._internal_a()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_a(), target);
          }

          // float b = 2;
          if (::absl::bit_cast<::uint32_t>(this_._internal_b()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_b(), target);
          }

          // double phi0 = 3;
          if (::absl::bit_cast<::uint64_t>(this_._internal_phi0()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                3, this_._internal_phi0(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .open_vector_format.VectorBlock.Arcs ellipses_arcs = 4;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.ellipses_arcs_, this_._impl_.ellipses_arcs_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.VectorBlock.Ellipses)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t VectorBlock_Ellipses::ByteSizeLong(const MessageLite& base) {
          const VectorBlock_Ellipses& this_ = static_cast<const VectorBlock_Ellipses&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t VectorBlock_Ellipses::ByteSizeLong() const {
          const VectorBlock_Ellipses& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:open_vector_format.VectorBlock.Ellipses)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .open_vector_format.VectorBlock.Arcs ellipses_arcs = 4;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.ellipses_arcs_);
            }
          }
           {
            // float a = 1;
            if (::absl::bit_cast<::uint32_t>(this_._internal_a()) != 0) {
              total_size += 5;
            }
            // float b = 2;
            if (::absl::bit_cast<::uint32_t>(this_._internal_b()) != 0) {
              total_size += 5;
            }
            // double phi0 = 3;
            if (::absl::bit_cast<::uint64_t>(this_._internal_phi0()) != 0) {
              total_size += 9;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void VectorBlock_Ellipses::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<VectorBlock_Ellipses*>(&to_msg);
  auto& from = static_cast<const VectorBlock_Ellipses&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.VectorBlock.Ellipses)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.ellipses_arcs_ != nullptr);
    if (_this->_impl_.ellipses_arcs_ == nullptr) {
      _this->_impl_.ellipses_arcs_ =
          ::google::protobuf::Message::CopyConstruct<::open_vector_format::VectorBlock_Arcs>(arena, *from._impl_.ellipses_arcs_);
    } else {
      _this->_impl_.ellipses_arcs_->MergeFrom(*from._impl_.ellipses_arcs_);
    }
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_a()) != 0) {
    _this->_impl_.a_ = from._impl_.a_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_b()) != 0) {
    _this->_impl_.b_ = from._impl_.b_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_phi0()) != 0) {
    _this->_impl_.phi0_ = from._impl_.phi0_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VectorBlock_Ellipses::CopyFrom(const VectorBlock_Ellipses& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.VectorBlock.Ellipses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void VectorBlock_Ellipses::InternalSwap(VectorBlock_Ellipses* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VectorBlock_Ellipses, _impl_.phi0_)
      + sizeof(VectorBlock_Ellipses::_impl_.phi0_)
      - PROTOBUF_FIELD_OFFSET(VectorBlock_Ellipses, _impl_.ellipses_arcs_)>(
          reinterpret_cast<char*>(&_impl_.ellipses_arcs_),
          reinterpret_cast<char*>(&other->_impl_.ellipses_arcs_));
}

::google::protobuf::Metadata VectorBlock_Ellipses::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class VectorBlock_ExposurePause::_Internal {
 public:
};

VectorBlock_ExposurePause::VectorBlock_ExposurePause(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.VectorBlock.ExposurePause)
}
VectorBlock_ExposurePause::VectorBlock_ExposurePause(
    ::google::protobuf::Arena* arena, const VectorBlock_ExposurePause& from)
    : VectorBlock_ExposurePause(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE VectorBlock_ExposurePause::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void VectorBlock_ExposurePause::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.pause_in_us_ = {};
}
VectorBlock_ExposurePause::~VectorBlock_ExposurePause() {
  // @@protoc_insertion_point(destructor:open_vector_format.VectorBlock.ExposurePause)
  SharedDtor(*this);
}
inline void VectorBlock_ExposurePause::SharedDtor(MessageLite& self) {
  VectorBlock_ExposurePause& this_ = static_cast<VectorBlock_ExposurePause&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* VectorBlock_ExposurePause::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) VectorBlock_ExposurePause(arena);
}
constexpr auto VectorBlock_ExposurePause::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(VectorBlock_ExposurePause),
                                            alignof(VectorBlock_ExposurePause));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull VectorBlock_ExposurePause::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_VectorBlock_ExposurePause_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &VectorBlock_ExposurePause::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<VectorBlock_ExposurePause>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &VectorBlock_ExposurePause::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<VectorBlock_ExposurePause>(), &VectorBlock_ExposurePause::ByteSizeLong,
            &VectorBlock_ExposurePause::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(VectorBlock_ExposurePause, _impl_._cached_size_),
        false,
    },
    &VectorBlock_ExposurePause::kDescriptorMethods,
    &descriptor_table_open_5fvector_5fformat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* VectorBlock_ExposurePause::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> VectorBlock_ExposurePause::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::open_vector_format::VectorBlock_ExposurePause>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // uint64 pause_in_us = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(VectorBlock_ExposurePause, _impl_.pause_in_us_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(VectorBlock_ExposurePause, _impl_.pause_in_us_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint64 pause_in_us = 1;
    {PROTOBUF_FIELD_OFFSET(VectorBlock_ExposurePause, _impl_.pause_in_us_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void VectorBlock_ExposurePause::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.VectorBlock.ExposurePause)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pause_in_us_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* VectorBlock_ExposurePause::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const VectorBlock_ExposurePause& this_ = static_cast<const VectorBlock_ExposurePause&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* VectorBlock_ExposurePause::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const VectorBlock_ExposurePause& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.VectorBlock.ExposurePause)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint64 pause_in_us = 1;
          if (this_._internal_pause_in_us() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                1, this_._internal_pause_in_us(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.VectorBlock.ExposurePause)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t VectorBlock_ExposurePause::ByteSizeLong(const MessageLite& base) {
          const VectorBlock_ExposurePause& this_ = static_cast<const VectorBlock_ExposurePause&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t VectorBlock_ExposurePause::ByteSizeLong() const {
          const VectorBlock_ExposurePause& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:open_vector_format.VectorBlock.ExposurePause)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // uint64 pause_in_us = 1;
            if (this_._internal_pause_in_us() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_pause_in_us());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void VectorBlock_ExposurePause::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<VectorBlock_ExposurePause*>(&to_msg);
  auto& from = static_cast<const VectorBlock_ExposurePause&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.VectorBlock.ExposurePause)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pause_in_us() != 0) {
    _this->_impl_.pause_in_us_ = from._impl_.pause_in_us_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VectorBlock_ExposurePause::CopyFrom(const VectorBlock_ExposurePause& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.VectorBlock.ExposurePause)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void VectorBlock_ExposurePause::InternalSwap(VectorBlock_ExposurePause* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.pause_in_us_, other->_impl_.pause_in_us_);
}

::google::protobuf::Metadata VectorBlock_ExposurePause::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class VectorBlock_LineSequenceParaAdapt::_Internal {
 public:
};

VectorBlock_LineSequenceParaAdapt::VectorBlock_LineSequenceParaAdapt(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.VectorBlock.LineSequenceParaAdapt)
}
inline PROTOBUF_NDEBUG_INLINE VectorBlock_LineSequenceParaAdapt::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::open_vector_format::VectorBlock_LineSequenceParaAdapt& from_msg)
      : points_with_paras_{visibility, arena, from.points_with_paras_},
        _cached_size_{0} {}

VectorBlock_LineSequenceParaAdapt::VectorBlock_LineSequenceParaAdapt(
    ::google::protobuf::Arena* arena,
    const VectorBlock_LineSequenceParaAdapt& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  VectorBlock_LineSequenceParaAdapt* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.parameter_ = from._impl_.parameter_;

  // @@protoc_insertion_point(copy_constructor:open_vector_format.VectorBlock.LineSequenceParaAdapt)
}
inline PROTOBUF_NDEBUG_INLINE VectorBlock_LineSequenceParaAdapt::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : points_with_paras_{visibility, arena},
        _cached_size_{0} {}

inline void VectorBlock_LineSequenceParaAdapt::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.parameter_ = {};
}
VectorBlock_LineSequenceParaAdapt::~VectorBlock_LineSequenceParaAdapt() {
  // @@protoc_insertion_point(destructor:open_vector_format.VectorBlock.LineSequenceParaAdapt)
  SharedDtor(*this);
}
inline void VectorBlock_LineSequenceParaAdapt::SharedDtor(MessageLite& self) {
  VectorBlock_LineSequenceParaAdapt& this_ = static_cast<VectorBlock_LineSequenceParaAdapt&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* VectorBlock_LineSequenceParaAdapt::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) VectorBlock_LineSequenceParaAdapt(arena);
}
constexpr auto VectorBlock_LineSequenceParaAdapt::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(VectorBlock_LineSequenceParaAdapt, _impl_.points_with_paras_) +
          decltype(VectorBlock_LineSequenceParaAdapt::_impl_.points_with_paras_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(VectorBlock_LineSequenceParaAdapt), alignof(VectorBlock_LineSequenceParaAdapt), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&VectorBlock_LineSequenceParaAdapt::PlacementNew_,
                                 sizeof(VectorBlock_LineSequenceParaAdapt),
                                 alignof(VectorBlock_LineSequenceParaAdapt));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull VectorBlock_LineSequenceParaAdapt::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_VectorBlock_LineSequenceParaAdapt_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &VectorBlock_LineSequenceParaAdapt::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<VectorBlock_LineSequenceParaAdapt>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &VectorBlock_LineSequenceParaAdapt::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<VectorBlock_LineSequenceParaAdapt>(), &VectorBlock_LineSequenceParaAdapt::ByteSizeLong,
            &VectorBlock_LineSequenceParaAdapt::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(VectorBlock_LineSequenceParaAdapt, _impl_._cached_size_),
        false,
    },
    &VectorBlock_LineSequenceParaAdapt::kDescriptorMethods,
    &descriptor_table_open_5fvector_5fformat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* VectorBlock_LineSequenceParaAdapt::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> VectorBlock_LineSequenceParaAdapt::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::open_vector_format::VectorBlock_LineSequenceParaAdapt>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .open_vector_format.VectorBlock.LineSequenceParaAdapt.AdaptedParameter parameter = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VectorBlock_LineSequenceParaAdapt, _impl_.parameter_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(VectorBlock_LineSequenceParaAdapt, _impl_.parameter_)}},
    // repeated float points_with_paras = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(VectorBlock_LineSequenceParaAdapt, _impl_.points_with_paras_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated float points_with_paras = 1;
    {PROTOBUF_FIELD_OFFSET(VectorBlock_LineSequenceParaAdapt, _impl_.points_with_paras_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // .open_vector_format.VectorBlock.LineSequenceParaAdapt.AdaptedParameter parameter = 2;
    {PROTOBUF_FIELD_OFFSET(VectorBlock_LineSequenceParaAdapt, _impl_.parameter_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void VectorBlock_LineSequenceParaAdapt::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.VectorBlock.LineSequenceParaAdapt)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.points_with_paras_.Clear();
  _impl_.parameter_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* VectorBlock_LineSequenceParaAdapt::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const VectorBlock_LineSequenceParaAdapt& this_ = static_cast<const VectorBlock_LineSequenceParaAdapt&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* VectorBlock_LineSequenceParaAdapt::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const VectorBlock_LineSequenceParaAdapt& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.VectorBlock.LineSequenceParaAdapt)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated float points_with_paras = 1;
          if (this_._internal_points_with_paras_size() > 0) {
            target = stream->WriteFixedPacked(1, this_._internal_points_with_paras(), target);
          }

          // .open_vector_format.VectorBlock.LineSequenceParaAdapt.AdaptedParameter parameter = 2;
          if (this_._internal_parameter() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this_._internal_parameter(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.VectorBlock.LineSequenceParaAdapt)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t VectorBlock_LineSequenceParaAdapt::ByteSizeLong(const MessageLite& base) {
          const VectorBlock_LineSequenceParaAdapt& this_ = static_cast<const VectorBlock_LineSequenceParaAdapt&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t VectorBlock_LineSequenceParaAdapt::ByteSizeLong() const {
          const VectorBlock_LineSequenceParaAdapt& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:open_vector_format.VectorBlock.LineSequenceParaAdapt)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated float points_with_paras = 1;
            {
              std::size_t data_size = std::size_t{4} *
                  ::_pbi::FromIntSize(this_._internal_points_with_paras_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
          }
           {
            // .open_vector_format.VectorBlock.LineSequenceParaAdapt.AdaptedParameter parameter = 2;
            if (this_._internal_parameter() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_parameter());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void VectorBlock_LineSequenceParaAdapt::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<VectorBlock_LineSequenceParaAdapt*>(&to_msg);
  auto& from = static_cast<const VectorBlock_LineSequenceParaAdapt&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.VectorBlock.LineSequenceParaAdapt)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_points_with_paras()->MergeFrom(from._internal_points_with_paras());
  if (from._internal_parameter() != 0) {
    _this->_impl_.parameter_ = from._impl_.parameter_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VectorBlock_LineSequenceParaAdapt::CopyFrom(const VectorBlock_LineSequenceParaAdapt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.VectorBlock.LineSequenceParaAdapt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void VectorBlock_LineSequenceParaAdapt::InternalSwap(VectorBlock_LineSequenceParaAdapt* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.points_with_paras_.InternalSwap(&other->_impl_.points_with_paras_);
  swap(_impl_.parameter_, other->_impl_.parameter_);
}

::google::protobuf::Metadata VectorBlock_LineSequenceParaAdapt::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class VectorBlock_HatchesParaAdapt::_Internal {
 public:
};

VectorBlock_HatchesParaAdapt::VectorBlock_HatchesParaAdapt(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.VectorBlock.HatchesParaAdapt)
}
inline PROTOBUF_NDEBUG_INLINE VectorBlock_HatchesParaAdapt::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::open_vector_format::VectorBlock_HatchesParaAdapt& from_msg)
      : hatchaslinesequence_{visibility, arena, from.hatchaslinesequence_},
        _cached_size_{0} {}

VectorBlock_HatchesParaAdapt::VectorBlock_HatchesParaAdapt(
    ::google::protobuf::Arena* arena,
    const VectorBlock_HatchesParaAdapt& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  VectorBlock_HatchesParaAdapt* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:open_vector_format.VectorBlock.HatchesParaAdapt)
}
inline PROTOBUF_NDEBUG_INLINE VectorBlock_HatchesParaAdapt::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : hatchaslinesequence_{visibility, arena},
        _cached_size_{0} {}

inline void VectorBlock_HatchesParaAdapt::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
VectorBlock_HatchesParaAdapt::~VectorBlock_HatchesParaAdapt() {
  // @@protoc_insertion_point(destructor:open_vector_format.VectorBlock.HatchesParaAdapt)
  SharedDtor(*this);
}
inline void VectorBlock_HatchesParaAdapt::SharedDtor(MessageLite& self) {
  VectorBlock_HatchesParaAdapt& this_ = static_cast<VectorBlock_HatchesParaAdapt&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* VectorBlock_HatchesParaAdapt::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) VectorBlock_HatchesParaAdapt(arena);
}
constexpr auto VectorBlock_HatchesParaAdapt::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(VectorBlock_HatchesParaAdapt, _impl_.hatchaslinesequence_) +
          decltype(VectorBlock_HatchesParaAdapt::_impl_.hatchaslinesequence_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(VectorBlock_HatchesParaAdapt), alignof(VectorBlock_HatchesParaAdapt), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&VectorBlock_HatchesParaAdapt::PlacementNew_,
                                 sizeof(VectorBlock_HatchesParaAdapt),
                                 alignof(VectorBlock_HatchesParaAdapt));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull VectorBlock_HatchesParaAdapt::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_VectorBlock_HatchesParaAdapt_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &VectorBlock_HatchesParaAdapt::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<VectorBlock_HatchesParaAdapt>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &VectorBlock_HatchesParaAdapt::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<VectorBlock_HatchesParaAdapt>(), &VectorBlock_HatchesParaAdapt::ByteSizeLong,
            &VectorBlock_HatchesParaAdapt::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(VectorBlock_HatchesParaAdapt, _impl_._cached_size_),
        false,
    },
    &VectorBlock_HatchesParaAdapt::kDescriptorMethods,
    &descriptor_table_open_5fvector_5fformat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* VectorBlock_HatchesParaAdapt::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> VectorBlock_HatchesParaAdapt::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::open_vector_format::VectorBlock_HatchesParaAdapt>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .open_vector_format.VectorBlock.LineSequenceParaAdapt hatchAsLinesequence = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(VectorBlock_HatchesParaAdapt, _impl_.hatchaslinesequence_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .open_vector_format.VectorBlock.LineSequenceParaAdapt hatchAsLinesequence = 1;
    {PROTOBUF_FIELD_OFFSET(VectorBlock_HatchesParaAdapt, _impl_.hatchaslinesequence_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::open_vector_format::VectorBlock_LineSequenceParaAdapt>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void VectorBlock_HatchesParaAdapt::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.VectorBlock.HatchesParaAdapt)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hatchaslinesequence_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* VectorBlock_HatchesParaAdapt::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const VectorBlock_HatchesParaAdapt& this_ = static_cast<const VectorBlock_HatchesParaAdapt&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* VectorBlock_HatchesParaAdapt::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const VectorBlock_HatchesParaAdapt& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.VectorBlock.HatchesParaAdapt)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .open_vector_format.VectorBlock.LineSequenceParaAdapt hatchAsLinesequence = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_hatchaslinesequence_size());
               i < n; i++) {
            const auto& repfield = this_._internal_hatchaslinesequence().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.VectorBlock.HatchesParaAdapt)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t VectorBlock_HatchesParaAdapt::ByteSizeLong(const MessageLite& base) {
          const VectorBlock_HatchesParaAdapt& this_ = static_cast<const VectorBlock_HatchesParaAdapt&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t VectorBlock_HatchesParaAdapt::ByteSizeLong() const {
          const VectorBlock_HatchesParaAdapt& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:open_vector_format.VectorBlock.HatchesParaAdapt)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .open_vector_format.VectorBlock.LineSequenceParaAdapt hatchAsLinesequence = 1;
            {
              total_size += 1UL * this_._internal_hatchaslinesequence_size();
              for (const auto& msg : this_._internal_hatchaslinesequence()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void VectorBlock_HatchesParaAdapt::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<VectorBlock_HatchesParaAdapt*>(&to_msg);
  auto& from = static_cast<const VectorBlock_HatchesParaAdapt&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.VectorBlock.HatchesParaAdapt)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_hatchaslinesequence()->MergeFrom(
      from._internal_hatchaslinesequence());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VectorBlock_HatchesParaAdapt::CopyFrom(const VectorBlock_HatchesParaAdapt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.VectorBlock.HatchesParaAdapt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void VectorBlock_HatchesParaAdapt::InternalSwap(VectorBlock_HatchesParaAdapt* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.hatchaslinesequence_.InternalSwap(&other->_impl_.hatchaslinesequence_);
}

::google::protobuf::Metadata VectorBlock_HatchesParaAdapt::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class VectorBlock::_Internal {
 public:
  using HasBits =
      decltype(std::declval<VectorBlock>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(VectorBlock, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock, _impl_._oneof_case_);
};

void VectorBlock::set_allocated_line_sequence(::open_vector_format::VectorBlock_LineSequence* line_sequence) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_vector_data();
  if (line_sequence) {
    ::google::protobuf::Arena* submessage_arena = line_sequence->GetArena();
    if (message_arena != submessage_arena) {
      line_sequence = ::google::protobuf::internal::GetOwnedMessage(message_arena, line_sequence, submessage_arena);
    }
    set_has_line_sequence();
    _impl_.vector_data_.line_sequence_ = line_sequence;
  }
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.VectorBlock.line_sequence)
}
void VectorBlock::set_allocated__hatches(::open_vector_format::VectorBlock_Hatches* _hatches) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_vector_data();
  if (_hatches) {
    ::google::protobuf::Arena* submessage_arena = _hatches->GetArena();
    if (message_arena != submessage_arena) {
      _hatches = ::google::protobuf::internal::GetOwnedMessage(message_arena, _hatches, submessage_arena);
    }
    set_has__hatches();
    _impl_.vector_data_._hatches_ = _hatches;
  }
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.VectorBlock._hatches)
}
void VectorBlock::set_allocated_point_sequence(::open_vector_format::VectorBlock_PointSequence* point_sequence) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_vector_data();
  if (point_sequence) {
    ::google::protobuf::Arena* submessage_arena = point_sequence->GetArena();
    if (message_arena != submessage_arena) {
      point_sequence = ::google::protobuf::internal::GetOwnedMessage(message_arena, point_sequence, submessage_arena);
    }
    set_has_point_sequence();
    _impl_.vector_data_.point_sequence_ = point_sequence;
  }
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.VectorBlock.point_sequence)
}
void VectorBlock::set_allocated__arcs(::open_vector_format::VectorBlock_Arcs* _arcs) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_vector_data();
  if (_arcs) {
    ::google::protobuf::Arena* submessage_arena = _arcs->GetArena();
    if (message_arena != submessage_arena) {
      _arcs = ::google::protobuf::internal::GetOwnedMessage(message_arena, _arcs, submessage_arena);
    }
    set_has__arcs();
    _impl_.vector_data_._arcs_ = _arcs;
  }
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.VectorBlock._arcs)
}
void VectorBlock::set_allocated_ellipses(::open_vector_format::VectorBlock_Ellipses* ellipses) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_vector_data();
  if (ellipses) {
    ::google::protobuf::Arena* submessage_arena = ellipses->GetArena();
    if (message_arena != submessage_arena) {
      ellipses = ::google::protobuf::internal::GetOwnedMessage(message_arena, ellipses, submessage_arena);
    }
    set_has_ellipses();
    _impl_.vector_data_.ellipses_ = ellipses;
  }
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.VectorBlock.ellipses)
}
void VectorBlock::set_allocated_line_sequence_3d(::open_vector_format::VectorBlock_LineSequence3D* line_sequence_3d) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_vector_data();
  if (line_sequence_3d) {
    ::google::protobuf::Arena* submessage_arena = line_sequence_3d->GetArena();
    if (message_arena != submessage_arena) {
      line_sequence_3d = ::google::protobuf::internal::GetOwnedMessage(message_arena, line_sequence_3d, submessage_arena);
    }
    set_has_line_sequence_3d();
    _impl_.vector_data_.line_sequence_3d_ = line_sequence_3d;
  }
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.VectorBlock.line_sequence_3d)
}
void VectorBlock::set_allocated_hatches_3d(::open_vector_format::VectorBlock_Hatches3D* hatches_3d) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_vector_data();
  if (hatches_3d) {
    ::google::protobuf::Arena* submessage_arena = hatches_3d->GetArena();
    if (message_arena != submessage_arena) {
      hatches_3d = ::google::protobuf::internal::GetOwnedMessage(message_arena, hatches_3d, submessage_arena);
    }
    set_has_hatches_3d();
    _impl_.vector_data_.hatches_3d_ = hatches_3d;
  }
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.VectorBlock.hatches_3d)
}
void VectorBlock::set_allocated_point_sequence_3d(::open_vector_format::VectorBlock_PointSequence3D* point_sequence_3d) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_vector_data();
  if (point_sequence_3d) {
    ::google::protobuf::Arena* submessage_arena = point_sequence_3d->GetArena();
    if (message_arena != submessage_arena) {
      point_sequence_3d = ::google::protobuf::internal::GetOwnedMessage(message_arena, point_sequence_3d, submessage_arena);
    }
    set_has_point_sequence_3d();
    _impl_.vector_data_.point_sequence_3d_ = point_sequence_3d;
  }
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.VectorBlock.point_sequence_3d)
}
void VectorBlock::set_allocated_arcs_3d(::open_vector_format::VectorBlock_Arcs3D* arcs_3d) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_vector_data();
  if (arcs_3d) {
    ::google::protobuf::Arena* submessage_arena = arcs_3d->GetArena();
    if (message_arena != submessage_arena) {
      arcs_3d = ::google::protobuf::internal::GetOwnedMessage(message_arena, arcs_3d, submessage_arena);
    }
    set_has_arcs_3d();
    _impl_.vector_data_.arcs_3d_ = arcs_3d;
  }
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.VectorBlock.arcs_3d)
}
void VectorBlock::set_allocated_exposure_pause(::open_vector_format::VectorBlock_ExposurePause* exposure_pause) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_vector_data();
  if (exposure_pause) {
    ::google::protobuf::Arena* submessage_arena = exposure_pause->GetArena();
    if (message_arena != submessage_arena) {
      exposure_pause = ::google::protobuf::internal::GetOwnedMessage(message_arena, exposure_pause, submessage_arena);
    }
    set_has_exposure_pause();
    _impl_.vector_data_.exposure_pause_ = exposure_pause;
  }
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.VectorBlock.exposure_pause)
}
void VectorBlock::set_allocated_line_sequence_para_adapt(::open_vector_format::VectorBlock_LineSequenceParaAdapt* line_sequence_para_adapt) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_vector_data();
  if (line_sequence_para_adapt) {
    ::google::protobuf::Arena* submessage_arena = line_sequence_para_adapt->GetArena();
    if (message_arena != submessage_arena) {
      line_sequence_para_adapt = ::google::protobuf::internal::GetOwnedMessage(message_arena, line_sequence_para_adapt, submessage_arena);
    }
    set_has_line_sequence_para_adapt();
    _impl_.vector_data_.line_sequence_para_adapt_ = line_sequence_para_adapt;
  }
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.VectorBlock.line_sequence_para_adapt)
}
void VectorBlock::set_allocated__hatchparaadapt(::open_vector_format::VectorBlock_HatchesParaAdapt* _hatchparaadapt) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_vector_data();
  if (_hatchparaadapt) {
    ::google::protobuf::Arena* submessage_arena = _hatchparaadapt->GetArena();
    if (message_arena != submessage_arena) {
      _hatchparaadapt = ::google::protobuf::internal::GetOwnedMessage(message_arena, _hatchparaadapt, submessage_arena);
    }
    set_has__hatchparaadapt();
    _impl_.vector_data_._hatchparaadapt_ = _hatchparaadapt;
  }
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.VectorBlock._hatchParaAdapt)
}
void VectorBlock::set_allocated_lpbf_metadata(::open_vector_format::VectorBlock_LPBFMetadata* lpbf_metadata) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_process_meta_data();
  if (lpbf_metadata) {
    ::google::protobuf::Arena* submessage_arena = lpbf_metadata->GetArena();
    if (message_arena != submessage_arena) {
      lpbf_metadata = ::google::protobuf::internal::GetOwnedMessage(message_arena, lpbf_metadata, submessage_arena);
    }
    set_has_lpbf_metadata();
    _impl_.process_meta_data_.lpbf_metadata_ = lpbf_metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.VectorBlock.lpbf_metadata)
}
void VectorBlock::set_allocated_micro_structuring_metadata(::open_vector_format::VectorBlock_MicroStructuringMetadata* micro_structuring_metadata) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_process_meta_data();
  if (micro_structuring_metadata) {
    ::google::protobuf::Arena* submessage_arena = micro_structuring_metadata->GetArena();
    if (message_arena != submessage_arena) {
      micro_structuring_metadata = ::google::protobuf::internal::GetOwnedMessage(message_arena, micro_structuring_metadata, submessage_arena);
    }
    set_has_micro_structuring_metadata();
    _impl_.process_meta_data_.micro_structuring_metadata_ = micro_structuring_metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.VectorBlock.micro_structuring_metadata)
}
void VectorBlock::set_allocated_polishing_metadata(::open_vector_format::VectorBlock_PolishingMetadata* polishing_metadata) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_process_meta_data();
  if (polishing_metadata) {
    ::google::protobuf::Arena* submessage_arena = polishing_metadata->GetArena();
    if (message_arena != submessage_arena) {
      polishing_metadata = ::google::protobuf::internal::GetOwnedMessage(message_arena, polishing_metadata, submessage_arena);
    }
    set_has_polishing_metadata();
    _impl_.process_meta_data_.polishing_metadata_ = polishing_metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.VectorBlock.polishing_metadata)
}
VectorBlock::VectorBlock(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.VectorBlock)
}
inline PROTOBUF_NDEBUG_INLINE VectorBlock::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::open_vector_format::VectorBlock& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        vector_data_{},
        process_meta_data_{},
        _oneof_case_{from._oneof_case_[0], from._oneof_case_[1]} {}

VectorBlock::VectorBlock(
    ::google::protobuf::Arena* arena,
    const VectorBlock& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  VectorBlock* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.meta_data_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::open_vector_format::VectorBlock_VectorBlockMetaData>(
                              arena, *from._impl_.meta_data_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, marking_params_key_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, marking_params_key_),
           offsetof(Impl_, repeats_) -
               offsetof(Impl_, marking_params_key_) +
               sizeof(Impl_::repeats_));
  switch (vector_data_case()) {
    case VECTOR_DATA_NOT_SET:
      break;
      case kLineSequence:
        _impl_.vector_data_.line_sequence_ = ::google::protobuf::Message::CopyConstruct<::open_vector_format::VectorBlock_LineSequence>(arena, *from._impl_.vector_data_.line_sequence_);
        break;
      case kHatches:
        _impl_.vector_data_._hatches_ = ::google::protobuf::Message::CopyConstruct<::open_vector_format::VectorBlock_Hatches>(arena, *from._impl_.vector_data_._hatches_);
        break;
      case kPointSequence:
        _impl_.vector_data_.point_sequence_ = ::google::protobuf::Message::CopyConstruct<::open_vector_format::VectorBlock_PointSequence>(arena, *from._impl_.vector_data_.point_sequence_);
        break;
      case kArcs:
        _impl_.vector_data_._arcs_ = ::google::protobuf::Message::CopyConstruct<::open_vector_format::VectorBlock_Arcs>(arena, *from._impl_.vector_data_._arcs_);
        break;
      case kEllipses:
        _impl_.vector_data_.ellipses_ = ::google::protobuf::Message::CopyConstruct<::open_vector_format::VectorBlock_Ellipses>(arena, *from._impl_.vector_data_.ellipses_);
        break;
      case kLineSequence3D:
        _impl_.vector_data_.line_sequence_3d_ = ::google::protobuf::Message::CopyConstruct<::open_vector_format::VectorBlock_LineSequence3D>(arena, *from._impl_.vector_data_.line_sequence_3d_);
        break;
      case kHatches3D:
        _impl_.vector_data_.hatches_3d_ = ::google::protobuf::Message::CopyConstruct<::open_vector_format::VectorBlock_Hatches3D>(arena, *from._impl_.vector_data_.hatches_3d_);
        break;
      case kPointSequence3D:
        _impl_.vector_data_.point_sequence_3d_ = ::google::protobuf::Message::CopyConstruct<::open_vector_format::VectorBlock_PointSequence3D>(arena, *from._impl_.vector_data_.point_sequence_3d_);
        break;
      case kArcs3D:
        _impl_.vector_data_.arcs_3d_ = ::google::protobuf::Message::CopyConstruct<::open_vector_format::VectorBlock_Arcs3D>(arena, *from._impl_.vector_data_.arcs_3d_);
        break;
      case kExposurePause:
        _impl_.vector_data_.exposure_pause_ = ::google::protobuf::Message::CopyConstruct<::open_vector_format::VectorBlock_ExposurePause>(arena, *from._impl_.vector_data_.exposure_pause_);
        break;
      case kLineSequenceParaAdapt:
        _impl_.vector_data_.line_sequence_para_adapt_ = ::google::protobuf::Message::CopyConstruct<::open_vector_format::VectorBlock_LineSequenceParaAdapt>(arena, *from._impl_.vector_data_.line_sequence_para_adapt_);
        break;
      case kHatchParaAdapt:
        _impl_.vector_data_._hatchparaadapt_ = ::google::protobuf::Message::CopyConstruct<::open_vector_format::VectorBlock_HatchesParaAdapt>(arena, *from._impl_.vector_data_._hatchparaadapt_);
        break;
  }
  switch (process_meta_data_case()) {
    case PROCESS_META_DATA_NOT_SET:
      break;
      case kLpbfMetadata:
        _impl_.process_meta_data_.lpbf_metadata_ = ::google::protobuf::Message::CopyConstruct<::open_vector_format::VectorBlock_LPBFMetadata>(arena, *from._impl_.process_meta_data_.lpbf_metadata_);
        break;
      case kMicroStructuringMetadata:
        _impl_.process_meta_data_.micro_structuring_metadata_ = ::google::protobuf::Message::CopyConstruct<::open_vector_format::VectorBlock_MicroStructuringMetadata>(arena, *from._impl_.process_meta_data_.micro_structuring_metadata_);
        break;
      case kPolishingMetadata:
        _impl_.process_meta_data_.polishing_metadata_ = ::google::protobuf::Message::CopyConstruct<::open_vector_format::VectorBlock_PolishingMetadata>(arena, *from._impl_.process_meta_data_.polishing_metadata_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:open_vector_format.VectorBlock)
}
inline PROTOBUF_NDEBUG_INLINE VectorBlock::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        vector_data_{},
        process_meta_data_{},
        _oneof_case_{} {}

inline void VectorBlock::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, meta_data_),
           0,
           offsetof(Impl_, repeats_) -
               offsetof(Impl_, meta_data_) +
               sizeof(Impl_::repeats_));
}
VectorBlock::~VectorBlock() {
  // @@protoc_insertion_point(destructor:open_vector_format.VectorBlock)
  SharedDtor(*this);
}
inline void VectorBlock::SharedDtor(MessageLite& self) {
  VectorBlock& this_ = static_cast<VectorBlock&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.meta_data_;
  if (this_.has_vector_data()) {
    this_.clear_vector_data();
  }
  if (this_.has_process_meta_data()) {
    this_.clear_process_meta_data();
  }
  this_._impl_.~Impl_();
}

void VectorBlock::clear_vector_data() {
// @@protoc_insertion_point(one_of_clear_start:open_vector_format.VectorBlock)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (vector_data_case()) {
    case kLineSequence: {
      if (GetArena() == nullptr) {
        delete _impl_.vector_data_.line_sequence_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.vector_data_.line_sequence_);
      }
      break;
    }
    case kHatches: {
      if (GetArena() == nullptr) {
        delete _impl_.vector_data_._hatches_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.vector_data_._hatches_);
      }
      break;
    }
    case kPointSequence: {
      if (GetArena() == nullptr) {
        delete _impl_.vector_data_.point_sequence_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.vector_data_.point_sequence_);
      }
      break;
    }
    case kArcs: {
      if (GetArena() == nullptr) {
        delete _impl_.vector_data_._arcs_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.vector_data_._arcs_);
      }
      break;
    }
    case kEllipses: {
      if (GetArena() == nullptr) {
        delete _impl_.vector_data_.ellipses_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.vector_data_.ellipses_);
      }
      break;
    }
    case kLineSequence3D: {
      if (GetArena() == nullptr) {
        delete _impl_.vector_data_.line_sequence_3d_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.vector_data_.line_sequence_3d_);
      }
      break;
    }
    case kHatches3D: {
      if (GetArena() == nullptr) {
        delete _impl_.vector_data_.hatches_3d_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.vector_data_.hatches_3d_);
      }
      break;
    }
    case kPointSequence3D: {
      if (GetArena() == nullptr) {
        delete _impl_.vector_data_.point_sequence_3d_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.vector_data_.point_sequence_3d_);
      }
      break;
    }
    case kArcs3D: {
      if (GetArena() == nullptr) {
        delete _impl_.vector_data_.arcs_3d_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.vector_data_.arcs_3d_);
      }
      break;
    }
    case kExposurePause: {
      if (GetArena() == nullptr) {
        delete _impl_.vector_data_.exposure_pause_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.vector_data_.exposure_pause_);
      }
      break;
    }
    case kLineSequenceParaAdapt: {
      if (GetArena() == nullptr) {
        delete _impl_.vector_data_.line_sequence_para_adapt_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.vector_data_.line_sequence_para_adapt_);
      }
      break;
    }
    case kHatchParaAdapt: {
      if (GetArena() == nullptr) {
        delete _impl_.vector_data_._hatchparaadapt_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.vector_data_._hatchparaadapt_);
      }
      break;
    }
    case VECTOR_DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VECTOR_DATA_NOT_SET;
}

void VectorBlock::clear_process_meta_data() {
// @@protoc_insertion_point(one_of_clear_start:open_vector_format.VectorBlock)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (process_meta_data_case()) {
    case kLpbfMetadata: {
      if (GetArena() == nullptr) {
        delete _impl_.process_meta_data_.lpbf_metadata_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.process_meta_data_.lpbf_metadata_);
      }
      break;
    }
    case kMicroStructuringMetadata: {
      if (GetArena() == nullptr) {
        delete _impl_.process_meta_data_.micro_structuring_metadata_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.process_meta_data_.micro_structuring_metadata_);
      }
      break;
    }
    case kPolishingMetadata: {
      if (GetArena() == nullptr) {
        delete _impl_.process_meta_data_.polishing_metadata_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.process_meta_data_.polishing_metadata_);
      }
      break;
    }
    case PROCESS_META_DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = PROCESS_META_DATA_NOT_SET;
}


inline void* VectorBlock::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) VectorBlock(arena);
}
constexpr auto VectorBlock::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(VectorBlock),
                                            alignof(VectorBlock));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull VectorBlock::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_VectorBlock_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &VectorBlock::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<VectorBlock>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &VectorBlock::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<VectorBlock>(), &VectorBlock::ByteSizeLong,
            &VectorBlock::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(VectorBlock, _impl_._cached_size_),
        false,
    },
    &VectorBlock::kDescriptorMethods,
    &descriptor_table_open_5fvector_5fformat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* VectorBlock::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 19, 16, 0, 13> VectorBlock::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(VectorBlock, _impl_._has_bits_),
    0, // no _extensions_
    103, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294963200,  // skipmap
    offsetof(decltype(_table_), field_entries),
    19,  // num_field_entries
    16,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::open_vector_format::VectorBlock>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // int32 marking_params_key = 50;
    {::_pbi::TcParser::FastV32S2,
     {912, 63, 0, PROTOBUF_FIELD_OFFSET(VectorBlock, _impl_.marking_params_key_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // .open_vector_format.VectorBlock.VectorBlockMetaData meta_data = 100;
    {::_pbi::TcParser::FastMtS2,
     {1698, 0, 12, PROTOBUF_FIELD_OFFSET(VectorBlock, _impl_.meta_data_)}},
    // int32 laser_index = 53;
    {::_pbi::TcParser::FastV32S2,
     {936, 63, 0, PROTOBUF_FIELD_OFFSET(VectorBlock, _impl_.laser_index_)}},
    // uint64 repeats = 54;
    {::_pbi::TcParser::FastV64S2,
     {944, 63, 0, PROTOBUF_FIELD_OFFSET(VectorBlock, _impl_.repeats_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    50, 0, 4,
    65510, 12, 65535, 15, 65535, 15, 65475, 15,
    65535, 65535
  }}, {{
    // .open_vector_format.VectorBlock.LineSequence line_sequence = 1;
    {PROTOBUF_FIELD_OFFSET(VectorBlock, _impl_.vector_data_.line_sequence_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .open_vector_format.VectorBlock.Hatches _hatches = 2;
    {PROTOBUF_FIELD_OFFSET(VectorBlock, _impl_.vector_data_._hatches_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .open_vector_format.VectorBlock.PointSequence point_sequence = 3;
    {PROTOBUF_FIELD_OFFSET(VectorBlock, _impl_.vector_data_.point_sequence_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .open_vector_format.VectorBlock.Arcs _arcs = 4;
    {PROTOBUF_FIELD_OFFSET(VectorBlock, _impl_.vector_data_._arcs_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .open_vector_format.VectorBlock.Ellipses ellipses = 5;
    {PROTOBUF_FIELD_OFFSET(VectorBlock, _impl_.vector_data_.ellipses_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .open_vector_format.VectorBlock.LineSequence3D line_sequence_3d = 6;
    {PROTOBUF_FIELD_OFFSET(VectorBlock, _impl_.vector_data_.line_sequence_3d_), _Internal::kOneofCaseOffset + 0, 5,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .open_vector_format.VectorBlock.Hatches3D hatches_3d = 7;
    {PROTOBUF_FIELD_OFFSET(VectorBlock, _impl_.vector_data_.hatches_3d_), _Internal::kOneofCaseOffset + 0, 6,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .open_vector_format.VectorBlock.PointSequence3D point_sequence_3d = 8;
    {PROTOBUF_FIELD_OFFSET(VectorBlock, _impl_.vector_data_.point_sequence_3d_), _Internal::kOneofCaseOffset + 0, 7,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .open_vector_format.VectorBlock.Arcs3D arcs_3d = 9;
    {PROTOBUF_FIELD_OFFSET(VectorBlock, _impl_.vector_data_.arcs_3d_), _Internal::kOneofCaseOffset + 0, 8,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .open_vector_format.VectorBlock.ExposurePause exposure_pause = 10;
    {PROTOBUF_FIELD_OFFSET(VectorBlock, _impl_.vector_data_.exposure_pause_), _Internal::kOneofCaseOffset + 0, 9,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .open_vector_format.VectorBlock.LineSequenceParaAdapt line_sequence_para_adapt = 11;
    {PROTOBUF_FIELD_OFFSET(VectorBlock, _impl_.vector_data_.line_sequence_para_adapt_), _Internal::kOneofCaseOffset + 0, 10,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .open_vector_format.VectorBlock.HatchesParaAdapt _hatchParaAdapt = 12;
    {PROTOBUF_FIELD_OFFSET(VectorBlock, _impl_.vector_data_._hatchparaadapt_), _Internal::kOneofCaseOffset + 0, 11,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 marking_params_key = 50;
    {PROTOBUF_FIELD_OFFSET(VectorBlock, _impl_.marking_params_key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 laser_index = 53;
    {PROTOBUF_FIELD_OFFSET(VectorBlock, _impl_.laser_index_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // uint64 repeats = 54;
    {PROTOBUF_FIELD_OFFSET(VectorBlock, _impl_.repeats_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // .open_vector_format.VectorBlock.VectorBlockMetaData meta_data = 100;
    {PROTOBUF_FIELD_OFFSET(VectorBlock, _impl_.meta_data_), _Internal::kHasBitsOffset + 0, 12,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .open_vector_format.VectorBlock.LPBFMetadata lpbf_metadata = 101;
    {PROTOBUF_FIELD_OFFSET(VectorBlock, _impl_.process_meta_data_.lpbf_metadata_), _Internal::kOneofCaseOffset + 4, 13,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .open_vector_format.VectorBlock.MicroStructuringMetadata micro_structuring_metadata = 102;
    {PROTOBUF_FIELD_OFFSET(VectorBlock, _impl_.process_meta_data_.micro_structuring_metadata_), _Internal::kOneofCaseOffset + 4, 14,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .open_vector_format.VectorBlock.PolishingMetadata polishing_metadata = 103;
    {PROTOBUF_FIELD_OFFSET(VectorBlock, _impl_.process_meta_data_.polishing_metadata_), _Internal::kOneofCaseOffset + 4, 15,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::open_vector_format::VectorBlock_LineSequence>()},
    {::_pbi::TcParser::GetTable<::open_vector_format::VectorBlock_Hatches>()},
    {::_pbi::TcParser::GetTable<::open_vector_format::VectorBlock_PointSequence>()},
    {::_pbi::TcParser::GetTable<::open_vector_format::VectorBlock_Arcs>()},
    {::_pbi::TcParser::GetTable<::open_vector_format::VectorBlock_Ellipses>()},
    {::_pbi::TcParser::GetTable<::open_vector_format::VectorBlock_LineSequence3D>()},
    {::_pbi::TcParser::GetTable<::open_vector_format::VectorBlock_Hatches3D>()},
    {::_pbi::TcParser::GetTable<::open_vector_format::VectorBlock_PointSequence3D>()},
    {::_pbi::TcParser::GetTable<::open_vector_format::VectorBlock_Arcs3D>()},
    {::_pbi::TcParser::GetTable<::open_vector_format::VectorBlock_ExposurePause>()},
    {::_pbi::TcParser::GetTable<::open_vector_format::VectorBlock_LineSequenceParaAdapt>()},
    {::_pbi::TcParser::GetTable<::open_vector_format::VectorBlock_HatchesParaAdapt>()},
    {::_pbi::TcParser::GetTable<::open_vector_format::VectorBlock_VectorBlockMetaData>()},
    {::_pbi::TcParser::GetTable<::open_vector_format::VectorBlock_LPBFMetadata>()},
    {::_pbi::TcParser::GetTable<::open_vector_format::VectorBlock_MicroStructuringMetadata>()},
    {::_pbi::TcParser::GetTable<::open_vector_format::VectorBlock_PolishingMetadata>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void VectorBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.VectorBlock)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.meta_data_ != nullptr);
    _impl_.meta_data_->Clear();
  }
  ::memset(&_impl_.marking_params_key_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.repeats_) -
      reinterpret_cast<char*>(&_impl_.marking_params_key_)) + sizeof(_impl_.repeats_));
  clear_vector_data();
  clear_process_meta_data();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* VectorBlock::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const VectorBlock& this_ = static_cast<const VectorBlock&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* VectorBlock::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const VectorBlock& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.VectorBlock)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          switch (this_.vector_data_case()) {
            case kLineSequence: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  1, *this_._impl_.vector_data_.line_sequence_, this_._impl_.vector_data_.line_sequence_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kHatches: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  2, *this_._impl_.vector_data_._hatches_, this_._impl_.vector_data_._hatches_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kPointSequence: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  3, *this_._impl_.vector_data_.point_sequence_, this_._impl_.vector_data_.point_sequence_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kArcs: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  4, *this_._impl_.vector_data_._arcs_, this_._impl_.vector_data_._arcs_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kEllipses: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  5, *this_._impl_.vector_data_.ellipses_, this_._impl_.vector_data_.ellipses_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kLineSequence3D: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  6, *this_._impl_.vector_data_.line_sequence_3d_, this_._impl_.vector_data_.line_sequence_3d_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kHatches3D: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  7, *this_._impl_.vector_data_.hatches_3d_, this_._impl_.vector_data_.hatches_3d_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kPointSequence3D: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  8, *this_._impl_.vector_data_.point_sequence_3d_, this_._impl_.vector_data_.point_sequence_3d_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kArcs3D: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  9, *this_._impl_.vector_data_.arcs_3d_, this_._impl_.vector_data_.arcs_3d_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kExposurePause: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  10, *this_._impl_.vector_data_.exposure_pause_, this_._impl_.vector_data_.exposure_pause_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kLineSequenceParaAdapt: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  11, *this_._impl_.vector_data_.line_sequence_para_adapt_, this_._impl_.vector_data_.line_sequence_para_adapt_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kHatchParaAdapt: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  12, *this_._impl_.vector_data_._hatchparaadapt_, this_._impl_.vector_data_._hatchparaadapt_->GetCachedSize(), target,
                  stream);
              break;
            }
            default:
              break;
          }
          // int32 marking_params_key = 50;
          if (this_._internal_marking_params_key() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                50, this_._internal_marking_params_key(), target);
          }

          // int32 laser_index = 53;
          if (this_._internal_laser_index() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                53, this_._internal_laser_index(), target);
          }

          // uint64 repeats = 54;
          if (this_._internal_repeats() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                54, this_._internal_repeats(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .open_vector_format.VectorBlock.VectorBlockMetaData meta_data = 100;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                100, *this_._impl_.meta_data_, this_._impl_.meta_data_->GetCachedSize(), target,
                stream);
          }

          switch (this_.process_meta_data_case()) {
            case kLpbfMetadata: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  101, *this_._impl_.process_meta_data_.lpbf_metadata_, this_._impl_.process_meta_data_.lpbf_metadata_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kMicroStructuringMetadata: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  102, *this_._impl_.process_meta_data_.micro_structuring_metadata_, this_._impl_.process_meta_data_.micro_structuring_metadata_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kPolishingMetadata: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  103, *this_._impl_.process_meta_data_.polishing_metadata_, this_._impl_.process_meta_data_.polishing_metadata_->GetCachedSize(), target,
                  stream);
              break;
            }
            default:
              break;
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.VectorBlock)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t VectorBlock::ByteSizeLong(const MessageLite& base) {
          const VectorBlock& this_ = static_cast<const VectorBlock&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t VectorBlock::ByteSizeLong() const {
          const VectorBlock& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:open_vector_format.VectorBlock)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .open_vector_format.VectorBlock.VectorBlockMetaData meta_data = 100;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.meta_data_);
            }
          }
           {
            // int32 marking_params_key = 50;
            if (this_._internal_marking_params_key() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_marking_params_key());
            }
            // int32 laser_index = 53;
            if (this_._internal_laser_index() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_laser_index());
            }
            // uint64 repeats = 54;
            if (this_._internal_repeats() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                              this_._internal_repeats());
            }
          }
          switch (this_.vector_data_case()) {
            // .open_vector_format.VectorBlock.LineSequence line_sequence = 1;
            case kLineSequence: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.vector_data_.line_sequence_);
              break;
            }
            // .open_vector_format.VectorBlock.Hatches _hatches = 2;
            case kHatches: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.vector_data_._hatches_);
              break;
            }
            // .open_vector_format.VectorBlock.PointSequence point_sequence = 3;
            case kPointSequence: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.vector_data_.point_sequence_);
              break;
            }
            // .open_vector_format.VectorBlock.Arcs _arcs = 4;
            case kArcs: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.vector_data_._arcs_);
              break;
            }
            // .open_vector_format.VectorBlock.Ellipses ellipses = 5;
            case kEllipses: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.vector_data_.ellipses_);
              break;
            }
            // .open_vector_format.VectorBlock.LineSequence3D line_sequence_3d = 6;
            case kLineSequence3D: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.vector_data_.line_sequence_3d_);
              break;
            }
            // .open_vector_format.VectorBlock.Hatches3D hatches_3d = 7;
            case kHatches3D: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.vector_data_.hatches_3d_);
              break;
            }
            // .open_vector_format.VectorBlock.PointSequence3D point_sequence_3d = 8;
            case kPointSequence3D: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.vector_data_.point_sequence_3d_);
              break;
            }
            // .open_vector_format.VectorBlock.Arcs3D arcs_3d = 9;
            case kArcs3D: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.vector_data_.arcs_3d_);
              break;
            }
            // .open_vector_format.VectorBlock.ExposurePause exposure_pause = 10;
            case kExposurePause: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.vector_data_.exposure_pause_);
              break;
            }
            // .open_vector_format.VectorBlock.LineSequenceParaAdapt line_sequence_para_adapt = 11;
            case kLineSequenceParaAdapt: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.vector_data_.line_sequence_para_adapt_);
              break;
            }
            // .open_vector_format.VectorBlock.HatchesParaAdapt _hatchParaAdapt = 12;
            case kHatchParaAdapt: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.vector_data_._hatchparaadapt_);
              break;
            }
            case VECTOR_DATA_NOT_SET: {
              break;
            }
          }
          switch (this_.process_meta_data_case()) {
            // .open_vector_format.VectorBlock.LPBFMetadata lpbf_metadata = 101;
            case kLpbfMetadata: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.process_meta_data_.lpbf_metadata_);
              break;
            }
            // .open_vector_format.VectorBlock.MicroStructuringMetadata micro_structuring_metadata = 102;
            case kMicroStructuringMetadata: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.process_meta_data_.micro_structuring_metadata_);
              break;
            }
            // .open_vector_format.VectorBlock.PolishingMetadata polishing_metadata = 103;
            case kPolishingMetadata: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.process_meta_data_.polishing_metadata_);
              break;
            }
            case PROCESS_META_DATA_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void VectorBlock::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<VectorBlock*>(&to_msg);
  auto& from = static_cast<const VectorBlock&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.VectorBlock)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.meta_data_ != nullptr);
    if (_this->_impl_.meta_data_ == nullptr) {
      _this->_impl_.meta_data_ =
          ::google::protobuf::Message::CopyConstruct<::open_vector_format::VectorBlock_VectorBlockMetaData>(arena, *from._impl_.meta_data_);
    } else {
      _this->_impl_.meta_data_->MergeFrom(*from._impl_.meta_data_);
    }
  }
  if (from._internal_marking_params_key() != 0) {
    _this->_impl_.marking_params_key_ = from._impl_.marking_params_key_;
  }
  if (from._internal_laser_index() != 0) {
    _this->_impl_.laser_index_ = from._impl_.laser_index_;
  }
  if (from._internal_repeats() != 0) {
    _this->_impl_.repeats_ = from._impl_.repeats_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_vector_data();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kLineSequence: {
        if (oneof_needs_init) {
          _this->_impl_.vector_data_.line_sequence_ =
              ::google::protobuf::Message::CopyConstruct<::open_vector_format::VectorBlock_LineSequence>(arena, *from._impl_.vector_data_.line_sequence_);
        } else {
          _this->_impl_.vector_data_.line_sequence_->MergeFrom(from._internal_line_sequence());
        }
        break;
      }
      case kHatches: {
        if (oneof_needs_init) {
          _this->_impl_.vector_data_._hatches_ =
              ::google::protobuf::Message::CopyConstruct<::open_vector_format::VectorBlock_Hatches>(arena, *from._impl_.vector_data_._hatches_);
        } else {
          _this->_impl_.vector_data_._hatches_->MergeFrom(from._internal__hatches());
        }
        break;
      }
      case kPointSequence: {
        if (oneof_needs_init) {
          _this->_impl_.vector_data_.point_sequence_ =
              ::google::protobuf::Message::CopyConstruct<::open_vector_format::VectorBlock_PointSequence>(arena, *from._impl_.vector_data_.point_sequence_);
        } else {
          _this->_impl_.vector_data_.point_sequence_->MergeFrom(from._internal_point_sequence());
        }
        break;
      }
      case kArcs: {
        if (oneof_needs_init) {
          _this->_impl_.vector_data_._arcs_ =
              ::google::protobuf::Message::CopyConstruct<::open_vector_format::VectorBlock_Arcs>(arena, *from._impl_.vector_data_._arcs_);
        } else {
          _this->_impl_.vector_data_._arcs_->MergeFrom(from._internal__arcs());
        }
        break;
      }
      case kEllipses: {
        if (oneof_needs_init) {
          _this->_impl_.vector_data_.ellipses_ =
              ::google::protobuf::Message::CopyConstruct<::open_vector_format::VectorBlock_Ellipses>(arena, *from._impl_.vector_data_.ellipses_);
        } else {
          _this->_impl_.vector_data_.ellipses_->MergeFrom(from._internal_ellipses());
        }
        break;
      }
      case kLineSequence3D: {
        if (oneof_needs_init) {
          _this->_impl_.vector_data_.line_sequence_3d_ =
              ::google::protobuf::Message::CopyConstruct<::open_vector_format::VectorBlock_LineSequence3D>(arena, *from._impl_.vector_data_.line_sequence_3d_);
        } else {
          _this->_impl_.vector_data_.line_sequence_3d_->MergeFrom(from._internal_line_sequence_3d());
        }
        break;
      }
      case kHatches3D: {
        if (oneof_needs_init) {
          _this->_impl_.vector_data_.hatches_3d_ =
              ::google::protobuf::Message::CopyConstruct<::open_vector_format::VectorBlock_Hatches3D>(arena, *from._impl_.vector_data_.hatches_3d_);
        } else {
          _this->_impl_.vector_data_.hatches_3d_->MergeFrom(from._internal_hatches_3d());
        }
        break;
      }
      case kPointSequence3D: {
        if (oneof_needs_init) {
          _this->_impl_.vector_data_.point_sequence_3d_ =
              ::google::protobuf::Message::CopyConstruct<::open_vector_format::VectorBlock_PointSequence3D>(arena, *from._impl_.vector_data_.point_sequence_3d_);
        } else {
          _this->_impl_.vector_data_.point_sequence_3d_->MergeFrom(from._internal_point_sequence_3d());
        }
        break;
      }
      case kArcs3D: {
        if (oneof_needs_init) {
          _this->_impl_.vector_data_.arcs_3d_ =
              ::google::protobuf::Message::CopyConstruct<::open_vector_format::VectorBlock_Arcs3D>(arena, *from._impl_.vector_data_.arcs_3d_);
        } else {
          _this->_impl_.vector_data_.arcs_3d_->MergeFrom(from._internal_arcs_3d());
        }
        break;
      }
      case kExposurePause: {
        if (oneof_needs_init) {
          _this->_impl_.vector_data_.exposure_pause_ =
              ::google::protobuf::Message::CopyConstruct<::open_vector_format::VectorBlock_ExposurePause>(arena, *from._impl_.vector_data_.exposure_pause_);
        } else {
          _this->_impl_.vector_data_.exposure_pause_->MergeFrom(from._internal_exposure_pause());
        }
        break;
      }
      case kLineSequenceParaAdapt: {
        if (oneof_needs_init) {
          _this->_impl_.vector_data_.line_sequence_para_adapt_ =
              ::google::protobuf::Message::CopyConstruct<::open_vector_format::VectorBlock_LineSequenceParaAdapt>(arena, *from._impl_.vector_data_.line_sequence_para_adapt_);
        } else {
          _this->_impl_.vector_data_.line_sequence_para_adapt_->MergeFrom(from._internal_line_sequence_para_adapt());
        }
        break;
      }
      case kHatchParaAdapt: {
        if (oneof_needs_init) {
          _this->_impl_.vector_data_._hatchparaadapt_ =
              ::google::protobuf::Message::CopyConstruct<::open_vector_format::VectorBlock_HatchesParaAdapt>(arena, *from._impl_.vector_data_._hatchparaadapt_);
        } else {
          _this->_impl_.vector_data_._hatchparaadapt_->MergeFrom(from._internal__hatchparaadapt());
        }
        break;
      }
      case VECTOR_DATA_NOT_SET:
        break;
    }
  }
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[1]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[1];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_process_meta_data();
      }
      _this->_impl_._oneof_case_[1] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kLpbfMetadata: {
        if (oneof_needs_init) {
          _this->_impl_.process_meta_data_.lpbf_metadata_ =
              ::google::protobuf::Message::CopyConstruct<::open_vector_format::VectorBlock_LPBFMetadata>(arena, *from._impl_.process_meta_data_.lpbf_metadata_);
        } else {
          _this->_impl_.process_meta_data_.lpbf_metadata_->MergeFrom(from._internal_lpbf_metadata());
        }
        break;
      }
      case kMicroStructuringMetadata: {
        if (oneof_needs_init) {
          _this->_impl_.process_meta_data_.micro_structuring_metadata_ =
              ::google::protobuf::Message::CopyConstruct<::open_vector_format::VectorBlock_MicroStructuringMetadata>(arena, *from._impl_.process_meta_data_.micro_structuring_metadata_);
        } else {
          _this->_impl_.process_meta_data_.micro_structuring_metadata_->MergeFrom(from._internal_micro_structuring_metadata());
        }
        break;
      }
      case kPolishingMetadata: {
        if (oneof_needs_init) {
          _this->_impl_.process_meta_data_.polishing_metadata_ =
              ::google::protobuf::Message::CopyConstruct<::open_vector_format::VectorBlock_PolishingMetadata>(arena, *from._impl_.process_meta_data_.polishing_metadata_);
        } else {
          _this->_impl_.process_meta_data_.polishing_metadata_->MergeFrom(from._internal_polishing_metadata());
        }
        break;
      }
      case PROCESS_META_DATA_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VectorBlock::CopyFrom(const VectorBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.VectorBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void VectorBlock::InternalSwap(VectorBlock* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VectorBlock, _impl_.repeats_)
      + sizeof(VectorBlock::_impl_.repeats_)
      - PROTOBUF_FIELD_OFFSET(VectorBlock, _impl_.meta_data_)>(
          reinterpret_cast<char*>(&_impl_.meta_data_),
          reinterpret_cast<char*>(&other->_impl_.meta_data_));
  swap(_impl_.vector_data_, other->_impl_.vector_data_);
  swap(_impl_.process_meta_data_, other->_impl_.process_meta_data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
}

::google::protobuf::Metadata VectorBlock::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AxisAlignedBox2D::_Internal {
 public:
};

AxisAlignedBox2D::AxisAlignedBox2D(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.AxisAlignedBox2D)
}
AxisAlignedBox2D::AxisAlignedBox2D(
    ::google::protobuf::Arena* arena, const AxisAlignedBox2D& from)
    : AxisAlignedBox2D(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE AxisAlignedBox2D::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AxisAlignedBox2D::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_min_),
           0,
           offsetof(Impl_, y_max_) -
               offsetof(Impl_, x_min_) +
               sizeof(Impl_::y_max_));
}
AxisAlignedBox2D::~AxisAlignedBox2D() {
  // @@protoc_insertion_point(destructor:open_vector_format.AxisAlignedBox2D)
  SharedDtor(*this);
}
inline void AxisAlignedBox2D::SharedDtor(MessageLite& self) {
  AxisAlignedBox2D& this_ = static_cast<AxisAlignedBox2D&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* AxisAlignedBox2D::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) AxisAlignedBox2D(arena);
}
constexpr auto AxisAlignedBox2D::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(AxisAlignedBox2D),
                                            alignof(AxisAlignedBox2D));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull AxisAlignedBox2D::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_AxisAlignedBox2D_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &AxisAlignedBox2D::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<AxisAlignedBox2D>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &AxisAlignedBox2D::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<AxisAlignedBox2D>(), &AxisAlignedBox2D::ByteSizeLong,
            &AxisAlignedBox2D::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(AxisAlignedBox2D, _impl_._cached_size_),
        false,
    },
    &AxisAlignedBox2D::kDescriptorMethods,
    &descriptor_table_open_5fvector_5fformat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* AxisAlignedBox2D::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> AxisAlignedBox2D::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::open_vector_format::AxisAlignedBox2D>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // float y_max = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(AxisAlignedBox2D, _impl_.y_max_)}},
    // float x_min = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(AxisAlignedBox2D, _impl_.x_min_)}},
    // float y_min = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(AxisAlignedBox2D, _impl_.y_min_)}},
    // float x_max = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(AxisAlignedBox2D, _impl_.x_max_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float x_min = 1;
    {PROTOBUF_FIELD_OFFSET(AxisAlignedBox2D, _impl_.x_min_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float y_min = 2;
    {PROTOBUF_FIELD_OFFSET(AxisAlignedBox2D, _impl_.y_min_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float x_max = 3;
    {PROTOBUF_FIELD_OFFSET(AxisAlignedBox2D, _impl_.x_max_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float y_max = 4;
    {PROTOBUF_FIELD_OFFSET(AxisAlignedBox2D, _impl_.y_max_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void AxisAlignedBox2D::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.AxisAlignedBox2D)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_min_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.y_max_) -
      reinterpret_cast<char*>(&_impl_.x_min_)) + sizeof(_impl_.y_max_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AxisAlignedBox2D::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AxisAlignedBox2D& this_ = static_cast<const AxisAlignedBox2D&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AxisAlignedBox2D::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AxisAlignedBox2D& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.AxisAlignedBox2D)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float x_min = 1;
          if (::absl::bit_cast<::uint32_t>(this_._internal_x_min()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_x_min(), target);
          }

          // float y_min = 2;
          if (::absl::bit_cast<::uint32_t>(this_._internal_y_min()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_y_min(), target);
          }

          // float x_max = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_x_max()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_x_max(), target);
          }

          // float y_max = 4;
          if (::absl::bit_cast<::uint32_t>(this_._internal_y_max()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_y_max(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.AxisAlignedBox2D)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AxisAlignedBox2D::ByteSizeLong(const MessageLite& base) {
          const AxisAlignedBox2D& this_ = static_cast<const AxisAlignedBox2D&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AxisAlignedBox2D::ByteSizeLong() const {
          const AxisAlignedBox2D& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:open_vector_format.AxisAlignedBox2D)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // float x_min = 1;
            if (::absl::bit_cast<::uint32_t>(this_._internal_x_min()) != 0) {
              total_size += 5;
            }
            // float y_min = 2;
            if (::absl::bit_cast<::uint32_t>(this_._internal_y_min()) != 0) {
              total_size += 5;
            }
            // float x_max = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_x_max()) != 0) {
              total_size += 5;
            }
            // float y_max = 4;
            if (::absl::bit_cast<::uint32_t>(this_._internal_y_max()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AxisAlignedBox2D::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AxisAlignedBox2D*>(&to_msg);
  auto& from = static_cast<const AxisAlignedBox2D&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.AxisAlignedBox2D)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint32_t>(from._internal_x_min()) != 0) {
    _this->_impl_.x_min_ = from._impl_.x_min_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_y_min()) != 0) {
    _this->_impl_.y_min_ = from._impl_.y_min_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_x_max()) != 0) {
    _this->_impl_.x_max_ = from._impl_.x_max_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_y_max()) != 0) {
    _this->_impl_.y_max_ = from._impl_.y_max_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AxisAlignedBox2D::CopyFrom(const AxisAlignedBox2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.AxisAlignedBox2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AxisAlignedBox2D::InternalSwap(AxisAlignedBox2D* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AxisAlignedBox2D, _impl_.y_max_)
      + sizeof(AxisAlignedBox2D::_impl_.y_max_)
      - PROTOBUF_FIELD_OFFSET(AxisAlignedBox2D, _impl_.x_min_)>(
          reinterpret_cast<char*>(&_impl_.x_min_),
          reinterpret_cast<char*>(&other->_impl_.x_min_));
}

::google::protobuf::Metadata AxisAlignedBox2D::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace open_vector_format
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_open_5fvector_5fformat_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
